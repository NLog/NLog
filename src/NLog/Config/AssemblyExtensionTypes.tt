<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)NLog.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<# 
    //T4 templates are built in Visual Studio. See https://msdn.microsoft.com/en-us/library/bb126445.aspx
#>// 
// Copyright (c) 2004-2021 Jaroslaw Kowalski <jaak@jkowalski.net>, Kim Christensen, Julian Verdurmen
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer. 
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution. 
// 
// * Neither the name of Jaroslaw Kowalski nor the names of its 
//   contributors may be used to endorse or promote products derived from this
//   software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
// 

namespace NLog.Config
{
    /// <summary>
    /// Provides logging interface and utility functions.
    /// </summary>
    internal static class AssemblyExtensionTypes
    {
        public static void RegisterTypes(ConfigurationItemFactory factory)
        {
            #pragma warning disable CS0618 // Type or member is obsolete
<#
    var types  = typeof(NLog.LogFactory).Assembly.GetTypes().OrderBy(t => t.ToString());

    var netFramework = new string[]
    {
        "NLog.LayoutRenderers.AppSettingLayoutRenderer",
        "NLog.Targets.EventLogTarget",
    };
    var netStandard2 = new string[]
    {
        "NLog.Targets.MailTarget",
        "NLog.Targets.DebuggerTarget",
        "NLog.LayoutRenderers.EnvironmentUserLayoutRenderer",
        "NLog.LayoutRenderers.IdentityLayoutRenderer",
        "NLog.LayoutRenderers.LocalIpAddressLayoutRenderer",
        "NLog.LayoutRenderers.SpecialFolderApplicationDataLayoutRenderer",
        "NLog.LayoutRenderers.SpecialFolderCommonApplicationDataLayoutRenderer",
        "NLog.LayoutRenderers.SpecialFolderLayoutRenderer",
        "NLog.LayoutRenderers.SpecialFolderLocalApplicationDataLayoutRenderer",
        "NLog.LayoutRenderers.TraceActivityIdLayoutRenderer",
        "NLog.LayoutRenderers.TraceActivityIdLayoutRenderer", 
    };
    var netStandard15 = new string[]
    {
        "NLog.LayoutRenderers.NLogDirLayoutRenderer",
        "NLog.LayoutRenderers.ProcessDirLayoutRenderer",
        "NLog.LayoutRenderers.ProcessIdLayoutRenderer",
        "NLog.LayoutRenderers.ProcessInfoLayoutRenderer",
        "NLog.LayoutRenderers.ProcessNameLayoutRenderer",
        "NLog.Targets.ColoredConsoleTarget",
        "NLog.Targets.ConsoleRowHighlightingRule",
        "NLog.Targets.ConsoleWordHighlightingRule",
        "NLog.Targets.ConsoleTarget",
        "NLog.Targets.TraceTarget",
    };

    foreach(var type in types)
    {
        if (type.IsAbstract || type.IsPrimitive || !type.IsPublic)
            continue;

        if (netFramework.Contains(type.ToString()))
        {
#>
#if !NETSTANDARD
<#
        }
        else if (netStandard2.Contains(type.ToString()))
        {
#>
#if !NETSTANDARD1_3 && !NETSTANDARD1_5
<#
        }
        else if (netStandard15.Contains(type.ToString()))
        {
#>
#if !NETSTANDARD1_3
<#
        }

        if (typeof(NLog.Targets.Target).IsAssignableFrom(type))
        {
            var targetAttributes = type.GetCustomAttributes<NLog.Targets.TargetAttribute>(false);
            foreach (var targetAlias in targetAttributes)
            {
                var targetAliasName = targetAlias.Name;
#>
            factory.TargetFactory.RegisterType<<#= type #>>("<#= targetAliasName #>");
<#
            }
        }
        else if (typeof(NLog.Layouts.Layout).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.Layouts.LayoutAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            factory.LayoutFactory.RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
        else if (typeof(NLog.LayoutRenderers.LayoutRenderer).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.LayoutRendererAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            factory.LayoutRendererFactory.RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }

            var ambientAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.AmbientPropertyAttribute>(false);
            foreach (var layoutAlias in ambientAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            factory.AmbientRendererFactory.RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
        else if (typeof(NLog.Filters.Filter).IsAssignableFrom(type))
        {
            var filterAttributes = type.GetCustomAttributes<NLog.Filters.FilterAttribute>(false);
            foreach (var filterAlias in filterAttributes)
            {
                var filterName = filterAlias.Name;
#>
            factory.FilterFactory.RegisterType<<#= type #>>("<#= filterName #>");
<#
            }
        }
        else if (typeof(NLog.Time.TimeSource).IsAssignableFrom(type))
        {
            var timeSourceAttribute = type.GetCustomAttributes<NLog.Time.TimeSourceAttribute>(false);
            foreach (var timeAlias in timeSourceAttribute)
            {
                var timeSourceName = timeAlias.Name;
#>
            factory.TimeSourceFactory.RegisterType<<#= type #>>("<#= timeSourceName #>");
<#
            }
        }
        else
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(false);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }

        if (netFramework.Contains(type.ToString()) || netStandard2.Contains(type.ToString()) || netStandard15.Contains(type.ToString()))
        {
#>
#endif
<#
        }
    }
#>
            #pragma warning restore CS0618 // Type or member is obsolete
        }
    }
}