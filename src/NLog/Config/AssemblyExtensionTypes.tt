<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="$(TargetDir)NLog.dll" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Text" #>
<#@ output extension=".cs" #>
<#
    //T4 templates are built in Visual Studio. See https://msdn.microsoft.com/en-us/library/bb126445.aspx
#>//
// Copyright (c) 2004-2024 Jaroslaw Kowalski <jaak@jkowalski.net>, Kim Christensen, Julian Verdurmen
//
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions
// are met:
//
// * Redistributions of source code must retain the above copyright notice,
//   this list of conditions and the following disclaimer.
//
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution.
//
// * Neither the name of Jaroslaw Kowalski nor the names of its
//   contributors may be used to endorse or promote products derived from this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
// THE POSSIBILITY OF SUCH DAMAGE.
//

namespace NLog.Config
{
    /// <summary>
    /// Provides logging interface and utility functions.
    /// </summary>
    internal static class AssemblyExtensionTypes
    {
#pragma warning disable CS0618 // Type or member is obsolete
<#
    string[] NetFrameworkOnly = new [] {
        "NLog.LayoutRenderers.AppSettingLayoutRenderer",
        "NLog.Targets.EventLogTarget",
    };
    Type[] AllTypes = typeof(NLog.LogFactory).Assembly.GetTypes().Where(t => !t.IsAbstract && !t.IsPrimitive && t.IsClass && !t.IsNested && !NetFrameworkOnly.Contains(t.ToString())).OrderBy(t => t.ToString()).ToArray();
#>
        public static void RegisterTargetTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
            factory.RegisterTypeProperties<NLog.Targets.TargetWithContext.TargetWithContextLayout>(() => null);
#if NETFRAMEWORK
            if (skipCheckExists || !factory.GetTargetFactory().CheckTypeAliasExists("EventLog"))
                factory.GetTargetFactory().RegisterType<NLog.Targets.EventLogTarget>("EventLog");
#endif
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.Targets.Target).IsAssignableFrom(type))
        {
            var targetAttributes = type.GetCustomAttributes<NLog.Targets.TargetAttribute>(false);
            foreach (var targetAlias in targetAttributes)
            {
                var targetAliasName = targetAlias.Name;
#>
            if (skipCheckExists || !factory.GetTargetFactory().CheckTypeAliasExists("<#= targetAliasName #>"))
                factory.GetTargetFactory().RegisterType<<#= type #>>("<#= targetAliasName #>");
<#
            }
        }
        else if (type.ToString().StartsWith("NLog.Targets"))
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(true);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }
    }
#>
        }

        public static void RegisterLayoutTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
            factory.RegisterTypeProperties<NLog.Layouts.CsvLayout.CsvHeaderLayout>(() => null);
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.Layouts.Layout).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.Layouts.LayoutAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            if (skipCheckExists || !factory.GetLayoutFactory().CheckTypeAliasExists("<#= layoutAliasName #>"))
                factory.GetLayoutFactory().RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
        else if (type.ToString().StartsWith("NLog.Layouts"))
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(true);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }
    }
#>
        }

        public static void RegisterLayoutRendererTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
#if NETFRAMEWORK
            factory.GetLayoutRendererFactory().RegisterType<NLog.LayoutRenderers.AppSettingLayoutRenderer>("appsetting");
#endif
            factory.RegisterTypeProperties<NLog.LayoutRenderers.LiteralWithRawValueLayoutRenderer>(() => null);
            factory.RegisterTypeProperties<NLog.LayoutRenderers.FuncLayoutRenderer>(() => null);
            factory.RegisterTypeProperties<NLog.LayoutRenderers.FuncThreadAgnosticLayoutRenderer>(() => null);
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.LayoutRenderers.LayoutRenderer).IsAssignableFrom(type))
        {
            var layoutAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.LayoutRendererAttribute>(false);
            foreach (var layoutAlias in layoutAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            if (skipCheckExists || !factory.GetLayoutRendererFactory().CheckTypeAliasExists("<#= layoutAliasName #>"))
                factory.GetLayoutRendererFactory().RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }

            var ambientAttributes = type.GetCustomAttributes<NLog.LayoutRenderers.AmbientPropertyAttribute>(false);
            foreach (var layoutAlias in ambientAttributes)
            {
                var layoutAliasName = layoutAlias.Name;
#>
            if (skipCheckExists || !factory.GetAmbientPropertyFactory().CheckTypeAliasExists("<#= layoutAliasName #>"))
                factory.GetAmbientPropertyFactory().RegisterType<<#= type #>>("<#= layoutAliasName #>");
<#
            }
        }
        else if (type.ToString().StartsWith("NLog.LayoutRenderers"))
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(true);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }
    }
#>
        }

        public static void RegisterFilterTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.Filters.Filter).IsAssignableFrom(type))
        {
            var filterAttributes = type.GetCustomAttributes<NLog.Filters.FilterAttribute>(false);
            foreach (var filterAlias in filterAttributes)
            {
                var filterAliasName = filterAlias.Name;
#>
            if (skipCheckExists || !factory.GetFilterFactory().CheckTypeAliasExists("<#= filterAliasName #>"))
                factory.GetFilterFactory().RegisterType<<#= type #>>("<#= filterAliasName #>");
<#
            }
        }
        else if (type.ToString().StartsWith("NLog.Filters"))
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(true);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }
    }
#>
        }

        public static void RegisterTimeSourceTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.Time.TimeSource).IsAssignableFrom(type))
        {
            var timeSourceAttribute = type.GetCustomAttributes<NLog.Time.TimeSourceAttribute>(false);
            foreach (var timeAlias in timeSourceAttribute)
            {
                var timeAliasName = timeAlias.Name;
#>
            if (skipCheckExists || !factory.GetTimeSourceFactory().CheckTypeAliasExists("<#= timeAliasName #>"))
                factory.GetTimeSourceFactory().RegisterType<<#= type #>>("<#= timeAliasName #>");
<#
            }
        }
        else if (type.ToString().StartsWith("NLog.Time"))
        {
            var configAttribute = type.GetCustomAttributes<NLog.Config.NLogConfigurationItemAttribute>(true);
            if (configAttribute?.Any() == true)
            {
#>
            factory.RegisterType<<#= type #>>();
<#
            }
        }
    }
#>
        }

        public static void RegisterConditionTypes(ConfigurationItemFactory factory, bool skipCheckExists)
        {
<#
    foreach(var type in AllTypes)
    {
        if (typeof(NLog.Conditions.ConditionExpression).IsAssignableFrom(type))
        {
#>
            factory.RegisterTypeProperties<<#= type #>>(() => null);
<#
        }
    }
#>

            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("length"))
                factory.GetConditionMethodFactory().RegisterOneParameter("length", (logEvent, arg1) => NLog.Conditions.ConditionMethods.Length(arg1?.ToString()));
            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("equals"))
                factory.GetConditionMethodFactory().RegisterTwoParameters("equals", (logEvent, arg1, arg2) => NLog.Conditions.ConditionMethods.Equals2(arg1?.ToString(), arg2?.ToString()));
            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("strequals"))
            {
                factory.GetConditionMethodFactory().RegisterTwoParameters("strequals", (logEvent, arg1, arg2) => NLog.Conditions.ConditionMethods.Equals2(arg1?.ToString(), arg2?.ToString()));
                factory.GetConditionMethodFactory().RegisterThreeParameters("strequals", (logEvent, arg1, arg2, arg3) => NLog.Conditions.ConditionMethods.Equals2(arg1?.ToString(), arg2?.ToString(), arg3 is bool ignoreCase ? ignoreCase : true));
            }
            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("contains"))
            {
                factory.GetConditionMethodFactory().RegisterTwoParameters("contains", (logEvent, arg1, arg2) => NLog.Conditions.ConditionMethods.Contains(arg1?.ToString(), arg2?.ToString()));
                factory.GetConditionMethodFactory().RegisterThreeParameters("contains", (logEvent, arg1, arg2, arg3) => NLog.Conditions.ConditionMethods.Contains(arg1?.ToString(), arg2?.ToString(), arg3 is bool ignoreCase ? ignoreCase : true));
            }
            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("starts-with"))
            {
                factory.GetConditionMethodFactory().RegisterTwoParameters("starts-with", (logEvent, arg1, arg2) => NLog.Conditions.ConditionMethods.StartsWith(arg1?.ToString(), arg2?.ToString()));
                factory.GetConditionMethodFactory().RegisterThreeParameters("starts-with", (logEvent, arg1, arg2, arg3) => NLog.Conditions.ConditionMethods.StartsWith(arg1?.ToString(), arg2?.ToString(), arg3 is bool ignoreCase ? ignoreCase : true));
            }
            if (skipCheckExists || !factory.GetConditionMethodFactory().CheckTypeAliasExists("ends-with"))
            {
                factory.GetConditionMethodFactory().RegisterTwoParameters("ends-with", (logEvent, arg1, arg2) => NLog.Conditions.ConditionMethods.EndsWith(arg1?.ToString(), arg2?.ToString()));
                factory.GetConditionMethodFactory().RegisterThreeParameters("ends-with", (logEvent, arg1, arg2, arg3) => NLog.Conditions.ConditionMethods.EndsWith(arg1?.ToString(), arg2?.ToString(), arg3 is bool ignoreCase ? ignoreCase : true));
            }
        }
#pragma warning restore CS0618 // Type or member is obsolete
    }
}
