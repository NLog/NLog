// 
// Copyright (c) 2004-2011 Jaroslaw Kowalski <jaak@jkowalski.net>
// 
// All rights reserved.
// 
// Redistribution and use in source and binary forms, with or without 
// modification, are permitted provided that the following conditions 
// are met:
// 
// * Redistributions of source code must retain the above copyright notice, 
//   this list of conditions and the following disclaimer. 
// 
// * Redistributions in binary form must reproduce the above copyright notice,
//   this list of conditions and the following disclaimer in the documentation
//   and/or other materials provided with the distribution. 
// 
// * Neither the name of Jaroslaw Kowalski nor the names of its 
//   contributors may be used to endorse or promote products derived from this
//   software without specific prior written permission. 
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE 
// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE 
// ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE 
// LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR 
// CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
// SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS 
// INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN 
// CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) 
// ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF 
// THE POSSIBILITY OF SUCH DAMAGE.
// 

namespace NLog.Targets
{
    using System.IO;
    using NLog.Common;

    /// <summary>
    /// Archives files using a rolling style numbering (the most recent is always #0 then #1, ..., #N.
    /// </summary>
    internal class RollingFileArchive : BaseFileArchive
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="RollingFileArchive"/> class.
        /// </summary>
        /// <param name="target">The <see cref="FileTarget"/> creating this class.</param>
        public RollingFileArchive(FileTarget target) : base(target) { }

        /// <summary>
        /// Gets the way file archives are numbered from this particular class. 
        /// </summary>
        public ArchiveNumberingMode ArchiveNumbering 
        {
            get { return ArchiveNumberingMode.Rolling; }
        }

        /// <summary>
        /// Perform the archiving process.
        /// </summary>
        /// <remarks>
        /// An acceptable name for the archive file is generated by combining the pattern with the existing file.
        /// </remarks>
        /// <param name="fileName">Name of the file to be archived.</param>
        /// <param name="pattern">The pattern used to match the file names.</param>
        public void Process(string fileName, string pattern) 
        {
            Process(fileName, pattern, archiveNumber: 0);
        }

        /// <summary>
        /// Perform the archiving process.
        /// </summary>
        /// <remarks>
        /// <para>An acceptable name for the archive file is generated by combining the pattern with the existing file.</para>
        /// <para>This method is called recursively.</para>
        /// </remarks>
        /// <param name="fileName">Name of the file to be archived.</param>
        /// <param name="pattern">The pattern used to match the file names.</param>
        /// <param name="archiveNumber">The starting point of the sequence which we will search from.</param>
        private void Process(string fileName, string pattern, int archiveNumber)
        {
            if (Size > 0 && archiveNumber >= Size)
            {
                File.Delete(fileName);
                return;
            }

            if (!File.Exists(fileName))
            {
                return;
            }

            string newFileName = ReplaceNumbericPattern(pattern, archiveNumber);
            if (File.Exists(fileName))
            {
                Process(newFileName, pattern, archiveNumber + 1);
            }

            InternalLogger.Trace("Renaming {0} to {1}", fileName, newFileName);

            // TODO: CompressionEnabled property is NOT considered at all here. Is this our intention?

            var shouldCompress = (archiveNumber == 0);
            try
            {
                RollArchiveForward(fileName, newFileName, shouldCompress);
            }
            catch (IOException)
            {
                // TODO: Check the value of CreateDirs property before creating directories.
                string dir = Path.GetDirectoryName(newFileName);
                if (!Directory.Exists(dir))
                {
                    Directory.CreateDirectory(dir);
                }

                RollArchiveForward(fileName, newFileName, shouldCompress);
            }
        }
    }

}
