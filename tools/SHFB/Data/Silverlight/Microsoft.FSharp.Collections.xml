<?xml version="1.0" encoding="utf-8"?>
<reflection>
  <assemblies>
    <assembly name="FSharp.Core">
      <assemblydata version="2.3.5.0" culture="" key="002400000480000094000000060200000024000052534131000400000100010007D1FA57C4AED9F0A32E84AA0FAEFD0DE9E8FD6AEC8F87FB03766C834C99921EB23BE79AD9D5DCC1DD9AD236132102900B723CF980957FC4E177108FC607774F29E8320E92EA05ECE4E821C0A5EFE8F1645C4C0C93C1AB99285D622CAA652C1DFAD63D745D6F2DE5F17E5EAF0FC4963D261C8A12436518206DC093344D5AD293" hash="SHA1" />
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.FSharpInterfaceDataVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>2</value>
          </argument>
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Core.LanguagePrimitives.IntrinsicOperators</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Core</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Collections</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Control</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Linq.QueryRunExtensions.LowPriority</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.AutoOpenAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft.FSharp.Linq.QueryRunExtensions.HighPriority</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.CLSCompliantAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyTitleAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharp.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDescriptionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharp.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDefaultAliasAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharp.Core.dll</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCompanyAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft Corporation</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyProductAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>Microsoft® Visual Studio® 2012</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyCopyrightAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>© Microsoft Corporation. All rights reserved.</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>2.3.5.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyFileVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>2.3.60315.1</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyInformationalVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>2.3.5.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.SatelliteContractVersionAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>2.3.5.0</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Resources.NeutralResourcesLanguageAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>en-US</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyDelaySignAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>True</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:System.Reflection.AssemblyKeyFileAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>f:\dd\tools\devdiv\FinalPublicKey.snk</value>
          </argument>
        </attribute>
      </attributes>
    </assembly>
  </assemblies>
  <apis>
    <api id="N:Microsoft.FSharp.Collections">
      <topicdata group="api" />
      <apidata name="Microsoft.FSharp.Collections" group="namespace" />
      <elements>
        <element api="T:Microsoft.FSharp.Collections.FSharpList`1" />
        <element api="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
        <element api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        <element api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        <element api="T:Microsoft.FSharp.Collections.SetModule" />
        <element api="T:Microsoft.FSharp.Collections.MapModule" />
        <element api="T:Microsoft.FSharp.Collections.Array4DModule" />
        <element api="T:Microsoft.FSharp.Collections.Array3DModule" />
        <element api="T:Microsoft.FSharp.Collections.ArrayModule" />
        <element api="T:Microsoft.FSharp.Collections.ListModule" />
        <element api="T:Microsoft.FSharp.Collections.SeqModule" />
        <element api="T:Microsoft.FSharp.Collections.ComparisonIdentity" />
        <element api="T:Microsoft.FSharp.Collections.HashIdentity" />
        <element api="T:Microsoft.FSharp.Collections.Array2DModule" />
      </elements>
      <file name="da99c826-b956-ab78-8987-39655ed7ab2e" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.Array2DModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.Array2DModule" />
      <apidata name="Array2DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="79799b8e-b3dc-6861-6cf1-251b4c1bd83f" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.Array2DModule">
      <topicdata name="Array2DModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.Array2DModule" />
      <apidata name="Array2DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}})" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" />
      </containers>
      <file name="25188c94-b685-0a66-8526-f5df512aa5ac" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.Array2DModule">
      <topicdata name="Array2DModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.Array2DModule" />
      <apidata name="Array2DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}})" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" />
      </containers>
      <file name="f2400082-af4f-5569-91e4-0f16cccf2cbe" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Base1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Base1``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>base1</value>
          </argument>
        </attribute>
      </attributes>
      <file name="5d34e015-5fc4-d11a-1e44-70ee9e381017" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Base2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Base2``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>base2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="fafb79e7-b181-db19-015b-69ea0cacc074" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Copy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Copy``1(``0[0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>copy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f3733571-cf6a-5f27-135b-bada68d0bf7b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="sourceIndex1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="sourceIndex2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="target">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.CopyTo``1(``0[0:,0:],System.Int32,System.Int32,``0[0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="targetIndex1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="targetIndex2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>blit</value>
          </argument>
        </attribute>
      </attributes>
      <file name="bbad1ebf-73af-54fe-49e7-5fe5fa18e9b2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Create``1(System.Int32,System.Int32,``0)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>create</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1b2f13ad-708a-5559-f60f-c0494d0e8d0b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Get``1(``0[0:,0:],System.Int32,System.Int32)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>get</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3e35133b-960b-ed94-e4c6-e4633d8fc649" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Initialize``1(System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="39a575f0-0c62-a9f4-4923-96eb78971dd8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="dc7408a8-c760-fe67-fbfb-29a3bdfe9488" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="IterateIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])" />
                      <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}},``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri</value>
          </argument>
        </attribute>
      </attributes>
      <file name="954c1817-2fc6-ae57-f8e0-cf0773e18aed" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Length1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Length1``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length1</value>
          </argument>
        </attribute>
      </attributes>
      <file name="5db06cc5-878b-654e-7626-1f9447e0d5fe" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Length2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Length2``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="63af1435-d7be-f33c-3c53-cfbb5fd9656e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array2DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f317406d-06fc-e58c-4566-f306ae92a0b8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="MapIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
                      <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array2DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}},``0[0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4ec70744-4712-eff1-ba1e-176060c73d7a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])">
      <topicdata group="api" />
      <apidata name="Rebase" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Rebase``1(``0[0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>rebase</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3ff71779-098e-629a-50c7-af409019d181" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Set" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="2">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.Set``1(``0[0:,0:],System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>set</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e1765399-df74-7b38-ee95-e8d74aa22443" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="ZeroCreate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="2">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array2DModule.ZeroCreate``1(System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array2DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zeroCreate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="21ccb65a-1b63-3729-d281-842bf02cbef5" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.Array3DModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.Array3DModule" />
      <apidata name="Array3DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="b23606a2-c4a9-3680-7406-ca0f16e8300c" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.Array3DModule">
      <topicdata name="Array3DModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.Array3DModule" />
      <apidata name="Array3DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}})" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" />
      </containers>
      <file name="19c9c124-7351-8ba8-0785-06be06d3b3fe" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.Array3DModule">
      <topicdata name="Array3DModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.Array3DModule" />
      <apidata name="Array3DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}})" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" />
      </containers>
      <file name="4d9dfcbe-901f-4687-fcae-439ebc83a098" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initial">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="3">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Create``1(System.Int32,System.Int32,System.Int32,``0)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>create</value>
          </argument>
        </attribute>
      </attributes>
      <file name="801fa669-efbb-c7b1-b3d4-94a0fce47b3c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Get``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>get</value>
          </argument>
        </attribute>
      </attributes>
      <file name="16d30430-3581-b5ad-8a21-12af77c75028" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                      <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="3">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Initialize``1(System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a35dddb5-eaaa-ebf0-58ea-8f04001a03a8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="42cd6ea8-91df-c746-c9d3-d1136441d69d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="IterateIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                      <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                        <specialization>
                          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])" />
                          <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}}}},``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri</value>
          </argument>
        </attribute>
      </attributes>
      <file name="10247615-bc87-4598-aac6-a5d32d59a8d0" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Length1``1(``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length1</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ca8579a8-e1cf-18e3-3f4f-f543c0664801" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Length2``1(``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="69daaf33-87cd-7da4-68c6-d6fdd11f6b80" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Length3``1(``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e4c43b3a-4078-d145-40c8-e64622e11e9c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="3">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array3DModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[0:,0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d4f39cb4-8e82-1554-9f81-3079bc370699" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="MapIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                      <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                        <specialization>
                          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
                          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="3">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.Array3DModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}}}},``0[0:,0:,0:])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi</value>
          </argument>
        </attribute>
      </attributes>
      <file name="dab8ab10-bddc-5402-2871-e9759cab30af" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Set" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="3">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.Set``1(``0[0:,0:,0:],System.Int32,System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>set</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c52b24ed-f921-4f6e-32f3-155ec1be840f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="ZeroCreate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="3">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array3DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array3DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zeroCreate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f75c4e7f-5cd9-ad44-c74b-d22dbceb8d92" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.Array4DModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.Array4DModule" />
      <apidata name="Array4DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="9c2bb4bd-cc66-9612-92c9-0e5317a7a92b" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.Array4DModule">
      <topicdata name="Array4DModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.Array4DModule" />
      <apidata name="Array4DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}}})" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" />
      </containers>
      <file name="893629dd-4126-ce45-4190-35967af36095" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.Array4DModule">
      <topicdata name="Array4DModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.Array4DModule" />
      <apidata name="Array4DModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}}})" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" />
      </containers>
      <file name="ff9f17ad-fdaa-f516-ac8f-87d1b60901c6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length4">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initial">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="4">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Create``1(System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>create</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6e76e9bd-78cb-e8dc-aaf3-4042cc745cc4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index4">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Get``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>get</value>
          </argument>
        </attribute>
      </attributes>
      <file name="54b2a314-4891-70f6-9d45-d66ea021a717" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}}})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length4">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                      <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                        <specialization>
                          <type api="T:System.Int32" ref="false" />
                          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}}})" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="4">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Initialize``1(System.Int32,System.Int32,System.Int32,System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0}}}})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2b0b516f-77b8-b80b-2964-93bffc9013ce" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length1" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Length1``1(``0[0:,0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length1</value>
          </argument>
        </attribute>
      </attributes>
      <file name="30a41e9c-fd62-a22d-782f-211718b0cb68" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Length2``1(``0[0:,0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2c21474b-b3e9-a8df-3824-93e4e0b34088" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Length3``1(``0[0:,0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6c62f6e3-cfd6-1dbb-e6ed-ba7b85336157" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])">
      <topicdata group="api" />
      <apidata name="Length4" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Length4``1(``0[0:,0:,0:,0:])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length4</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7ef248f7-bc84-77c2-2847-21cbaec5bc87" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Set" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="4">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
          </arrayOf>
        </parameter>
        <parameter name="index1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="index4">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.Set``1(``0[0:,0:,0:,0:],System.Int32,System.Int32,System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>set</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d3480ea7-e691-2123-e46c-cc09fb6bcec9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="ZeroCreate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length1">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length2">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length3">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="length4">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="4">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.Array4DModule.ZeroCreate``1(System.Int32,System.Int32,System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.Array4DModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zeroCreate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b0b61540-f4e2-c2d7-ec24-1c302af238f8" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.ArrayModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.ArrayModule" />
      <apidata name="ArrayModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="e390780c-0fd0-d372-803e-a6b5a48cb06a" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.ArrayModule">
      <topicdata name="ArrayModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.ArrayModule" />
      <apidata name="ArrayModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" />
      </containers>
      <file name="f6ad16d2-e7b7-9d4f-a820-76e74250ddad" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.ArrayModule">
      <topicdata name="ArrayModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.ArrayModule" />
      <apidata name="ArrayModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
        <element api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" />
      </containers>
      <file name="3a8e015e-e758-895f-f6e6-7c03ada43e57" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Append``1(``0[],``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>append</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7e934745-8570-1663-02fa-2e69b3c61c87" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])">
      <topicdata group="api" />
      <apidata name="Average" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Average``1(``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>average</value>
          </argument>
        </attribute>
      </attributes>
      <file name="37e47b90-2540-04c8-07f8-ebb86adb48db" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="AverageBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>averageBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="534d4205-4929-311d-b239-a968317c9239" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
      <topicdata group="api" />
      <apidata name="Choose" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>choose</value>
          </argument>
        </attribute>
      </attributes>
      <file name="fd2eb256-4895-5a49-ce22-009fc7a33564" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])">
      <topicdata group="api" />
      <apidata name="Collect" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
              <arrayOf rank="1">
                <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
              </arrayOf>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1[]},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>collect</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6f62b1bc-335a-11fd-2de8-0d084a6daee7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})">
      <topicdata group="api" />
      <apidata name="Concat" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="arrays">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <arrayOf rank="1">
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})" />
              </arrayOf>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Concat``1(System.Collections.Generic.IEnumerable{``0[]})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>concat</value>
          </argument>
        </attribute>
      </attributes>
      <file name="47a0f38a-b147-c1a5-5c2a-749bec6ddcc6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])">
      <topicdata group="api" />
      <apidata name="Copy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Copy``1(``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>copy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cc727631-e460-4698-6530-5a7a12a079fd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="CopyTo" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="sourceIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="target">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.CopyTo``1(``0[],System.Int32,``0[],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="targetIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>blit</value>
          </argument>
        </attribute>
      </attributes>
      <file name="95a79e21-fdb7-e2f8-9fca-76da09c31c31" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Create" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Create``1(System.Int32,``0)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>create</value>
          </argument>
        </attribute>
      </attributes>
      <file name="dc0a5e4a-d871-058d-7ee2-2855b5a84be8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Empty``1" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.GeneralizableValueAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>empty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e92c6fb3-d65d-9ddc-ebf8-93fd0f702b64" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a3ae1058-ede9-e4f3-1cbc-26a3fdc54c4e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="Exists2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ff14a602-ffb6-795d-912e-ea12a2f3dfb8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Fill" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="target">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)" />
          </arrayOf>
        </parameter>
        <parameter name="targetIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fill``1(``0[],System.Int32,System.Int32,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fill</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c75c2249-c81b-8cb5-0831-d96ac16c711e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>filter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e035cea9-4baf-b43c-1d9d-8099304aa224" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>find</value>
          </argument>
        </attribute>
      </attributes>
      <file name="99fcb2a5-8c3b-e862-b7b0-0153edde4d06" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="FindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>findIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7c8b9db5-583c-b8e2-67aa-572477ce7a39" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])">
      <topicdata group="api" />
      <apidata name="Fold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6e90758b-8cf8-9753-525c-36c0dad8e14f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])">
      <topicdata group="api" />
      <apidata name="Fold2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,``0[],``1[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7f530739-1a7a-8037-5bf9-48934b33dcf4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)">
      <topicdata group="api" />
      <apidata name="FoldBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
          </arrayOf>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c106d12f-d26f-e7fe-2ad8-60e2593a05b8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)">
      <topicdata group="api" />
      <apidata name="FoldBack2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
          </arrayOf>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},``0[],``1[],``2)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f85a1484-4784-3983-99c5-7dd74be859d2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="ForAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9c1484a8-ee84-939c-32ec-c39358b4e7ba" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="ForAll2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="be7a7ece-918d-edd0-24ff-b2805b55649c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Get``1(``0[],System.Int32)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>get</value>
          </argument>
        </attribute>
      </attributes>
      <file name="81c9f260-f706-e5a2-541e-3dd5c871f473" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)">
      <topicdata group="api" />
      <apidata name="GetSubArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)" />
          </arrayOf>
        </parameter>
        <parameter name="startIndex">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.GetSubArray``1(``0[],System.Int32,System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sub</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4ad35a81-7312-2cc6-8591-337d19265068" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ae24cabc-26d4-4fce-78ad-7e06b366a419" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.IsEmpty``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isEmpty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7f123903-166b-0ee9-38d4-2fa6fce70471" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e9ba6a30-f57c-2948-60f4-34198aab774d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="Iterate2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d34d86e4-b39b-7e66-a026-f4bd3cd9ca08" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])">
      <topicdata group="api" />
      <apidata name="IterateIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri</value>
          </argument>
        </attribute>
      </attributes>
      <file name="227ff4d8-a514-ae44-8d42-4e58440c64bd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="IterateIndexed2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
                      <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="470fd77d-680c-6118-b327-6bf94584be91" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])">
      <topicdata group="api" />
      <apidata name="Length" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Length``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length</value>
          </argument>
        </attribute>
      </attributes>
      <file name="df40c76a-e2bd-02b8-f6bc-8cbf793ff16f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="493a3bc7-e699-b41a-9930-681130ded5c5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="Map2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
                  <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},``0[],``1[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="01c57219-8b5b-86d3-c1ff-71740e5fae8e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])">
      <topicdata group="api" />
      <apidata name="MapIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8dc0963b-01b2-9218-107c-a8dd02148b79" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])">
      <topicdata group="api" />
      <apidata name="MapIndexed2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
                      <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``0[],``1[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e0f50317-ca18-ba49-ec6d-e9d690f0f802" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])">
      <topicdata group="api" />
      <apidata name="Max" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Max``1(``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>max</value>
          </argument>
        </attribute>
      </attributes>
      <file name="90d622d6-1285-289e-b176-cbde0c2be6f7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="MaxBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>maxBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="48b5b494-4d43-e352-1756-60d49e6654a7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])">
      <topicdata group="api" />
      <apidata name="Min" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Min``1(``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>min</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6a8aa03c-484e-ca48-bc8c-17077cd61ead" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="MinBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>minBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cf5477f3-7839-38d9-c0ab-86a6af80ddc5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="OfList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="81c54c7e-0f81-cea1-082e-bfe67757d3cb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="OfSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="42c847cd-c889-fa12-adf5-63b1930d0623" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="Partition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
            </arrayOf>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>partition</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9e5d6447-faa6-04c9-50c0-b048de593064" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])">
      <topicdata group="api" />
      <apidata name="Permute" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="indexMap">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:System.Int32" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>permute</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d47391ef-a5de-2a70-7ec1-9938ab0d8644" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
      <topicdata group="api" />
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>pick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0545f783-c269-3931-1efe-1787d74eb07d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="reduction">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>reduce</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e7f52748-164e-9b60-0b8c-e7e86c7ee4dc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])">
      <topicdata group="api" />
      <apidata name="ReduceBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="reduction">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>reduceBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="91c9ae7b-ba71-e5ec-b42d-812bbeaeed01" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])">
      <topicdata group="api" />
      <apidata name="Reverse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Reverse``1(``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>rev</value>
          </argument>
        </attribute>
      </attributes>
      <file name="29a0a244-3fe5-9f98-c8e6-071fa23b1237" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])">
      <topicdata group="api" />
      <apidata name="Scan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>scan</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2f3b4b75-0c9f-f363-8e86-7f8751d094d3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)">
      <topicdata group="api" />
      <apidata name="ScanBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
          </arrayOf>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},``0[],``1)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>scanBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="35426b01-1eb7-b5b8-4ebd-0b33b48c88f7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Set" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)" />
          </arrayOf>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Set``1(``0[],System.Int32,``0)" />
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>set</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3db6dc13-0f14-0546-b171-751390a3f3c1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])">
      <topicdata group="api" />
      <apidata name="Sort" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Sort``1(``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sort</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6d6df039-6a47-2050-3ffb-cf92c344f005" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="SortBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="654e6c43-e20d-30d1-1ae9-f8c86912b81a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])">
      <topicdata group="api" />
      <apidata name="SortInPlace" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlace``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortInPlace</value>
          </argument>
        </attribute>
      </attributes>
      <file name="171ad6cb-6a87-c9ab-fdf7-a00b41716aff" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="SortInPlaceBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortInPlaceBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6ab7ee1c-c987-d176-8ba8-a05fce7b27b8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])">
      <topicdata group="api" />
      <apidata name="SortInPlaceWith" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortInPlaceWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortInPlaceWith</value>
          </argument>
        </attribute>
      </attributes>
      <file name="36991f62-6db7-3435-e169-314df64016f9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])">
      <topicdata group="api" />
      <apidata name="SortWith" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},``0[])" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortWith</value>
          </argument>
        </attribute>
      </attributes>
      <file name="79ce9f31-97da-a1f8-eac8-7dd669b4f02f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])">
      <topicdata group="api" />
      <apidata name="Sum" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Sum``1(``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sum</value>
          </argument>
        </attribute>
      </attributes>
      <file name="371340c9-ba5d-0675-0e30-73574c1b0215" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])">
      <topicdata group="api" />
      <apidata name="SumBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},``0[])" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sumBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="992f4988-2be3-0ffa-55bf-5a471d0f1e29" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])">
      <topicdata group="api" />
      <apidata name="ToList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ToList``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="603a8cae-22eb-887b-e909-f0a2ff3eb777" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])">
      <topicdata group="api" />
      <apidata name="ToSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ToSeq``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b2b36e2c-766e-1453-0fd5-aec6b443e996" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="TryFind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFind</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2793860a-1346-8a42-dfcd-503db1bb0433" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])">
      <topicdata group="api" />
      <apidata name="TryFindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFindIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e3c26777-4946-4314-d8de-54e70852adec" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])">
      <topicdata group="api" />
      <apidata name="TryPick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryPick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="efcabce1-b061-cf34-3885-5af6bd047274" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])">
      <topicdata group="api" />
      <apidata name="Unzip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <arrayOf rank="1">
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
            </arrayOf>
            <arrayOf rank="1">
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip``2(System.Tuple{``0,``1}[])" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unzip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f1232d0f-0cc9-0f69-2e82-1244e7d93432" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])">
      <topicdata group="api" />
      <apidata name="Unzip3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <type api="T:System.Tuple`3" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
                <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`3" ref="true">
          <specialization>
            <arrayOf rank="1">
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
            </arrayOf>
            <arrayOf rank="1">
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
            </arrayOf>
            <arrayOf rank="1">
              <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Unzip3``3(System.Tuple{``0,``1,``2}[])" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unzip3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b25d6342-5a80-8d72-afcb-b8602d902515" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)">
      <topicdata group="api" />
      <apidata name="ZeroCreate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.ZeroCreate``1(System.Int32)" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zeroCreate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c903c083-3dd4-3964-e70a-09640265fafe" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])">
      <topicdata group="api" />
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Tuple`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip``2(``0[],``1[])" />
            </specialization>
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="762a8e74-8809-2c5d-5ee9-d9a1c0931af2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])">
      <topicdata group="api" />
      <apidata name="Zip3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="array1">
          <arrayOf rank="1">
            <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
          </arrayOf>
        </parameter>
        <parameter name="array2">
          <arrayOf rank="1">
            <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
          </arrayOf>
        </parameter>
        <parameter name="array3">
          <arrayOf rank="1">
            <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Tuple`3" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
              <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ArrayModule.Zip3``3(``0[],``1[],``2[])" />
            </specialization>
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ArrayModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7d0e7835-7a80-ad39-6a52-c1ea258d1d9f" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.ComparisonIdentity">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.ComparisonIdentity" />
      <apidata name="ComparisonIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="fc8ecaea-a2e3-ae6d-2bf3-3efe0ccb2c0e" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.ComparisonIdentity">
      <topicdata name="ComparisonIdentity" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.ComparisonIdentity" />
      <apidata name="ComparisonIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})" />
        <element api="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ComparisonIdentity" />
      </containers>
      <file name="e884110d-5f60-4def-a1d2-df1026669958" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.ComparisonIdentity">
      <topicdata name="ComparisonIdentity" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.ComparisonIdentity" />
      <apidata name="ComparisonIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})" />
        <element api="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ComparisonIdentity" />
      </containers>
      <file name="7a31dc13-2a52-127d-d5b3-45bba00d70ba" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})">
      <topicdata group="api" />
      <apidata name="FromFunction" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ComparisonIdentity.FromFunction``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ComparisonIdentity" ref="true" />
      </containers>
      <file name="8bc6133b-0cb7-c40b-c8e6-369593818b3d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1">
      <topicdata group="api" />
      <apidata name="Structural" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ComparisonIdentity.Structural``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ComparisonIdentity" ref="true" />
      </containers>
      <file name="1f0f6781-76e7-0028-7c0a-06415b503ce9" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.FSharpList`1">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.FSharpList`1" />
      <apidata name="FSharpList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.IEquatable`1" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.IStructuralEquatable" ref="true" />
        <type api="T:System.IComparable`1" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.IComparable" ref="true" />
        <type api="T:System.Collections.IStructuralComparable" ref="true" />
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </specialization>
        </type>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.DefaultAugmentationAttribute" ref="true" />
          <argument>
            <type api="T:System.Boolean" ref="false" />
            <value>False</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.StructuralEqualityAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.StructuralComparisonAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompiledNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharpList`1</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="SumType" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="560f17ec-2023-ae5f-a937-b0e7e2e34f34" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.FSharpList`1">
      <topicdata name="FSharpList" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.FSharpList`1" />
      <apidata name="FSharpList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <arrayOf rank="1">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.Cons(`0,Microsoft.FSharp.Collections.FSharpList{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.get_Empty" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Head" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Item(System.Int32)" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Length" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Tail" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" />
      </containers>
      <file name="3eae161e-7e4a-3fb3-c689-7dc5506db9f1" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.FSharpList`1">
      <topicdata name="FSharpList" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.FSharpList`1" />
      <apidata name="FSharpList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <arrayOf rank="1">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.Cons(`0,Microsoft.FSharp.Collections.FSharpList{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.get_Empty" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpList`1.ToString" />
        <element api="M:System.Object.Equals(System.Object)" />
        <element api="M:System.Object.Finalize" />
        <element api="M:System.Object.GetHashCode" />
        <element api="M:System.Object.GetType" />
        <element api="M:System.Object.MemberwiseClone" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" />
      </containers>
      <file name="7599da03-bb7f-b0e9-4b64-f5b6b1d7c9ab" />
    </api>
    <api id="Properties.T:Microsoft.FSharp.Collections.FSharpList`1">
      <topicdata name="FSharpList" group="list" subgroup="Properties" typeTopicId="T:Microsoft.FSharp.Collections.FSharpList`1" />
      <apidata name="FSharpList" group="type" subgroup="class" />
      <typedata visibility="public" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Head" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Item(System.Int32)" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Length" />
        <element api="P:Microsoft.FSharp.Collections.FSharpList`1.Tail" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" />
      </containers>
      <file name="e36742d7-b389-2127-fe1a-40f6a6517b1f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpList`1.Cons(`0,Microsoft.FSharp.Collections.FSharpList{`0})">
      <topicdata group="api" />
      <apidata name="Cons" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="head">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
        </parameter>
        <parameter name="tail">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="UnionCase" />
            </enumValue>
          </argument>
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>1</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ca1fd804-f348-e6e2-5017-109a7c88e569" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpList`1.get_Empty">
      <topicdata group="api" />
      <apidata name="get_Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="UnionCase" />
            </enumValue>
          </argument>
          <argument>
            <type api="T:System.Int32" ref="false" />
            <value>0</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9b26ef6b-6d30-42cf-cc50-146719a8a038" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpList`1.Head">
      <topicdata group="api" />
      <apidata name="Head" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Head" />
      <returns>
        <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="71a1f781-1848-c55d-a26c-656d8f6e3f45" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpList`1.Item(System.Int32)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="3905dcee-172d-2d2c-d4c0-85021b170153" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpList`1.Length">
      <topicdata group="api" />
      <apidata name="Length" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Length" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="5395917b-57bf-3a5d-7d29-0fe151c9eafd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-Generic-IEnumerable`1-GetEnumerator" />
      <apidata name="System-Collections-Generic-IEnumerable`1-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="fbb95656-e811-1fa7-caad-cb2de23272c7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpList`1.System#Collections#IEnumerable#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-IEnumerable-GetEnumerator" />
      <apidata name="System-Collections-IEnumerable-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerable.GetEnumerator">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="6b3d7ff6-7f42-bcf1-53e9-4adf2fcc7d20" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpList`1.Tail">
      <topicdata group="api" />
      <apidata name="Tail" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Tail" />
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpList`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="48763615-f899-7b25-2129-7966cf25bcdd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpList`1.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="73e08df0-6e77-e85c-8665-f21714247e06" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.FSharpList`1.Tags">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
      <apidata name="Tags" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
      </containers>
      <file name="456f6cff-6372-2786-c66a-4b2130d03cd2" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.FSharpList`1.Tags">
      <topicdata name="Tags" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
      <apidata name="Tags" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Cons" />
        <element api="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Empty" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
      </containers>
      <file name="5e1fd7ad-c633-3365-4d24-c053e09054b6" />
    </api>
    <api id="Fields.T:Microsoft.FSharp.Collections.FSharpList`1.Tags">
      <topicdata name="Tags" group="list" subgroup="Fields" typeTopicId="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
      <apidata name="Tags" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Cons" />
        <element api="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Empty" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" />
      </containers>
      <file name="9f9c6491-d8d0-82f2-dd39-1897c9cde6b3" />
    </api>
    <api id="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Cons">
      <topicdata group="api" />
      <apidata name="Cons" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>1</value>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" ref="true">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
        </type>
      </containers>
      <file name="e47b1784-3b98-5550-081d-cf6635869fce" />
    </api>
    <api id="F:Microsoft.FSharp.Collections.FSharpList`1.Tags.Empty">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="field" />
      <memberdata visibility="public" static="true" />
      <fielddata literal="true" initonly="false" serialized="true" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <value>0</value>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1.Tags" ref="true">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true" />
        </type>
      </containers>
      <file name="1af3cc7c-27f3-737e-ad6c-40fd918eea05" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.FSharpMap`2">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.FSharpMap`2" />
      <apidata name="FSharpMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <implements>
        <type api="T:System.IComparable" ref="true" />
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
          </specialization>
        </type>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompiledNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharpMap`2</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.SealedAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="ObjectType" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="16ddd952-2b95-961a-efac-42395e756135" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.FSharpMap`2">
      <topicdata name="FSharpMap" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      <apidata name="FSharpMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Add(`0,`1)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.ContainsKey(`0)" />
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.Count" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Equals(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.GetHashCode" />
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.IsEmpty" />
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.Item(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(`0,`1@)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#IComparable#CompareTo(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.ToString" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.TryFind(`0)" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      </containers>
      <file name="74656091-c4d5-641e-4c8d-2788f04ee86b" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.FSharpMap`2">
      <topicdata name="FSharpMap" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      <apidata name="FSharpMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                      <specialization>
                        <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      </specialization>
                    </type>
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                        <specialization>
                          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                        </specialization>
                      </type>
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <arrayOf rank="1">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                  <specialization>
                    <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="value">
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                    <specialization>
                      <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                      <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                    </specialization>
                  </type>
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Add(`0,`1)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.ContainsKey(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Equals(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.GetHashCode" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(`0,`1@)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.System#IComparable#CompareTo(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.ToString" />
        <element api="M:Microsoft.FSharp.Collections.FSharpMap`2.TryFind(`0)" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      </containers>
      <file name="ab16cf8f-0c16-54ef-2078-7eff2a225e86" />
    </api>
    <api id="Properties.T:Microsoft.FSharp.Collections.FSharpMap`2">
      <topicdata name="FSharpMap" group="list" subgroup="Properties" typeTopicId="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      <apidata name="FSharpMap" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="TKey" />
        <template name="TValue" />
      </templates>
      <elements>
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.Count" />
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.IsEmpty" />
        <element api="P:Microsoft.FSharp.Collections.FSharpMap`2.Item(`0)" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      </containers>
      <file name="c50bc349-69fc-5a80-1ff1-9da372b7c664" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.#ctor(System.Collections.Generic.IEnumerable{System.Tuple{`0,`1}})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="elements">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="d4fdf204-f8eb-a3da-e1ac-ada2a8111943" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.Add(`0,`1)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
        <parameter name="value">
          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="9a3c44f4-9648-7798-587e-28a08188ea06" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.ContainsKey(`0)">
      <topicdata group="api" />
      <apidata name="ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="f9e825f8-b9a6-cc32-69c7-8c485c075aa4" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpMap`2.Count">
      <topicdata group="api" />
      <apidata name="Count" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Count" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="d20422ad-efed-831b-035d-0a6917ae2884" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="that">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="30ec19a5-f180-69e8-8fec-f0537edaac32" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="c621767c-d227-5ebd-5932-2e6c82f467b3" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpMap`2.IsEmpty">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="4788c1ac-575e-cba7-cafe-4493b798c919" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpMap`2.Item(`0)">
      <topicdata group="api" />
      <apidata name="Item" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Item" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="f813ec71-50fd-dbf7-2e10-75a46679adfb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.Remove(`0)">
      <topicdata group="api" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="666ad623-fd33-1ee5-d664-1d46ac7ca050" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Add(System.Collections.Generic.KeyValuePair{`0,`1})">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Add" />
      <apidata name="System-Collections-Generic-ICollection`1-Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Add(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="5eac4e38-9074-774f-1c66-72c28e03524c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Clear">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Clear" />
      <apidata name="System-Collections-Generic-ICollection`1-Clear" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Clear">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="85de8967-5974-4fa1-7aae-ca962f1297ce" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Contains(System.Collections.Generic.KeyValuePair{`0,`1})">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Contains" />
      <apidata name="System-Collections-Generic-ICollection`1-Contains" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="e2d20b79-db34-649e-5273-501a0d49c4a1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#CopyTo(System.Collections.Generic.KeyValuePair{`0,`1}[],System.Int32)">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-CopyTo" />
      <apidata name="System-Collections-Generic-ICollection`1-CopyTo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
        <parameter name="i">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="e42d23b5-8ec1-f07f-bac7-72e29fbc7f53" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#ICollection{System#Collections#Generic#KeyValuePair{TKey@TValue}}#Remove(System.Collections.Generic.KeyValuePair{`0,`1})">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Remove" />
      <apidata name="System-Collections-Generic-ICollection`1-Remove" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Remove(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="b35a2a00-54df-a328-dc91-f627b86d180c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Add(`0,`1)">
      <topicdata group="api" eiiName="IDictionary.System-Collections-Generic-IDictionary`2-Add" />
      <apidata name="System-Collections-Generic-IDictionary`2-Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
        <parameter name="v">
          <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.Add(`0,`1)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="c0fea33a-9a0c-0bd4-814d-8b0a2e3af911" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#ContainsKey(`0)">
      <topicdata group="api" eiiName="IDictionary.System-Collections-Generic-IDictionary`2-ContainsKey" />
      <apidata name="System-Collections-Generic-IDictionary`2-ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.ContainsKey(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="4a86ed55-c4da-cdbc-9ff1-c7fc53a98310" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#Remove(`0)">
      <topicdata group="api" eiiName="IDictionary.System-Collections-Generic-IDictionary`2-Remove" />
      <apidata name="System-Collections-Generic-IDictionary`2-Remove" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.Remove(`0)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="d824a392-0b74-724a-6336-1c307e7fcd6c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IDictionary{TKey@TValue}#TryGetValue(`0,`1@)">
      <topicdata group="api" eiiName="IDictionary.System-Collections-Generic-IDictionary`2-TryGetValue" />
      <apidata name="System-Collections-Generic-IDictionary`2-TryGetValue" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="k">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
        <parameter name="r">
          <referenceTo>
            <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
          </referenceTo>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IDictionary`2.TryGetValue(`0,`1@)">
          <type api="T:System.Collections.Generic.IDictionary`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="ef343c3f-dd1e-83f7-28d6-439f801a979e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#Generic#IEnumerable{System#Collections#Generic#KeyValuePair{TKey@TValue}}#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-Generic-IEnumerable`1-GetEnumerator" />
      <apidata name="System-Collections-Generic-IEnumerable`1-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
              <specialization>
                <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Collections.Generic.KeyValuePair`2" ref="false">
                <specialization>
                  <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                  <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
                </specialization>
              </type>
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="c59c2c24-76ad-1818-317d-98fd0a12efd4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#Collections#IEnumerable#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-IEnumerable-GetEnumerator" />
      <apidata name="System-Collections-IEnumerable-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerable.GetEnumerator">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="b15fcc15-4dea-d93e-182a-ea789f0f4d88" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.System#IComparable#CompareTo(System.Object)">
      <topicdata group="api" eiiName="IComparable.System-IComparable-CompareTo" />
      <apidata name="System-IComparable-CompareTo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="obj">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:System.IComparable.CompareTo(System.Object)">
          <type api="T:System.IComparable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="37a28a78-e501-01e2-9cc9-8967a56b4088" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="43c252d2-1fed-aa6c-80ab-1e4a0dffb0f7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpMap`2.TryFind(`0)">
      <topicdata group="api" />
      <apidata name="TryFind" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TValue" index="1" api="T:Microsoft.FSharp.Collections.FSharpMap`2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true" />
      </containers>
      <file name="61e088a1-27b2-09d4-8f9f-60c3dca757a1" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.FSharpSet`1">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.FSharpSet`1" />
      <apidata name="FSharpSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <templates>
        <template name="T" />
      </templates>
      <implements>
        <type api="T:System.Collections.IEnumerable" ref="true" />
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
        <type api="T:System.Collections.Generic.ICollection`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
        <type api="T:System.IComparable" ref="true" />
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.SealedAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompiledNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>FSharpSet`1</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="ObjectType" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="71f15a4e-b466-7b51-0f37-edb0e1672f22" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.FSharpSet`1">
      <topicdata name="FSharpSet" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      <apidata name="FSharpSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <arrayOf rank="1">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.Count" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Equals(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.GetHashCode" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Add(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Clear" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Contains(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#IComparable#CompareTo(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.ToString" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </containers>
      <file name="9842237c-db08-d6b0-6c40-6a142c24d144" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.FSharpSet`1">
      <topicdata name="FSharpSet" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      <apidata name="FSharpSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="OfType" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" source="extension">
          <apidata name="Cast" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="TResult" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="0" api="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable(System.Collections.IEnumerable)" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <returns>
            <type api="T:System.Linq.IQueryable" ref="true" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Queryable.AsQueryable``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="AsQueryable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Linq.IQueryable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Queryable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="Where" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" source="extension" overload="true">
          <apidata name="Select" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="1" api="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" source="extension" overload="true">
          <apidata name="SelectMany" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="collectionSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TCollection" index="1" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Take" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="TakeWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="Skip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="count">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" source="extension" overload="true">
          <apidata name="SkipWhile" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="Join" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" source="extension" overload="true">
          <apidata name="GroupJoin" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
          </templates>
          <parameters>
            <parameter name="inner">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="outerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="innerKeySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TInner" index="1" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="2" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" source="extension" overload="true">
          <apidata name="OrderByDescending" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.IOrderedEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <type api="T:System.Linq.IGrouping`2" ref="true">
                  <specialization>
                    <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                    <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                    </specialization>
                  </type>
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="GroupBy" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                  <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                    <specialization>
                      <template name="TElement" index="2" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                    </specialization>
                  </type>
                  <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="3" api="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Concat" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" source="extension">
          <apidata name="Zip" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TSecond" index="1" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="TResult" index="2" api="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Distinct" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Union" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Intersect" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Except" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="Reverse" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="SequenceEqual" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="second">
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="AsEnumerable" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToArray" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <arrayOf rank="1">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </arrayOf>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" source="extension">
          <apidata name="ToList" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.List`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToDictionary" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.Dictionary`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" source="extension" overload="true">
          <apidata name="ToLookup" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
            <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
          </templates>
          <parameters>
            <parameter name="keySelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="elementSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Linq.ILookup`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
                <template name="TElement" index="2" api="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="DefaultIfEmpty" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="defaultValue">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
              <specialization>
                <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="First" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="FirstOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Last" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LastOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Single" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="SingleOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAt" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" source="extension">
          <apidata name="ElementAtOrDefault" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="index">
              <type api="T:System.Int32" ref="false" />
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Any" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension">
          <apidata name="All" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="Count" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" source="extension" overload="true">
          <apidata name="LongCount" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="predicate">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" source="extension" overload="true">
          <apidata name="Contains" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="value">
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </parameter>
            <parameter name="comparer">
              <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Boolean" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" source="extension" overload="true">
          <apidata name="Aggregate" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </templates>
          <parameters>
            <parameter name="seed">
              <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
            </parameter>
            <parameter name="func">
              <type api="T:System.Func`3" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
            <parameter name="resultSelector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="TAccumulate" index="1" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                  <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="2" api="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Sum" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Min" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <returns>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int32" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Int64" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Int64" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" source="extension" overload="true">
          <apidata name="Max" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <template name="TResult" index="1" api="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Decimal" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Decimal" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Decimal" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Decimal" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Double" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Double" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int32" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Int64" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Double" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Int64" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Double" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Single" ref="false" />
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Single" ref="false" />
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" source="extension" overload="true">
          <apidata name="Average" group="member" subgroup="method" subsubgroup="extension" />
          <memberdata visibility="public" />
          <proceduredata virtual="false" />
          <templates>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </templates>
          <parameters>
            <parameter name="selector">
              <type api="T:System.Func`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
                  <type api="T:System.Nullable`1" ref="false">
                    <specialization>
                      <type api="T:System.Single" ref="false" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </parameter>
          </parameters>
          <returns>
            <type api="T:System.Nullable`1" ref="false">
              <specialization>
                <type api="T:System.Single" ref="false" />
              </specialization>
            </type>
          </returns>
          <containers>
            <library assembly="System.Core" module="System.Core" kind="DynamicallyLinkedLibrary" />
            <namespace api="N:System.Linq" />
            <type api="T:System.Linq.Enumerable" ref="true" />
          </containers>
        </element>
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Equals(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.GetHashCode" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Add(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Clear" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Contains(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#IEnumerable#GetEnumerator" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.System#IComparable#CompareTo(System.Object)" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.ToString" />
        <element api="M:System.Object.GetType" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </containers>
      <file name="01c7ea76-d0fe-367e-1d76-b13ebec5d782" />
    </api>
    <api id="Operators.T:Microsoft.FSharp.Collections.FSharpSet`1">
      <topicdata name="FSharpSet" group="list" subgroup="Operators" subsubgroup="Operators" typeTopicId="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      <apidata name="FSharpSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
        <element api="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </containers>
      <file name="8539fa42-4880-2913-cb86-2d0d380e1472" />
    </api>
    <api id="Properties.T:Microsoft.FSharp.Collections.FSharpSet`1">
      <topicdata name="FSharpSet" group="list" subgroup="Properties" typeTopicId="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      <apidata name="FSharpSet" group="type" subgroup="class" />
      <typedata visibility="public" sealed="true" serializable="false" />
      <templates>
        <template name="T" />
      </templates>
      <elements>
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.Count" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement" />
        <element api="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </containers>
      <file name="14f9417a-3e99-5b14-1593-c7a3b566558f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.#ctor(System.Collections.Generic.IEnumerable{`0})">
      <topicdata group="api" />
      <apidata name=".ctor" group="member" subgroup="constructor" />
      <memberdata visibility="public" special="true" />
      <parameters>
        <parameter name="elements">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="93c09f4c-eb93-b222-3ca1-e2ae0d06e4a5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.Add(`0)">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="9da1d436-83f9-1f82-89e9-5f223816f4cf" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.Contains(`0)">
      <topicdata group="api" />
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="63b3fc84-feba-48c6-f73c-28361e199ead" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpSet`1.Count">
      <topicdata group="api" />
      <apidata name="Count" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_Count" />
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="a0881589-92a7-ed0f-4f47-38bbb8b76aa6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.Equals(System.Object)">
      <topicdata group="api" />
      <apidata name="Equals" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.Equals(System.Object)">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <parameters>
        <parameter name="that">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="a9b32947-695f-8104-e7bb-8b6db9bd7293" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.GetHashCode">
      <topicdata group="api" />
      <apidata name="GetHashCode" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.GetHashCode">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="fc8723fc-cd87-8ae2-ecde-a86236768e88" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpSet`1.IsEmpty">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_IsEmpty" />
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="17132d65-bc9a-92d6-510d-dade0fe58791" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="IsProperSubsetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSet">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="e0ce09f2-5668-82a7-f193-372b0f406a6f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.IsProperSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="IsProperSupersetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSet">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="fe3d937d-e2eb-d8cc-743f-07f05863e240" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSubsetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="IsSubsetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSet">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="cb33ba7c-e8cb-3b89-1c19-b81bf88c3f97" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.IsSupersetOf(Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="IsSupersetOf" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="otherSet">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="4467d89f-136f-553f-e0e1-c092322fd676" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpSet`1.MaximumElement">
      <topicdata group="api" />
      <apidata name="MaximumElement" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MaximumElement" />
      <returns>
        <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="62fa589d-1a11-9942-fc28-790ea9760f62" />
    </api>
    <api id="P:Microsoft.FSharp.Collections.FSharpSet`1.MinimumElement">
      <topicdata group="api" />
      <apidata name="MinimumElement" group="member" subgroup="property" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <propertydata get="true" />
      <getter name="get_MinimumElement" />
      <returns>
        <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="6dd18751-6eeb-cd3d-af41-8c33979281f0" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Addition(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="Addition" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="ef6f20c5-5778-e048-15ba-2c4823ea09cc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.op_Subtraction(Microsoft.FSharp.Collections.FSharpSet{`0},Microsoft.FSharp.Collections.FSharpSet{`0})">
      <topicdata group="api" />
      <apidata name="Subtraction" group="member" subgroup="method" subsubgroup="operator" />
      <memberdata visibility="public" static="true" special="true" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="568ff2fd-78ce-30df-2ac7-0eb50b35a919" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.Remove(`0)">
      <topicdata group="api" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="false" />
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="06f8c380-854a-794f-a9e8-961bce0152d2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Add(`0)">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Add" />
      <apidata name="System-Collections-Generic-ICollection`1-Add" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Add(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="e9ab7554-54b6-31f9-3051-d3c1ecae25d7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Clear">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Clear" />
      <apidata name="System-Collections-Generic-ICollection`1-Clear" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Clear">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="b69c02fb-ed75-ec54-da47-d63fad3f888c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Contains(`0)">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Contains" />
      <apidata name="System-Collections-Generic-ICollection`1-Contains" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Contains(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="ff2e1d38-9739-8994-7594-f16cf0b10057" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#CopyTo(`0[],System.Int32)">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-CopyTo" />
      <apidata name="System-Collections-Generic-ICollection`1-CopyTo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="arr">
          <arrayOf rank="1">
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </arrayOf>
        </parameter>
        <parameter name="i">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.CopyTo(`0[],System.Int32)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="42fc9678-6b22-c8a2-38e0-ab032e7a41c9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#ICollection{T}#Remove(`0)">
      <topicdata group="api" eiiName="ICollection.System-Collections-Generic-ICollection`1-Remove" />
      <apidata name="System-Collections-Generic-ICollection`1-Remove" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="x">
          <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.ICollection`1.Remove(`0)">
          <type api="T:System.Collections.Generic.ICollection`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="afd6043e-6077-20ea-0b5f-de9831a18303" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#Generic#IEnumerable{T}#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-Generic-IEnumerable`1-GetEnumerator" />
      <apidata name="System-Collections-Generic-IEnumerable`1-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.Generic.IEnumerator`1" ref="true">
          <specialization>
            <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
          </specialization>
        </type>
      </returns>
      <implements>
        <member api="M:System.Collections.Generic.IEnumerable`1.GetEnumerator">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="T:Microsoft.FSharp.Collections.FSharpSet`1" />
            </specialization>
          </type>
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="b0451f40-d70b-a63c-09ba-93c1c4305650" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#Collections#IEnumerable#GetEnumerator">
      <topicdata group="api" eiiName="IEnumerable.System-Collections-IEnumerable-GetEnumerator" />
      <apidata name="System-Collections-IEnumerable-GetEnumerator" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <returns>
        <type api="T:System.Collections.IEnumerator" ref="true" />
      </returns>
      <implements>
        <member api="M:System.Collections.IEnumerable.GetEnumerator">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="1292f8c0-4bef-79d9-c7ec-f09ea3f40d66" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.System#IComparable#CompareTo(System.Object)">
      <topicdata group="api" eiiName="IComparable.System-IComparable-CompareTo" />
      <apidata name="System-IComparable-CompareTo" group="member" subgroup="method" />
      <memberdata visibility="private" />
      <proceduredata virtual="true" eii="true" />
      <parameters>
        <parameter name="that">
          <type api="T:System.Object" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <implements>
        <member api="M:System.IComparable.CompareTo(System.Object)">
          <type api="T:System.IComparable" ref="true" />
        </member>
      </implements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="3b6017c1-94ba-b1ad-6073-6e3ca9811137" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.FSharpSet`1.ToString">
      <topicdata group="api" />
      <apidata name="ToString" group="member" subgroup="method" />
      <memberdata visibility="public" />
      <proceduredata virtual="true" />
      <overrides>
        <member api="M:System.Object.ToString">
          <type api="T:System.Object" ref="true" />
        </member>
      </overrides>
      <returns>
        <type api="T:System.String" ref="true" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true" />
      </containers>
      <file name="a3adb5bc-d14e-6ae6-db8c-0b28e4cabc93" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.HashIdentity">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.HashIdentity" />
      <apidata name="HashIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="6efded30-0fea-296c-adb3-4fdb65573c6c" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.HashIdentity">
      <topicdata name="HashIdentity" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.HashIdentity" />
      <apidata name="HashIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.LimitedStructural``1(System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" />
      </containers>
      <file name="1e9b5169-6d5b-2f66-829c-00b1a14ca802" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.HashIdentity">
      <topicdata name="HashIdentity" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.HashIdentity" />
      <apidata name="HashIdentity" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.LimitedStructural``1(System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1" />
        <element api="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" />
      </containers>
      <file name="c8b835d0-4e1f-13e6-3d7c-b8fcd512f968" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})">
      <topicdata group="api" />
      <apidata name="FromFunctions" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="hasher">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
              <type api="T:System.Int32" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="equality">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.FromFunctions``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32},Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e0e9334e-e6a9-9349-7e7c-c83098f95f87" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.HashIdentity.LimitedStructural``1(System.Int32)">
      <topicdata group="api" />
      <apidata name="LimitedStructural" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="limit">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.LimitedStructural``1(System.Int32)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" ref="true" />
      </containers>
      <file name="7fcb0037-c728-3cc6-74d2-7c4cef025601" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1">
      <topicdata group="api" />
      <apidata name="Reference" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T">
          <constrained ref="true" />
        </template>
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.Reference``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" ref="true" />
      </containers>
      <file name="c529d734-c266-f31b-1c63-7f995572e90a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1">
      <topicdata group="api" />
      <apidata name="Structural" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEqualityComparer`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.HashIdentity.Structural``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.HashIdentity" ref="true" />
      </containers>
      <file name="80845094-e35d-44cc-a43f-55eb42b95795" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.ListModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.ListModule" />
      <apidata name="ListModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="d0b2531d-e1d7-87e7-c5e3-fac61f42ecc8" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.ListModule">
      <topicdata name="ListModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.ListModule" />
      <apidata name="ListModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" />
      </containers>
      <file name="8e962d5e-b404-cce4-0a38-ff9393629bb7" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.ListModule">
      <topicdata name="ListModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.ListModule" />
      <apidata name="ListModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        <element api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" />
      </containers>
      <file name="6b12b51e-d140-53f8-cbf9-de7ab7298994" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Append``1(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>append</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f30937d8-1e94-1cf8-6708-a8c8845b2735" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Average" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Average``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>average</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0b2f5212-c9cf-f69c-b756-04d2fe19e482" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="AverageBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>averageBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="26579026-4c78-b14f-9947-749252fd4a21" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Choose" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>choose</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c6bb8b26-0863-79c7-dec1-95898e364070" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Collect" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Collect``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>collect</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a7df7551-852d-3af5-a965-fd5835cb7f84" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})">
      <topicdata group="api" />
      <apidata name="Concat" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="lists">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Concat``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpList{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>concat</value>
          </argument>
        </attribute>
      </attributes>
      <file name="996c37f3-4e5c-04f8-ca37-f44e334bb1e4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Empty``1">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.GeneralizableValueAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>empty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3f747eb5-fd0d-93e9-691c-c3895433a223" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ef004ae8-2bfa-60dd-9751-d5d14e1bf3dd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="Exists2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="080f159f-3ee2-cdca-8d7a-40b1607fd82d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>filter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="76743d9a-722f-4fb4-fe0f-09962640e77b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>find</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c7ea8846-51c1-199c-8ff4-db538b570cc5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="FindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>findIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="622068ff-5ddf-ea0b-6b40-7654d1228852" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Fold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a28d27c7-d5bb-6b0a-51b9-3d47403a4b86" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="Fold2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Fold2``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f52b646b-a29d-62ed-d36a-f6e8303bcdf9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
      <topicdata group="api" />
      <apidata name="FoldBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="03ad1b6e-aa04-3e30-9291-bc0aea2708fc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)">
      <topicdata group="api" />
      <apidata name="FoldBack2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.ListModule.FoldBack2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},``2)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b24b2342-70b3-e5d4-f1d0-13be44bc0800" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="ForAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c4b0c1a9-3c39-e917-1c37-845856ee6871" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="ForAll2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0933f2db-fbbf-6bc8-e79e-77e6310de622" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Get``1(Microsoft.FSharp.Collections.FSharpList{``0},System.Int32)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>nth</value>
          </argument>
        </attribute>
      </attributes>
      <file name="689dcb11-40a3-f583-ef21-5bfecff4c125" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Head" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Head``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>head</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9d357a27-acdd-f46a-732a-c6eda019b331" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="length">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e661d361-14cb-2c3e-1ad6-f1bdeb55aea0" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isEmpty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="90b8ae92-bb8b-6dfb-12bc-58cd70de61d3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="06db5a78-6ef7-09bf-e6a1-78bb6276844c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="Iterate2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ab8d15ac-5a74-b0a3-e162-f2473e04c4a2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="IterateIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9dbb12a0-c64f-c9c1-c577-1eefc3c55b78" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="IterateIndexed2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                      <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.IterateIndexed2``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b81e981f-5ad4-0856-88f1-56d463316351" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Length" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Length``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length</value>
          </argument>
        </attribute>
      </attributes>
      <file name="325a1fad-7466-a277-9a12-0f1801410930" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0ae1aec1-e6b6-dd35-cf7a-a219d47e6bbc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="Map2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="59ba8521-4a52-201c-7a69-aed07deecd7f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
      <topicdata group="api" />
      <apidata name="Map3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
                      <template name="TResult" index="3" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list3">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="3" api="M:Microsoft.FSharp.Collections.ListModule.Map3``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0eed2141-d3f2-bf9f-3221-95d0341463d9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="MapIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi</value>
          </argument>
        </attribute>
      </attributes>
      <file name="81c26cd2-a6d1-f720-9bf3-7bcf731235e3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="MapIndexed2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                      <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.ListModule.MapIndexed2``3(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8f445b27-c112-ba54-5b7d-f2f1670bd553" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Max" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Max``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>max</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e25aa16a-bf44-b019-7fe3-27f00ba356f4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="MaxBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>maxBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6751619e-2603-fe78-cc26-ce5b9cab2873" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Min" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Min``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>min</value>
          </argument>
        </attribute>
      </attributes>
      <file name="86d47cf3-be2d-9f49-7d12-5cfdc3e29692" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="MinBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>minBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4461c0eb-cbcd-907d-5ed6-f81b89783456" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])">
      <topicdata group="api" />
      <apidata name="OfArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.OfArray``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8db84efc-3cc7-3111-e7df-8fe0c4f5cc61" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="OfSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="5fbbaecc-75da-66e2-978e-9ef5af497012" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Partition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>partition</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ea5c06a8-ac65-b923-bb77-7e957a2f8516" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Permute" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="indexMap">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:System.Int32" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Permute``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,System.Int32},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>permute</value>
          </argument>
        </attribute>
      </attributes>
      <file name="752caf10-9df1-fad7-2c42-5a3b640a8b6a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>pick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3aebaabf-4098-61fa-19df-a99eda8629c9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="reduction">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>reduce</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a2504522-5dbf-c8c1-642f-7696e95ffd40" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="ReduceBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="reduction">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ReduceBack``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>reduceBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="159f5d7d-de36-952b-4e1a-6af8d4809a3e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)">
      <topicdata group="api" />
      <apidata name="Replicate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initial">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Replicate``1(System.Int32,``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>replicate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f1be018a-310f-ebd6-6254-c716e97e0118" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Reverse" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Reverse``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>rev</value>
          </argument>
        </attribute>
      </attributes>
      <file name="997de572-40e7-ca76-09f3-aa4459ce3d9e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Scan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>scan</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f8beaaf1-f691-c447-96e6-4a07734dd147" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)">
      <topicdata group="api" />
      <apidata name="ScanBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.ListModule.ScanBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpList{``0},``1)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>scanBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="00a30ff8-3715-0adc-4dac-2c246a3e4871" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Sort" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Sort``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sort</value>
          </argument>
        </attribute>
      </attributes>
      <file name="50845cc2-4301-8fac-b5a0-170b5ed2c06e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="SortBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c397a8a0-6a59-8ff6-ca2f-a50822af7552" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="SortWith" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SortWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortWith</value>
          </argument>
        </attribute>
      </attributes>
      <file name="71da0137-bebf-6b05-cc51-8e9a52b7905e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Sum" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Sum``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sum</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b8943dfb-5d64-8d83-aa54-aed34bc58c3f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="SumBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpList{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sumBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e43b4e8f-ea69-3894-45ff-55eea64d946f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="Tail" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Tail``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tail</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e8ad14ff-280c-73b0-9f58-46c3358235fc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="ToArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ToArray``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6bc66d75-bb3e-1e16-eb30-89adc3426c4e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="ToSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="caed9795-daf9-b1ee-58ff-bfb9bc3a40e2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="TryFind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFind</value>
          </argument>
        </attribute>
      </attributes>
      <file name="11b5dc48-fc35-ad40-bf84-b15e6b837634" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="TryFindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFindIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8ddf62a5-9e95-a9f4-0986-126eb6387b89" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="TryPick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.ListModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryPick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4e074f82-6b66-d109-e685-e9fe88bc8712" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
      <topicdata group="api" />
      <apidata name="Unzip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Unzip``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unzip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="85a992f9-faf5-d36f-9be2-4a5eb1ed4c6a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})">
      <topicdata group="api" />
      <apidata name="Unzip3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="list">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`3" ref="true">
                <specialization>
                  <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
                  <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`3" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
              <specialization>
                <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Unzip3``3(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1,``2}})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unzip3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="35ee5a16-9c84-e1c2-01ec-00ebef7a880f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})">
      <topicdata group="api" />
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Zip``2(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6c0e3d2e-7a93-3739-ae61-e23c9fd74133" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})">
      <topicdata group="api" />
      <apidata name="Zip3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="list1">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list2">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="list3">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`3" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
                <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.ListModule.Zip3``3(Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Collections.FSharpList{``1},Microsoft.FSharp.Collections.FSharpList{``2})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.ListModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="bd00c271-ed82-ed6a-e9b0-42318c154eac" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.MapModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.MapModule" />
      <apidata name="MapModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="d71ebe6c-ad1a-2ae7-440c-ee7d23ce023f" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.MapModule">
      <topicdata name="MapModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.MapModule" />
      <apidata name="MapModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Empty``2" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" />
      </containers>
      <file name="54680e71-cb73-f09a-af4f-3aa1f13768b7" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.MapModule">
      <topicdata name="MapModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.MapModule" />
      <apidata name="MapModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Empty``2" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        <element api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" />
      </containers>
      <file name="32e8ad19-a1da-9727-ebce-0825337797f8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="value">
          <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Add``2(``0,``1,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>add</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8c7fef59-9191-386a-d9d7-8b2c68a28ce9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="ContainsKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ContainsKey``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>containsKey</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1378b168-acba-a228-6818-fa3d2af55007" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Empty``2">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Empty``2" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Empty``2" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.GeneralizableValueAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>empty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0506d84a-1eb2-96db-23c1-bd72b56deced" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Exists``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9395ed6c-26b2-59ac-8fe0-17597a2b7dcb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Filter``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>filter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="19a914fa-9b3d-469b-7028-88c32d479b33" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Find``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>find</value>
          </argument>
        </attribute>
      </attributes>
      <file name="84fbca61-a129-125d-d364-51f1b3cb8f99" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="FindKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.FindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>findKey</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b7aa226f-b5ce-9bed-a1a1-3e78c62d5ec7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Fold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Fold``3(Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}}},``2,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="81f7aee5-7561-9722-c70f-19c48ac77ce7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)">
      <topicdata group="api" />
      <apidata name="FoldBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
                  <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                    <specialization>
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
                      <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="2" api="M:Microsoft.FSharp.Collections.MapModule.FoldBack``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1},``2)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="8d3854fd-6d82-bedc-077f-58befed7b9cb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="ForAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ForAll``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9eaf156a-9f86-d1d1-3030-ca2d4b63d423" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.IsEmpty``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isEmpty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c3f00b7b-7233-6524-0638-c0e4d777d2c3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Iterate``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7957a282-6c54-aadd-1818-471e854cbc54" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Map``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="062ab262-5e69-0884-904a-3f9264c36b56" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])">
      <topicdata group="api" />
      <apidata name="OfArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="elements">
          <arrayOf rank="1">
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
                <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
              </specialization>
            </type>
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfArray``2(System.Tuple{``0,``1}[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="99e1df6f-44a6-84b1-6ef4-ca39a400978e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})">
      <topicdata group="api" />
      <apidata name="OfList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="elements">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfList``2(Microsoft.FSharp.Collections.FSharpList{System.Tuple{``0,``1}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a7aeefac-0ae2-47e8-4c6f-777b01f67933" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})">
      <topicdata group="api" />
      <apidata name="OfSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="elements">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:System.Tuple`2" ref="true">
                <specialization>
                  <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.OfSeq``2(System.Collections.Generic.IEnumerable{System.Tuple{``0,``1}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="37b7c052-68ff-6ded-41a6-a597b795cc1d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Partition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
              <specialization>
                <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
              <specialization>
                <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Partition``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>partition</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ac67e430-0322-733a-4012-e599f4dce037" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                    <specialization>
                      <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.Pick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>pick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="79f6f55e-05c8-a3a3-e2be-2a1734310f6b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.Remove``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>remove</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a1a0deb1-a82d-ff88-a971-6c3824954020" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="ToArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <type api="T:System.Tuple`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToArray``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7a8a3746-45ea-21f9-12e1-55574822f9eb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="ToList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToList``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4d6cb381-d581-5b4a-f189-fd13aad87b47" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="ToSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.ToSeq``2(Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="fa042568-0962-a593-1254-0f0da2d816fb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="TryFind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="key">
          <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryFind``2(``0,Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFind</value>
          </argument>
        </attribute>
      </attributes>
      <file name="87c0c9c0-3c3d-6e6a-4f0a-6bd857db861a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="TryFindKey" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryFindKey``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFindKey</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c517c1a9-68fc-3e87-0e3b-be8be0885eb2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})">
      <topicdata group="api" />
      <apidata name="TryPick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TKey" />
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                  <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                    <specialization>
                      <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="table">
          <type api="T:Microsoft.FSharp.Collections.FSharpMap`2" ref="true">
            <specialization>
              <template name="TKey" index="0" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
              <template name="T" index="1" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.MapModule.TryPick``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpOption{``2}}},Microsoft.FSharp.Collections.FSharpMap{``0,``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.MapModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryPick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="68b2b98a-f714-0590-d779-41ac6ccd4b25" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.SeqModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.SeqModule" />
      <apidata name="SeqModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="fb0560c6-4cb4-0801-95a9-caa851dc12ad" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.SeqModule">
      <topicdata name="SeqModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.SeqModule" />
      <apidata name="SeqModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" />
      </containers>
      <file name="3676de89-8cf4-4660-168d-67762719ca4c" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.SeqModule">
      <topicdata name="SeqModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.SeqModule" />
      <apidata name="SeqModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
        <element api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" />
      </containers>
      <file name="9c4a838f-1715-6ea2-6e5e-0bdb13e3f9f7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Append" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Append``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>append</value>
          </argument>
        </attribute>
      </attributes>
      <file name="758b5294-4e2d-6a0a-8fa3-ffeb5557119a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Average" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Average``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>average</value>
          </argument>
        </attribute>
      </attributes>
      <file name="db8e2b46-9fad-3992-ca71-dadd8a15beb6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="AverageBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.AverageBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>averageBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cbe26f9a-045b-2c06-6f95-876de45484e6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Cache" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Cache``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>cache</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7e3d5f6e-c96e-3535-61f9-d2c992ba257f" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)">
      <topicdata group="api" />
      <apidata name="Cast" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.IEnumerable" ref="true" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Cast``1(System.Collections.IEnumerable)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>cast</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e658df6e-468a-40ff-51b5-e89e3d5e23a8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Choose" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Choose``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>choose</value>
          </argument>
        </attribute>
      </attributes>
      <file name="62213632-4cd0-3be2-d3a9-50feeef5ab91" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Collect" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TCollection">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TCollection" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Collect``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>collect</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2a3f7deb-2bd0-aaff-dc41-11bd2472181b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="CompareWith" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="comparer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
                  <type api="T:System.Int32" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CompareWith``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,System.Int32}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>compareWith</value>
          </argument>
        </attribute>
      </attributes>
      <file name="a7a2ba1c-4900-52d6-354e-59d151a66b5d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Concat" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TCollection">
          <constrained>
            <type api="T:System.Object" ref="true" />
            <implements>
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </implements>
          </constrained>
        </template>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="sources">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="TCollection" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Concat``2(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>concat</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0d54aefc-936e-4c4c-da98-5e1caa4ab7d1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="CountBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.CountBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
                <type api="T:System.Int32" ref="false" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>countBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="36a3fd42-2d9d-8dd3-a083-b0e9234968b3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})">
      <topicdata group="api" />
      <apidata name="Delay" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="generator">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
              <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Delay``1(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Core.Unit,System.Collections.Generic.IEnumerable{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>delay</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ee04a445-abd0-c6f6-82d7-9bb29fc51738" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Distinct" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>distinct</value>
          </argument>
        </attribute>
      </attributes>
      <file name="256f28f5-7ca6-93f7-82f5-7f4a9f428141" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="DistinctBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.DistinctBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>distinctBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="b02e491e-9513-0b78-a81a-a539c6de9e0e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Empty``1">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.GeneralizableValueAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>empty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ec843a6e-bab1-d407-c96f-54826bd12900" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="ExactlyOne" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ExactlyOne``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exactlyOne</value>
          </argument>
        </attribute>
      </attributes>
      <file name="fa827467-80ca-c035-91e8-97c25c7dd889" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists</value>
          </argument>
        </attribute>
      </attributes>
      <file name="163f56c4-b8ba-c1f3-f1d0-84582ae90768" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <topicdata group="api" />
      <apidata name="Exists2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Exists2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="37e9c7e4-c25e-b341-85c7-9403ef4490b6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>filter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="25ded24c-37a1-e146-8796-d4eedbb6423e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Find" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Find``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>find</value>
          </argument>
        </attribute>
      </attributes>
      <file name="aed520f8-73bf-edcb-2d12-9ba3dd686aa4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="FindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.FindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>findIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="bb1476ee-a97f-d1cc-f475-80bc40644132" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Fold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="dc6267d5-53a3-720f-9252-778a17ccd691" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="ForAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall</value>
          </argument>
        </attribute>
      </attributes>
      <file name="494eb9d1-29da-d14c-606c-0746aa9754a5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <topicdata group="api" />
      <apidata name="ForAll2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                  <type api="T:System.Boolean" ref="false" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.ForAll2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,System.Boolean}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3baf222d-d41d-1b3c-627e-9ba205b6302b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Get" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="index">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Get``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>nth</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7066f735-691b-9ced-6fc8-0bee4d6a03d7" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="GroupBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
                <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
                  <specialization>
                    <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.GroupBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
                  </specialization>
                </type>
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>groupBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cada3ee5-3cc2-f4d3-1f3e-60a248336d2b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Head" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Head``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>head</value>
          </argument>
        </attribute>
      </attributes>
      <file name="eed8f3aa-8913-b3e6-bbe5-f5111bdec1fd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})">
      <topicdata group="api" />
      <apidata name="Initialize" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Initialize``1(System.Int32,Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>init</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e2e1ab7f-49bc-b85d-2554-5a15a76aae35" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})">
      <topicdata group="api" />
      <apidata name="InitializeInfinite" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="initializer">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.InitializeInfinite``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>initInfinite</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ff6652ce-364b-7f26-d997-70673b42882e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.IsEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isEmpty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3586424e-40c5-1974-7915-fa1018adbca6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c478863d-e41b-ccec-d85a-f4a6ee961d04" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <topicdata group="api" />
      <apidata name="Iterate2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Iterate2``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7d9816f3-924b-727c-e4fe-bc540d797f7c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="IterateIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})" />
                  <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.IterateIndexed``1(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iteri</value>
          </argument>
        </attribute>
      </attributes>
      <file name="97df31b0-ba52-535f-5a5f-95164ebee03b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Last" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>last</value>
          </argument>
        </attribute>
      </attributes>
      <file name="37cf7ee3-9e79-0fa9-ca5e-9b88d8db9f4c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Length" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Length``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>length</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1d459cf7-f1a7-c52e-4fd3-04486cfa936e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="47c66775-f443-fc9d-7e3f-b8db93f6eb6e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <topicdata group="api" />
      <apidata name="Map2" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                  <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TResult" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Map2``3(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map2</value>
          </argument>
        </attribute>
      </attributes>
      <file name="992476f1-735a-b921-8790-7be5c340dca4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="MapIndexed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <type api="T:System.Int32" ref="false" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.MapIndexed``2(Microsoft.FSharp.Core.FSharpFunc{System.Int32,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>mapi</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f15f8b46-4d98-62bc-ee0d-77ff970c6118" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Max" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>max</value>
          </argument>
        </attribute>
      </attributes>
      <file name="02f77621-7edc-2398-5b61-a761f2f21ded" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="MaxBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MaxBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>maxBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="15dbf0c4-0775-8e96-b649-08d98644d0c9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Min" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>min</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d2c9be8a-9dac-7ac7-fd32-168c9b017aef" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="MinBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.MinBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>minBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ff3bc837-529e-1a4a-6845-795b50482306" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])">
      <topicdata group="api" />
      <apidata name="OfArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.OfArray``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d03f74f6-87f5-973a-e934-7516ce6ac81d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="OfList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="60f2c700-e50c-6962-f436-ea3f274f6569" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Pairwise" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})" />
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Pairwise``1(System.Collections.Generic.IEnumerable{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>pairwise</value>
          </argument>
        </attribute>
      </attributes>
      <file name="af904159-af96-e2f9-7c4b-dea860514176" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Pick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Pick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>pick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="283e6b43-a510-3f71-2c78-efcbc0f132e5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="ReadOnly" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ReadOnly``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>readonly</value>
          </argument>
        </attribute>
      </attributes>
      <file name="7d5fd8b2-f236-0c99-60ef-08369946fb23" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Reduce" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="reduction">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Reduce``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``0,``0}},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>reduce</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f076c79f-a401-d466-d9d6-df0875f27e89" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Scan" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Scan``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>scan</value>
          </argument>
        </attribute>
      </attributes>
      <file name="524c5089-124f-f7ff-7f39-ce7d3c1afae6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)">
      <topicdata group="api" />
      <apidata name="Singleton" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Singleton``1(``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>singleton</value>
          </argument>
        </attribute>
      </attributes>
      <file name="ea47fdb8-745e-4a92-e526-c6930b7d61e1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Skip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Skip``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>skip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="321fd344-f658-4169-6004-a9019adfb53a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="SkipWhile" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SkipWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>skipWhile</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2593f52d-ab1d-ab1a-a9ca-244e820ca768" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Sort" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Sort``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sort</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6747209d-3486-bf3e-332c-bc7a7f6048df" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="SortBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TKey" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TKey" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SortBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sortBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="937da458-9f79-78da-010d-c31d9d8c32aa" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Sum" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Sum``1(System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sum</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d1b6ca31-7484-af81-7d9e-3635ad298a98" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="SumBy" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="projection">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.SumBy``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},System.Collections.Generic.IEnumerable{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>sumBy</value>
          </argument>
        </attribute>
      </attributes>
      <file name="06fa85f6-6a4e-da2e-762e-3dccf11357d1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Take" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Take``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>take</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6a36fa40-f590-98d6-2cd3-4f130ac385c4" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="TakeWhile" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TakeWhile``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>takeWhile</value>
          </argument>
        </attribute>
      </attributes>
      <file name="822e5b02-5b90-ae7b-088c-c81eb2ba01dc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="ToArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cc85dabf-3aa8-3e35-12e8-2b9bd4dc82b6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="ToList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c323e972-b62e-3161-741d-f28d67b8ad90" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Truncate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="count">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Truncate``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>truncate</value>
          </argument>
        </attribute>
      </attributes>
      <file name="36829b19-5a9c-b068-3147-3cbb182f3d35" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="TryFind" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryFind``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFind</value>
          </argument>
        </attribute>
      </attributes>
      <file name="e8118c92-5f39-80b7-4ae7-c991cbd0d966" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="TryFindIndex" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryFindIndex``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <type api="T:System.Int32" ref="false" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryFindIndex</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0969c05d-457e-8548-731d-adc4c855bf38" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="TryPick" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="chooser">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.TryPick``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{``1}},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>tryPick</value>
          </argument>
        </attribute>
      </attributes>
      <file name="efe97be5-f349-54af-e8dc-d6c5e50d028a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)">
      <topicdata group="api" />
      <apidata name="Unfold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="TState" />
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="generator">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
              <type api="T:Microsoft.FSharp.Core.FSharpOption`1" ref="true">
                <specialization>
                  <type api="T:System.Tuple`2" ref="true">
                    <specialization>
                      <template name="T" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
                      <template name="TState" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
                    </specialization>
                  </type>
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Unfold``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpOption{System.Tuple{``1,``0}}},``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unfold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="bc649033-0ead-da77-55f7-eaf705247b1b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Where" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Where``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>where</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6b833002-2274-c209-f628-a6c31a4b22dd" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="Windowed" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="windowSize">
          <type api="T:System.Int32" ref="false" />
        </parameter>
        <parameter name="source">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <arrayOf rank="1">
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Windowed``1(System.Int32,System.Collections.Generic.IEnumerable{``0})" />
            </arrayOf>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>windowed</value>
          </argument>
        </attribute>
      </attributes>
      <file name="10ee4114-c926-c436-b64b-bbabef1d4a97" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})">
      <topicdata group="api" />
      <apidata name="Zip" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
      </templates>
      <parameters>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`2" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip</value>
          </argument>
        </attribute>
      </attributes>
      <file name="80205eec-d94b-35e1-b31d-57fe24864a85" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})">
      <topicdata group="api" />
      <apidata name="Zip3" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T1" />
        <template name="T2" />
        <template name="T3" />
      </templates>
      <parameters>
        <parameter name="source1">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source2">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="source3">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <type api="T:System.Tuple`3" ref="true">
              <specialization>
                <template name="T1" index="0" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
                <template name="T2" index="1" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
                <template name="T3" index="2" api="M:Microsoft.FSharp.Collections.SeqModule.Zip3``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Collections.Generic.IEnumerable{``2})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SeqModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>zip3</value>
          </argument>
        </attribute>
      </attributes>
      <file name="bae9e14c-c4ec-0fed-1712-9ec25853eced" />
    </api>
    <api id="T:Microsoft.FSharp.Collections.SetModule">
      <topicdata group="api" allMembersTopicId="AllMembers.T:Microsoft.FSharp.Collections.SetModule" />
      <apidata name="SetModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <family>
        <ancestors>
          <type api="T:System.Object" ref="true" />
        </ancestors>
      </family>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationRepresentationAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.CompilationRepresentationFlags" ref="false" />
            <enumValue>
              <field name="ModuleSuffix" />
            </enumValue>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.RequireQualifiedAccessAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationMappingAttribute" ref="true" />
          <argument>
            <type api="T:Microsoft.FSharp.Core.SourceConstructFlags" ref="false" />
            <enumValue>
              <field name="Module" />
            </enumValue>
          </argument>
        </attribute>
      </attributes>
      <file name="2b8011fd-e5d1-70ad-e261-568413725a85" />
    </api>
    <api id="AllMembers.T:Microsoft.FSharp.Collections.SetModule">
      <topicdata name="SetModule" group="list" subgroup="members" typeTopicId="T:Microsoft.FSharp.Collections.SetModule" />
      <apidata name="SetModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" />
      </containers>
      <file name="5b12e43a-bec8-c9b0-5f60-366359903a09" />
    </api>
    <api id="Methods.T:Microsoft.FSharp.Collections.SetModule">
      <topicdata name="SetModule" group="list" subgroup="Methods" typeTopicId="T:Microsoft.FSharp.Collections.SetModule" />
      <apidata name="SetModule" group="type" subgroup="class" />
      <typedata visibility="public" abstract="true" sealed="true" serializable="false" />
      <elements>
        <element api="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Empty``1" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
        <element api="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
      </elements>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" />
      </containers>
      <file name="65f89ec3-cb68-d1e3-878b-97811583c481" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Add" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Add``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>add</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1b9abb8c-e5ab-733a-4981-90cb19e03798" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Contains" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="element">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Contains``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>contains</value>
          </argument>
        </attribute>
      </attributes>
      <file name="0f6b1f61-8155-8d7b-cc46-065b79b0acc5" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Count" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Count``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Int32" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>count</value>
          </argument>
        </attribute>
      </attributes>
      <file name="15a0f3dd-f669-39e4-826f-6c8f8a8e1cba" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Difference" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Difference``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>difference</value>
          </argument>
        </attribute>
      </attributes>
      <file name="cab61e5a-39e1-8360-2fb6-782ff1f4960e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Empty``1">
      <topicdata group="api" />
      <apidata name="Empty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Empty``1" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.GeneralizableValueAttribute" ref="true" />
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>empty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9b1e7774-fb65-2d9b-e50b-123292272365" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Exists" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Exists``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>exists</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1c1ca0af-c68e-9fc7-cbc3-2cea8e309c2c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Filter" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Filter``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>filter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="46eb7fe4-4628-41be-e3ef-28c1aa4dd0cf" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Fold" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Fold``2(Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``0,``1}},``1,Microsoft.FSharp.Collections.FSharpSet{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>fold</value>
          </argument>
        </attribute>
      </attributes>
      <file name="036bef15-1b31-2aa7-7729-76732f5df86b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)">
      <topicdata group="api" />
      <apidata name="FoldBack" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TState" />
      </templates>
      <parameters>
        <parameter name="folder">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
              <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
                <specialization>
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
                  <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
            </specialization>
          </type>
        </parameter>
        <parameter name="state">
          <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
        </parameter>
      </parameters>
      <returns>
        <template name="TState" index="1" api="M:Microsoft.FSharp.Collections.SetModule.FoldBack``2(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``1}},Microsoft.FSharp.Collections.FSharpSet{``0},``1)" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>foldBack</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4960d562-a004-60b6-101d-ad7b3d17bc29" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="ForAll" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ForAll``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>forall</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9bbcf570-a4c0-5afc-2948-ec0744d9b113" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Intersect" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Intersect``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>intersect</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4b1eff89-3b42-a756-0056-b38c8d110f18" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
      <topicdata group="api" />
      <apidata name="IntersectMany" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="sets">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IntersectMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>intersectMany</value>
          </argument>
        </attribute>
      </attributes>
      <file name="99f6f711-4b7f-5df7-612e-04732da927fb" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="IsEmpty" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsEmpty``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isEmpty</value>
          </argument>
        </attribute>
      </attributes>
      <file name="2efec10a-5c5c-bd37-9632-ecbd7155e9c2" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="IsProperSubset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsProperSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isProperSubset</value>
          </argument>
        </attribute>
      </attributes>
      <file name="d2c45d7e-6317-ad4b-f142-57e57f5d7786" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="IsProperSuperset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsProperSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isProperSuperset</value>
          </argument>
        </attribute>
      </attributes>
      <file name="6e4a441a-13c4-573e-8e53-1f7b1b4f7e5b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="IsSubset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsSubset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isSubset</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f49e721c-6bfc-3b52-fba6-2aeafc4660d1" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="IsSuperset" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.IsSuperset``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Boolean" ref="false" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>isSuperset</value>
          </argument>
        </attribute>
      </attributes>
      <file name="9f640fc2-c445-aeca-c039-9ccfcfa1500d" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Iterate" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="action">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:Microsoft.FSharp.Core.Unit" ref="true" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Iterate``1(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.Unit},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>iter</value>
          </argument>
        </attribute>
      </attributes>
      <file name="df315dca-92e1-6695-ade1-1b0e23a414e9" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Map" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
        <template name="TResult" />
      </templates>
      <parameters>
        <parameter name="mapping">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="TResult" index="1" api="M:Microsoft.FSharp.Collections.SetModule.Map``2(Microsoft.FSharp.Core.FSharpFunc{``0,``1},Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>map</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f1f763a6-6f67-38df-c72b-d82c6236f58b" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="MaxElement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.MaxElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>maxElement</value>
          </argument>
        </attribute>
      </attributes>
      <file name="862d2d2f-6332-f981-efad-43c97c9b13a6" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="MinElement" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.MinElement``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>minElement</value>
          </argument>
        </attribute>
      </attributes>
      <file name="58c37074-30db-40b3-0460-e43ad5eaa179" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])">
      <topicdata group="api" />
      <apidata name="OfArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="array">
          <arrayOf rank="1">
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])" />
          </arrayOf>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfArray``1(``0[])" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="1b326393-cc86-ec84-4239-0e0866cecd61" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})">
      <topicdata group="api" />
      <apidata name="OfList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="elements">
          <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfList``1(Microsoft.FSharp.Collections.FSharpList{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="f23cc19b-70ab-d82c-644d-6f0d7dfbd4cc" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})">
      <topicdata group="api" />
      <apidata name="OfSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="elements">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.OfSeq``1(System.Collections.Generic.IEnumerable{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>ofSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="5b51ea59-4024-5960-bc48-1c522a241505" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Partition" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="predicate">
          <type api="T:Microsoft.FSharp.Core.FSharpFunc`2" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              <type api="T:System.Boolean" ref="false" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Tuple`2" ref="true">
          <specialization>
            <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              </specialization>
            </type>
            <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
              <specialization>
                <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Partition``1(Microsoft.FSharp.Core.FSharpFunc{``0,System.Boolean},Microsoft.FSharp.Collections.FSharpSet{``0})" />
              </specialization>
            </type>
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>partition</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c74bd887-5a89-ebfe-0fa0-c5c1bbdf261c" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Remove" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
        </parameter>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Remove``1(``0,Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>remove</value>
          </argument>
        </attribute>
      </attributes>
      <file name="3071c793-9570-fb67-495d-eeb52234c011" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)">
      <topicdata group="api" />
      <apidata name="Singleton" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="value">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)" />
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Singleton``1(``0)" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>singleton</value>
          </argument>
        </attribute>
      </attributes>
      <file name="4a8ca3f3-520e-fa8a-f023-4d28005237b8" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="ToArray" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <arrayOf rank="1">
          <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToArray``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
        </arrayOf>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toArray</value>
          </argument>
        </attribute>
      </attributes>
      <file name="20c64d07-7e09-906b-9255-fe99e27e1099" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="ToList" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpList`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToList``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toList</value>
          </argument>
        </attribute>
      </attributes>
      <file name="476e6c2f-f645-cdf9-2a45-751264c5918e" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="ToSeq" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.ToSeq``1(Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>toSeq</value>
          </argument>
        </attribute>
      </attributes>
      <file name="c8336894-6d6d-2213-216d-8cfd36d9562a" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})">
      <topicdata group="api" />
      <apidata name="Union" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="set1">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
        <parameter name="set2">
          <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
            <specialization>
              <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.Union``1(Microsoft.FSharp.Collections.FSharpSet{``0},Microsoft.FSharp.Collections.FSharpSet{``0})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationArgumentCountsAttribute" ref="true" />
          <argument>
            <arrayOf rank="1">
              <type api="T:System.Int32" ref="false" />
            </arrayOf>
            <value>System.Int32[]</value>
          </argument>
        </attribute>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>union</value>
          </argument>
        </attribute>
      </attributes>
      <file name="edfde235-6464-f9a5-b903-6572a41fcfb3" />
    </api>
    <api id="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})">
      <topicdata group="api" />
      <apidata name="UnionMany" group="member" subgroup="method" />
      <memberdata visibility="public" static="true" />
      <proceduredata virtual="false" />
      <templates>
        <template name="T" />
      </templates>
      <parameters>
        <parameter name="sets">
          <type api="T:System.Collections.Generic.IEnumerable`1" ref="true">
            <specialization>
              <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
                <specialization>
                  <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
                </specialization>
              </type>
            </specialization>
          </type>
        </parameter>
      </parameters>
      <returns>
        <type api="T:Microsoft.FSharp.Collections.FSharpSet`1" ref="true">
          <specialization>
            <template name="T" index="0" api="M:Microsoft.FSharp.Collections.SetModule.UnionMany``1(System.Collections.Generic.IEnumerable{Microsoft.FSharp.Collections.FSharpSet{``0}})" />
          </specialization>
        </type>
      </returns>
      <containers>
        <library assembly="FSharp.Core" module="FSharp.Core" kind="DynamicallyLinkedLibrary">
          <assemblydata version="2.3.5.0" />
          <noAptca />
        </library>
        <namespace api="N:Microsoft.FSharp.Collections" />
        <type api="T:Microsoft.FSharp.Collections.SetModule" ref="true" />
      </containers>
      <attributes>
        <attribute>
          <type api="T:Microsoft.FSharp.Core.CompilationSourceNameAttribute" ref="true" />
          <argument>
            <type api="T:System.String" ref="true" />
            <value>unionMany</value>
          </argument>
        </attribute>
      </attributes>
      <file name="691a88f3-5b22-1222-c3ec-5da7e4cc71c3" />
    </api>
  </apis>
</reflection>