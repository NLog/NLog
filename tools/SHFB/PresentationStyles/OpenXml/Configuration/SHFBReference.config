<?xml version="1.0" encoding="utf-8"?>
<configuration verbosity="{@BuildAssemblerVerbosity}">
	<dduetools>
		<builder>
			<componentLocations>
				{@ComponentLocations}
			</componentLocations>

			<components>
				<!-- Create skeleton document -->
				<component id="Copy From File Component">
					<data file="{@PresentationPath}Transforms\SkeletonAPI.xml" />
					<copy source="/*" target="/" />
				</component>

				<!-- Copy in reflection data -->
				<component id="Copy From Index Component">
					<index name="reflection" value="/reflection/apis/api" key="@id" cache="15">
						<data base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml" duplicateWarning="false">
							{@ReferenceLinkNamespaceFiles}
						</data>
						<data files="reflection.xml" />
					</index>
					<copy name="reflection" source="*" target="/document/reference" />
				</component>

				<!-- Copy in container data -->
				<component id="Copy From Index Component">
					<copy name="reflection" key="string(/document/reference/containers/namespace/@api)"
						source="*[not(local-name()='elements')]" target="/document/reference/containers/namespace" />
				</component>

				<component id="For Each Component">
					<variable expression="/document/reference/containers//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="topicdata|apidata|typedata|family|templates|attributes"
								target="/document/reference/containers//type[@api=$key]" />
						</component>
					</components>
				</component>

				<!-- Copy in explicitInterfaceImplemented reflection data -->
				<component id="For Each Component">
					<variable expression="/document/reference/implements/member/@api | /document/reference/implements//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata"
								target="/document/reference/implements//*[@api=$key and not(apidata)]" />
							<copy name="reflection" source="templates"
								target="/document/reference/implements//*[@api=$key and not(apidata) and not(specialization)]" />
						</component>
					</components>
				</component>

				<!-- Copy in extension method template/type data -->
				<component id="For Each Component">
					<variable expression="/document/reference/elements//element[@source='extension']/templates//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata"
								target="/document/reference/elements//element[@source='extension']/templates//type[boolean(@api=$key) and not(apidata)]" />
							<copy name="reflection" source="templates"
								target="/document/reference/elements//element[@source='extension']/templates//type[boolean(@api=$key) and not(apidata) and not(specialization)]" />
						</component>
					</components>
				</component>

				<!-- Copy in parameter data -->
				<component id="For Each Component">
					<variable expression="/document/reference/parameters/parameter//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata"
								target="/document/reference/parameters/parameter//type[boolean(@api=$key) and not(apidata)]" />
						</component>
					</components>
				</component>

				<!-- Copy in templates type reflection data -->
				<component id="For Each Component">
					<variable expression="/document/reference/templates//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata"
								target="/document/reference/templates//type[@api=$key]" />
							<copy name="reflection" source="templates"
								target="/document/reference/templates//type[@api=$key and not(specialization)]" />
						</component>
					</components>
				</component>

				<!-- Copy in return type reflection data -->
				<component id="For Each Component">
					<variable expression="/document/reference/returns//type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata|typedata|family|templates|containers|attributes"
								target="/document/reference/returns//type[@api=$key]" />
						</component>
					</components>
				</component>

				<!-- Copy in event handler type reflection data -->
				<component id="For Each Component">
					<variable expression="/document/reference/eventhandler/type/@api" />
					<components>
						<component id="Copy From Index Component">
							<copy name="reflection" source="apidata|typedata|family|templates|containers|attributes"
								target="/document/reference/eventhandler/type[@api=$key]"/>
						</component>
					</components>
				</component>

				<!-- Generate syntax -->
				<component id="Syntax Component">
					<syntax input="/document/reference" output="/document/syntax" />
					<generators>
						{@SyntaxFilters}
					</generators>
				</component>

				<!-- Copy in comments -->
				<component id="Copy From Index Component">
					<index name="comments" value="/doc/members/member" key="@name" cache="30">
						{@FrameworkCommentList}
						{@CommentFileList}
					</index>
					<copy name="comments" source="*" target="/document/comments" />
					<!-- Propagate the parent type's preliminary element to the members too if present -->
					<copy name="comments" key="string(/document/reference/containers/type/@api)"
						source="preliminary" target="/document/comments" />
				</component>

				<!-- Copy in reflection data and comments for members -->
				<component id="For Each Component">
					<variable expression="/document/reference/elements//element/@api" />
					<components>
						<component id="If Then Component">
							<if condition="not(/document/reference/elements//element[@api=$key]/apidata)" />
							<then>
								<component id="Copy From Index Component">
									<copy name="reflection" source="*[not(self::elements)]"
										target="/document/reference/elements//element[@api=$key]" />
								</component>
							</then>
						</component>
						<component id="Copy From Index Component">
							<copy name="comments" source="summary|overloads|example"
								target="/document/reference/elements//element[@api=$key]" />
						</component>
					</components>
				</component>

				<!-- Copy in comments for the member's declaring type. -->
				<component id="Copy From Index Component">
					<copy name="comments" key="string(/document/reference/containers/type/@api)" source="summary"
						target="/document/reference/containers" />
				</component>

				<!-- Show missing documentation component configuration.  This must appear before the TransformComponent. -->
				<component id="Show Missing Documentation Component">
					<!-- All elements are optional. -->

					<!-- Auto-document constructors (true by default) -->
					<AutoDocumentConstructors value="{@AutoDocumentConstructors}" />

					<!-- Auto-document dispose methods (true by default) -->
					<AutoDocumentDisposeMethods value="{@AutoDocumentDisposeMethods}" />

					<!-- Show missing param tags (true by default) -->
					<ShowMissingParams value="{@ShowMissingParams}" />

					<!-- Show missing typeparam tags (true by default) -->
					<ShowMissingTypeParams value="{@ShowMissingTypeParams}" />

					<!-- Show missing remarks tags (false by default) -->
					<ShowMissingRemarks value="{@ShowMissingRemarks}" />

					<!-- Show missing returns tags (true by default) -->
					<ShowMissingReturns value="{@ShowMissingReturns}" />

					<!-- Show missing summary tags (true by default) -->
					<ShowMissingSummaries value="{@ShowMissingSummaries}" />

					<!-- Show missing value tags (false by default) -->
					<ShowMissingValues value="{@ShowMissingValues}" />

					<!-- Show missing namespace comments (true by default) -->
					<ShowMissingNamespaces value="{@ShowMissingNamespaces}" />

					<!-- Show missing include targets (true by default) -->
					<ShowMissingIncludeTargets value="{@ShowMissingIncludeTargets}" />
				</component>

				<!-- Code block component configuration.  This must appear before the TransformComponent. -->
				<component id="Code Block Component">
					<!-- Base path for relative filenames in source attributes (optional) -->
					<basePath value="{@HtmlEncProjectFolder}" />

					<!-- Base output paths for the files (required).  These should match the parent folder of the output
							 path of the HTML files (see each of the SaveComponent instances below). -->
					<outputPaths>
						{@HelpFormatOutputPaths}
					</outputPaths>

					<!-- Allow missing source files (Optional).  If omitted, it will generate errors if referenced source
							 files are missing. -->
					<allowMissingSource value="false" />

					<!-- Remove region markers from imported code blocks.  If omitted, region markers in imported code
							 blocks are left alone. -->
					<removeRegionMarkers value="false" />

					<!-- Code colorizer options (required).
							 Attributes:
									Language syntax configuration file (required)
									XSLT style sheet file (required)
									CSS style sheet file (not used for Open XML)
									Script file (not used for Open XML)
									Disabled (optional, leading whitespace normalization only)
									Default language (optional)
									Enable line numbering (optional)
									Enable outlining (optional)
									Keep XML comment "see" tags within the code (optional)
									Tab size override (optional, 0 = Use syntax file setting)
									Use language name as default title (optional) -->
					<colorizer syntaxFile="{@SHFBFolder}PresentationStyles\Colorizer\highlight.xml"
							styleFile="{@SHFBFolder}PresentationStyles\Colorizer\highlight_openxml.xsl" stylesheet="N/A" scriptFile="N/A"
							disabled="{@DisableCodeBlockComponent}" language="cs" numberLines="false" outlining="false"
							keepSeeTags="false" tabSize="0" defaultTitle="true" />
				</component>

				<!-- Transform -->
				<component id="XSL Transform Component">
					<transform file="{@PresentationPath}Transforms\MainSandcastle.xsl">
						{@TransformComponentArguments}
					</transform>
				</component>

				<!-- Resolve shared content -->
				<component id="Shared Content Component">
					<content file="{@ResourceItemsFolder}SharedContent.xml" />
					<content file="{@ResourceItemsFolder}ReferenceContent.xml" />
					<content file="{@ResourceItemsFolder}SyntaxContent.xml" />
					<content file="{@ResourceItemsFolder}FeedbackContent.xml" />
					<!-- These must be last in order to override other elements! -->
					<content file="SHFBContent.xml" />
					{@ResourceItemFiles}
				</component>

				<!-- Resolve conceptual links -->
				<component id="Resolve Conceptual Links Component">
					<showBrokenLinkText value="true" />
					<targets base="xmlComp" type="Local"/>
				</component>

				<!-- Resolve reference links -->
				<component id="Resolve Reference Links Component">
					<locale value="{@Locale}" />
					<linkTarget value="{@SdkLinkTarget}" />
					<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
					<targets base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml"
						type="{@WebsiteSdkLinkType}" id="FrameworkTargets">
						{@ReferenceLinkNamespaceFiles}
					</targets>
					<targets files="reflection.xml" type="Local" id="ProjectTargets" />
				</component>

				<!-- Save the result -->
				<component id="Save Component">
					<save base="Output\OpenXML\Topics" path="concat(/*/file/@name,'.xml')" indent="{@IndentHtml}"
						omit-xml-declaration="false" add-xhtml-namespace="true" />
				</component>

			</components>
		</builder>
	</dduetools>
</configuration>
