<?xml version="1.0" encoding="utf-8"?>
<configuration verbosity="{@BuildAssemblerVerbosity}">
	<dduetools>
		<builder>
			<componentLocations>
				{@ComponentLocations}
			</componentLocations>

			<components>
				<!-- Create skeleton document -->
				<component id="Copy From File Component">
					<data file="{@PresentationPath}Transforms\skeleton_conceptual.xml" />
					<copy source="/*" target="/" />
				</component>

				<!-- Copy in the topic content-->
				<component id="Copy From Files Component">
					<copy base=".\ddueXml" file="concat($key,'.xml')" source="/topic" target="/document" />
				</component>

				<!-- Resolve tokens -->
				<component id="Shared Content Component">
					<context prefix="ddue" name="http://ddue.schemas.microsoft.com/authoring/2003/5" />
					<content file="HelpFileBuilderTokens.tokens" />
					{@TokenFiles}
					<replace elements="/*//ddue:token" item="string(.)" />
				</component>

				<!-- Copy in metadata attributes -->
				<component id="Copy From Index Component">
					<index name="metadata" value="/metadata/topic" key="@id">
						<data files="_ContentMetadata_.xml" />
					</index>
					<copy name="metadata" source="*" target="/document/metadata" />
				</component>

				<!-- Resolve code snippets -->
				<component id="Example Component">
					{@CodeSnippetsFiles}
					<colors language="VisualBasic">
						<color pattern="^\s*'[^\r\n]*" class="comment" />
						<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
						<color pattern="\b((AddHandler)|(AddressOf)|(Alias)|(And)|(AndAlso)|(As)|(Boolean)|(ByRef)|(Byte)|(ByVal)|(Call)|(Case)|(Catch)|(CBool)|(CByte)|(CChar)|(CDate)|(CDec)|(CDbl)|(Char)|(CInt)|(Class)|(CLng)|(CObj)|(Const)|(Continue)|(CSByte)|(CShort)|(CSng)|(CStr)|(CType)|(CUInt)|(CULng)|(CUShort)|(Date)|(Decimal)|(Declare)|(Default)|(Delegate)|(Dim)|(DirectCast)|(Do)|(Double)|(Each)|(Else)|(ElseIf)|(End)|(EndIf)|(Enum)|(Erase)|(Error)|(Event)|(Exit)|(False)|(Finally)|(For)|(Friend)|(From)|(Function)|(Get)|(GetType)|(GetXMLNamespace)|(Global)|(GoSub)|(GoTo)|(Handles)|(If)|(Implements)|(Imports)|(In)|(Inherits)|(Integer)|(Interface)|(Is)|(IsNot)|(Let)|(Lib)|(Like)|(Long)|(Loop)|(Me)|(Mod)|(Module)|(MustInherit)|(MustOverride)|(MyBase)|(MyClass)|(Namespace)|(Narrowing)|(New)|(Next)|(Not)|(Nothing)|(NotInheritable)|(NotOverridable)|(Object)|(Of)|(On)|(Operator)|(Option)|(Optional)|(Or)|(OrElse)|(Overloads)|(Overridable)|(Overrides)|(ParamArray)|(Partial)|(Private)|(Property)|(Protected)|(Public)|(RaiseEvent)|(ReadOnly)|(ReDim)|(REM)|(RemoveHandler)|(Resume)|(Return)|(SByte)|(Select)|(Set)|(Shadows)|(Shared)|(Short)|(Single)|(Static)|(Step)|(Stop)|(String)|(Structure)|(Sub)|(SyncLock)|(Then)|(Throw)|(To)|(True)|(Try)|(TryCast)|(TypeOf)|(Variant)|(Wend)|(UInteger)|(ULong)|(UShort)|(Until)|(Using)|(When)|(Where)|(While)|(Widening)|(With)|(WithEvents)|(WriteOnly)|(Xor)|(#Const)|(#Else)|(#ElseIf)|(#End)|(#If))\b" class="keyword" />
					</colors>
					<colors language="CSharp">
						<color pattern="/\*(.|\n)+?\*/" class="comment" />
						<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
						<color pattern="//[^\r\n]*" class="comment" />
						<color pattern="\b((abstract)|(as)|(ascending)|(base)|(bool)|(break)|(by)|(byte)|(case)|(catch)|(char)|(checked)|(class)|(const)|(continue)|(decimal)|(default)|(delegate)|(descending)|(do)|(double)|(else)|(enum)|(equals)|(event)|(explicit)|(extern)|(false)|(finally)|(fixed)|(float)|(for)|(foreach)|(from)|(get)|(goto)|(group)|(if)|(implicit)|(in)|(int)|(interface)|(internal)|(into)|(is)|(join)|(let)|(lock)|(long)|(namespace)|(new)|(null)|(object)|(operator)|(on)|(orderby)|(out)|(override)|(params)|(partial)|(private)|(protected)|(public)|(readonly)|(ref)|(return)|(sbyte)|(sealed)|(select)|(set)|(short)|(sizeof)|(stackalloc)|(static)|(string)|(struct)|(switch)|(this)|(throw)|(true)|(try)|(typeof)|(uint)|(ulong)|(unchecked)|(unsafe)|(ushort)|(using)|(value)|(var)|(vield)|(virtual)|(volatile)|(void)|(where)|(while))\b" class="keyword" />
					</colors>
					<colors language="ManagedCPlusPlus">
						<color pattern="/\*(.|\n)+?\*/" class="comment" />
						<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
						<color pattern="//[^\r\n]*" class="comment" />
						<color pattern="\b((abstract)|(array)|(bool)|(break)|(case)|(catch)|(char)|(class)|(const)|(continue)|(default)|(delegate)|(delete)|(deprecated)|(dllexport)|(dllimport)|(do)|(double)|(else)|(enum)|(event)|(explicit)|(extern)|(false)|(finally)|(float)|(for)|(friend)|(gcnew)|(generic)|(goto)|(if)|(initonly)|(inline)|(int)|(interface)|(literal)|(long)|(mutable)|(naked)|(namespace)|(new)|(noinline)|(noreturn)|(nothrow)|(novtable)|(nullptr)|(operator)|(private)|(property)|(protected)|(public)|(ref)|(register)|(return)|(safecast)|(sealed)|(selectany)|(short)|(signed)|(sizeof)|(static)|(struct)|(switch)|(template)|(this)|(thread)|(throw)|(true)|(try)|(typedef)|(typeid)|(typename)|(union)|(unsigned)|(using)|(uuid)|(value)|(virtual)|(void)|(volatile)|(while))\b" class="keyword" />
					</colors>
					<colors language="FSharp">
						<color pattern="\(\*(.|\n)+?\*\)" class="comment" />"
						<color pattern="\&#34;[^&#34;\r\n]*\&#34;" class="literal" />
						<color pattern="//[^\r\n]*" class="comment" />
						<color pattern="\b((abstract)|(and)|(as)|(asr)|(assert)|(atomic)|(base)|(begin)|(break)|(checked)|(class)|(component)|(const)|(constraint)|(constructor)|(continue)|(default)|(delegate)|(do)|(done)|(downcast)|(downto)|(eager)|(elif)|(else)|(end)|(event)|(exception)|(extern)|(external)|(false)|(finally)|(fixed)|(for)|(fun)|(function)|(functor)|(global)|(if)|(in)|(include)|(inherit)|(inline)|(interface)|(internal)|(land)|(lazy)|(let)|(lor)|(lsl)|(lsr)|(lxor)|(match)|(member)|(method)|(mixin)|(mod)|(module)|(mutable)|(namespace)|(new)|(null)|(object)|(of)|(open)|(or)|(override)|(parallel)|(private)|(process)|(protected)|(public)|(pure)|(rec)|(return)|(sealed)|(sig)|(static)|(struct)|(tailcall)|(then)|(to)|(trait)|(true)|(try)|(type)|(upcast)|(use)|(val)|(virtual)|(void)|(volatile)|(when)|(while)|(with)|(yield))\b" class="keyword" />
					</colors>
				</component>

				<!-- Code block component configuration.  This must appear before the TransformComponent. -->
				<component id="Code Block Component">
					<!-- Base path for relative filenames in source attributes (optional) -->
					<basePath value="{@HtmlEncProjectFolder}" />

					<!-- Base output paths for the files (required).  These should match the parent folder of the output
							 path of the HTML files (see each of the SaveComponent instances below). -->
					<outputPaths>
						{@HelpFormatOutputPaths}
					</outputPaths>

					<!-- Allow missing source files (Optional).  If omitted, it will generate errors if referenced source
							 files are missing. -->
					<allowMissingSource value="false" />

					<!-- Remove region markers from imported code blocks.  If omitted, region markers in imported code
							 blocks are left alone. -->
					<removeRegionMarkers value="false" />

					<!-- Code colorizer options (required).
							 Attributes:
									Language syntax configuration file (required)
									XSLT style sheet file (required)
									CSS style sheet file (required)
									Script file (required)
									Disabled (optional, leading whitespace normalization only)
									Default language (optional)
									Enable line numbering (optional)
									Enable outlining (optional)
									Keep XML comment "see" tags within the code (optional)
									Tab size override (optional, 0 = Use syntax file setting)
									Use language name as default title (optional) -->
					<colorizer syntaxFile="{@SHFBFolder}PresentationStyles\Colorizer\highlight.xml"
							styleFile="{@SHFBFolder}PresentationStyles\Colorizer\highlight.xsl" stylesheet="{@SHFBFolder}PresentationStyles\Colorizer\highlight.css"
							scriptFile="{@SHFBFolder}PresentationStyles\Colorizer\highlight.js" disabled="{@DisableCodeBlockComponent}"
							language="cs" numberLines="false" outlining="false" keepSeeTags="false" tabSize="0"
							defaultTitle="true" />
				</component>

				<!-- Generate syntax -->
				<component id="Syntax Component">
					<!-- This element is not relevant to conceptual builds -->
					<syntax input="/document/reference" output="/document/syntax" />
					<!-- The list of syntax generators to use -->
					<generators>
						{@SyntaxFilters}
					</generators>
					<!-- Group snippets for languages in the syntax generator set within this element -->
					<containerElement name="codeSnippetGroup" addNoExampleTabs="true" includeOnSingleSnippets="false"
						groupingEnabled="true" />
				</component>

				<!-- Transform -->
				<component id="XSL Transform Component">
					<transform file="{@PresentationPath}Transforms\main_conceptual.xsl">
						<argument key="metadata" value="true" />
						<argument key="languages">
							{@SyntaxFiltersDropDown}
						</argument>
						{@TransformComponentArguments}
					</transform>
				</component>

				<!-- Multi-format output component.  This must wrap the component set unique to each output file format. -->
				<component id="Multi-format Output Component">
					<!-- This defines the formats to generate -->
					<build formats="{@HelpFileFormat}" />

					<!-- This defines the set of components for HTML Help 1 files -->
					<helpOutput format="HtmlHelp1">
						<!-- Add additional header resources -->
						<component id="Additional Header Resources Component">
							<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9" />
							<stylesheet name="../styles/branding-Help1.css" />
						</component>

						<!-- Resolve shared content -->
						<component id="Shared Content Component">
							<content file="{@ResourceItemsFolder}shared_content.xml" />
							<content file="{@ResourceItemsFolder}conceptual_content.xml" />
							<!-- These must be last in order to override other elements! -->
							<content file="SHFBContent.xml" />
							{@ResourceItemFiles}
						</component>

						<!-- Resolve art links -->
						<component id="Resolve Art Links Component">
							<targets input="Media" baseOutput=".\Output\HtmlHelp1" outputPath="string('media')" link="../media"
								map="_MediaContent_.xml" />
						</component>

						<!-- Resolve conceptual links -->
						<component id="Resolve Conceptual Links Component">
							<showBrokenLinkText value="true" />
							<targets base="xmlComp" type="Local" />
						</component>

						<!-- Resolve reference links -->
						<component id="Resolve Reference Links Component">
							<locale value="{@Locale}" />
							<linkTarget value="{@SdkLinkTarget}" />
							<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
							<targets base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml"
								type="{@HtmlSdkLinkType}" id="FrameworkTargets">
								{@ReferenceLinkNamespaceFiles}
							</targets>
							<targets files="reflection.xml" type="Local" id="ProjectTargets" />
						</component>

						<!-- Convert language-specific text spans to script elements -->
						<component id="Language-Specific Text Component" />

						<!-- Save the result -->
						<component id="Save Component">
							<save base="Output\HtmlHelp1\html" path="concat($key,'.htm')" indent="{@IndentHtml}"
								omit-xml-declaration="true" add-xhtml-namespace="false" />
						</component>
					</helpOutput>

					<!-- This defines the set of components for MS Help Viewer files -->
					<helpOutput format="MSHelpViewer">
						<!-- Add additional header resources -->
						<component id="Additional Header Resources Component">
							<meta http-equiv="X-UA-Compatible" content="IE=EmulateIE9" />
							<stylesheet name="styles/branding-HelpViewer.css" />
						</component>

						<!-- Resolve shared content -->
						<component id="Shared Content Component">
							<content file="{@ResourceItemsFolder}shared_content.xml" />
							<!-- Override the paths for MS Help Viewer -->
							<content file="{@ResourceItemsFolder}shared_content_mshc.xml" />
							<content file="{@ResourceItemsFolder}conceptual_content.xml" />
							<!-- These must be last in order to override other elements! -->
							<content file="SHFBContent.xml" />
							{@ResourceItemFiles}
						</component>

						<!-- Resolve art links -->
						<component id="Resolve Art Links Component">
							<targets input="Media" baseOutput=".\Output\MSHelpViewer" outputPath="string('media')" link="media"
								map="_MediaContent_.xml" />
						</component>

						<!-- Resolve conceptual links -->
						<component id="Resolve Conceptual Links Component">
							<showBrokenLinkText value="true" />
							<targets base="xmlComp" type="Id" />
						</component>

						<!-- Resolve reference links -->
						<component id="Resolve Reference Links Component">
							<locale value="{@Locale}" />
							<linkTarget value="{@SdkLinkTarget}" />
							<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
							<targets base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml"
								type="{@MSHelpViewerSdkLinkType}" id="FrameworkTargets">
								{@ReferenceLinkNamespaceFiles}
							</targets>
							<targets files="reflection.xml" type="Id" id="ProjectTargets" />
						</component>

						<!-- Add Microsoft Help Viewer metadata -->
						<component id="Microsoft Help Viewer Metadata Component">
							<data topic-version="{@TopicVersion}" toc-file="_ConceptualTOC_.xml"
                toc-parent="{@TocParentId}" toc-parent-version="{@TocParentVersion}" locale="{@Locale}" />
						</component>

						<!-- Convert language-specific text spans to script elements -->
						<component id="Language-Specific Text Component" />

						<!-- Save the result -->
						<component id="Save Component">
							<save base="Output\MSHelpViewer\html" path="concat($key,'.htm')" indent="{@IndentHtml}"
								omit-xml-declaration="false" add-xhtml-namespace="true" />
						</component>
					</helpOutput>

					<!-- This defines the set of components for websites -->
					<helpOutput format="Website">
						<!-- Add additional header resources -->
						<component id="Additional Header Resources Component">
							<meta http-equiv="X-UA-Compatible" content="IE=edge" />
							<stylesheet name="../styles/branding-Website.css" />
							<script name="../scripts/jquery-1.11.0.min.js" />
							<script name="../scripts/branding-Website.js" />
						</component>

						<!-- Resolve shared content -->
						<component id="Shared Content Component">
							<content file="{@ResourceItemsFolder}shared_content.xml" />
							<content file="{@ResourceItemsFolder}conceptual_content.xml" />
							<!-- These must be last in order to override other elements! -->
							<content file="SHFBContent.xml" />
							{@ResourceItemFiles}
						</component>

						<!-- Resolve art links -->
						<component id="Resolve Art Links Component">
							<targets input="Media" baseOutput=".\Output\Website" outputPath="string('media')" link="../media"
								map="_MediaContent_.xml" />
						</component>

						<!-- Resolve conceptual links -->
						<component id="Resolve Conceptual Links Component">
							<showBrokenLinkText value="true" />
							<targets base="xmlComp" type="Local" />
						</component>

						<!-- Resolve reference links -->
						<component id="Resolve Reference Links Component">
							<locale value="{@Locale}" />
							<linkTarget value="{@SdkLinkTarget}" />
							<msdnContentIdCache path="{@LocalDataFolder}Cache\MsdnContentId.cache" />
							<targets base="{@FrameworkReflectionDataFolder}" recurse="true" files="*.xml"
								type="{@WebsiteSdkLinkType}" id="FrameworkTargets">
								{@ReferenceLinkNamespaceFiles}
							</targets>
							<targets files="reflection.xml" type="Local" id="ProjectTargets" />
						</component>

						<!-- Convert language-specific text spans to script elements -->
						<component id="Language-Specific Text Component" />

						<!-- Save the result -->
						<component id="Save Component">
							<save base="Output\Website\html" path="concat($key,'.htm')" indent="{@IndentHtml}"
								omit-xml-declaration="true" add-xhtml-namespace="false" />
						</component>
					</helpOutput>
				</component>

			</components>
		</builder>
	</dduetools>
</configuration>
