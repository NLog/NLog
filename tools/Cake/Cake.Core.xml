<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Core</name>
    </assembly>
    <members>
        <member name="T:Cake.Core.ActionTask">
            <summary>
            A task that executes a specified delegate.
            </summary>
        </member>
        <member name="T:Cake.Core.CakeTask">
            <summary>
            A <see cref="T:Cake.Core.CakeTask"/> represents a unit of work.
            </summary>
        </member>
        <member name="T:Cake.Core.ICakeTaskInfo">
            <summary>
            Provides descriptive properties about a cake task
            </summary>
        </member>
        <member name="P:Cake.Core.ICakeTaskInfo.Name">
            <summary>
            Gets the name of the task.
            </summary>
            <value>The name of the task.</value>
        </member>
        <member name="P:Cake.Core.ICakeTaskInfo.Description">
            <summary>
            Gets the description of the task.
            </summary>
            <value>The description of the task.</value>
        </member>
        <member name="P:Cake.Core.ICakeTaskInfo.Dependencies">
            <summary>
            Gets the task's dependencies.
            </summary>
            <value>The task's dependencies.</value>
        </member>
        <member name="M:Cake.Core.CakeTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeTask"/> class.
            </summary>
            <param name="name">The name of the task.</param>
        </member>
        <member name="M:Cake.Core.CakeTask.AddDependency(System.String)">
            <summary>
            Adds a dependency to the task.
            </summary>
            <param name="name">The name of the dependency.</param>
        </member>
        <member name="M:Cake.Core.CakeTask.AddCriteria(System.Func{Cake.Core.ICakeContext,System.Boolean})">
            <summary>
            Adds a criteria to the task that is invoked when the task is invoked.
            </summary>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="M:Cake.Core.CakeTask.SetErrorHandler(System.Action{System.Exception})">
            <summary>
            Sets the error handler for the task.
            The error handler is invoked when an exception is thrown from the task.
            </summary>
            <param name="errorHandler">The error handler.</param>
        </member>
        <member name="M:Cake.Core.CakeTask.SetErrorReporter(System.Action{System.Exception})">
            <summary>
            Sets the error reporter for the task.
            The error reporter is invoked when an exception is thrown from the task.
            This action is invoked before the error handler, but gives no opportunity to recover from the error.
            </summary>
            <param name="errorReporter">The error reporter.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="errorReporter"/> is <c>null</c>.</exception>
            <exception cref="T:Cake.Core.CakeException">There can only be one error reporter per task.</exception>
        </member>
        <member name="M:Cake.Core.CakeTask.SetFinallyHandler(System.Action)">
            <summary>
            Sets the finally handler for the task.
            The finally handler is always invoked when a task have finished running.
            </summary>
            <param name="finallyHandler">The finally handler.</param>
        </member>
        <member name="M:Cake.Core.CakeTask.Execute(Cake.Core.ICakeContext)">
            <summary>
            Executes the task using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Cake.Core.CakeTask.Name">
            <summary>
            Gets the name of the task.
            </summary>
            <value>The name of the task.</value>
        </member>
        <member name="P:Cake.Core.CakeTask.Description">
            <summary>
            Gets or sets the description of the task.
            </summary>
            <value>The description of the task.</value>
        </member>
        <member name="P:Cake.Core.CakeTask.Dependencies">
            <summary>
            Gets the task's dependencies.
            </summary>
            <value>The task's dependencies.</value>
        </member>
        <member name="P:Cake.Core.CakeTask.Criterias">
            <summary>
            Gets the task's criterias.
            </summary>
            <value>The task's criterias.</value>
        </member>
        <member name="P:Cake.Core.CakeTask.ErrorHandler">
            <summary>
            Gets the error handler.
            </summary>
            <value>The error handler.</value>
        </member>
        <member name="P:Cake.Core.CakeTask.ErrorReporter">
            <summary>
            Gets the error reporter.
            </summary>
        </member>
        <member name="P:Cake.Core.CakeTask.FinallyHandler">
            <summary>
            Gets the finally handler.
            </summary>
        </member>
        <member name="M:Cake.Core.ActionTask.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.ActionTask"/> class.
            </summary>
            <param name="name">The name of the task.</param>
        </member>
        <member name="M:Cake.Core.ActionTask.AddAction(System.Action{Cake.Core.ICakeContext})">
            <summary>
            Adds an action to the task.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.ActionTask.Execute(Cake.Core.ICakeContext)">
            <summary>
            Executes the task using the specified context.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="P:Cake.Core.ActionTask.Actions">
            <summary>
            Gets the task's actions.
            </summary>
            <value>The task's actions.</value>
        </member>
        <member name="T:Cake.Core.Annotations.CakeAliasAttribute">
            <summary>
            An attribute used to mark script aliases.
            </summary>
        </member>
        <member name="T:Cake.Core.Annotations.CakeAliasCategoryAttribute">
            <summary>
            An attribute used for documentation of alias methods/properties.
            </summary>
        </member>
        <member name="M:Cake.Core.Annotations.CakeAliasCategoryAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Annotations.CakeAliasCategoryAttribute"/> class.
            </summary>
            <param name="name">The category name.</param>
        </member>
        <member name="P:Cake.Core.Annotations.CakeAliasCategoryAttribute.Name">
            <summary>
            Gets the category name.
            </summary>
            <value>The category name.</value>
        </member>
        <member name="T:Cake.Core.Annotations.CakeNamespaceImportAttribute">
            <summary>
            An attribute used to hint Cake about additional namespaces that need
            to be imported for an alias to work. This attribute can mark an
            extension method or the extension method class.
            </summary>
        </member>
        <member name="M:Cake.Core.Annotations.CakeNamespaceImportAttribute.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Annotations.CakeNamespaceImportAttribute"/> class.
            </summary>
            <param name="namespace">The namespace.</param>
        </member>
        <member name="P:Cake.Core.Annotations.CakeNamespaceImportAttribute.Namespace">
            <summary>
            Gets the namespace.
            </summary>
            <value>The namespace.</value>
        </member>
        <member name="T:Cake.Core.Annotations.CakePropertyAliasAttribute">
            <summary>
            An attribute used to mark script property aliases.
            </summary>
        </member>
        <member name="P:Cake.Core.Annotations.CakePropertyAliasAttribute.Cache">
            <summary>
            Gets or sets a value indicating whether the result of the property alias method should be cached.
            Indicates .
            </summary>
            <value>
              <c>true</c> if cache; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.CakeContext">
            <summary>
            Implementation of <see cref="T:Cake.Core.ICakeContext"/>.
            </summary>
        </member>
        <member name="T:Cake.Core.ICakeContext">
            <summary>
            Represents a context for scripts and script aliases.
            </summary>
        </member>
        <member name="P:Cake.Core.ICakeContext.FileSystem">
            <summary>
            Gets the file system.
            </summary>
            <value>The file system.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>The environment.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.Globber">
            <summary>
            Gets the globber.
            </summary>
            <value>The globber.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.Log">
            <summary>
            Gets the log.
            </summary>
            <value>The log.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.ProcessRunner">
            <summary>
            Gets the process runner.
            </summary>
            <value>The process runner.</value>
        </member>
        <member name="P:Cake.Core.ICakeContext.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>The registry.</value>
        </member>
        <member name="M:Cake.Core.CakeContext.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog,Cake.Core.ICakeArguments,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeContext"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="log">The log.</param>
            <param name="arguments">The arguments.</param>
            <param name="processRunner">The process runner.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="P:Cake.Core.CakeContext.FileSystem">
            <summary>
            Gets the file system.
            </summary>
            <value>
            The file system.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.Environment">
            <summary>
            Gets the environment.
            </summary>
            <value>
            The environment.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.Globber">
            <summary>
            Gets the globber.
            </summary>
            <value>
            The globber.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.Log">
            <summary>
            Gets the log.
            </summary>
            <value>
            The log.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.Arguments">
            <summary>
            Gets the arguments.
            </summary>
            <value>
            The arguments.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.ProcessRunner">
            <summary>
            Gets the process runner.
            </summary>
            <value>
            The process runner.
            </value>
        </member>
        <member name="P:Cake.Core.CakeContext.Registry">
            <summary>
            Gets the registry.
            </summary>
            <value>
            The registry.
            </value>
        </member>
        <member name="T:Cake.Core.CakeEngine">
            <summary>
            The Cake execution engine.
            </summary>
        </member>
        <member name="T:Cake.Core.ICakeEngine">
            <summary>
            Represents the Cake engine.
            </summary>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RegisterTask(System.String)">
            <summary>
            Registers a new task.
            </summary>
            <param name="name">The name of the task.</param>
            <returns>A <see cref="T:Cake.Core.CakeTaskBuilder`1"/>.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RegisterSetupAction(System.Action)">
            <summary>
            Allows registration of an action that's executed before any tasks are run.
            If setup fails, no tasks will be executed but teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RegisterTeardownAction(System.Action)">
            <summary>
            Allows registration of an action that's executed after all other tasks have been run.
            If a setup action or a task fails with or without recovery, the specified teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RunTarget(Cake.Core.ICakeContext,Cake.Core.IExecutionStrategy,System.String)">
            <summary>
            Runs the specified target using the specified <see cref="T:Cake.Core.IExecutionStrategy"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="strategy">The execution strategy.</param>
            <param name="target">The target to run.</param>
            <returns>The resulting report.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RegisterTaskSetupAction(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext})">
            <summary>
            Allows registration of an action that's executed before each task is run.
            If the task setup fails, the task will not be executed but the task's teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.ICakeEngine.RegisterTaskTeardownAction(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext})">
            <summary>
            Allows registration of an action that's executed after each task has been run.
            If a task setup action or a task fails with or without recovery, the specified task teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="P:Cake.Core.ICakeEngine.Tasks">
            <summary>
            Gets all registered tasks.
            </summary>
            <value>The registered tasks.</value>
        </member>
        <member name="M:Cake.Core.CakeEngine.#ctor(Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeEngine"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Core.CakeEngine.RegisterTask(System.String)">
            <summary>
            Creates and registers a new <see cref="T:Cake.Core.ActionTask"/>.
            </summary>
            <param name="name">The name of the task.</param>
            <returns>
            A <see cref="T:Cake.Core.CakeTaskBuilder`1"/> used to configure the task.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEngine.RegisterSetupAction(System.Action)">
            <summary>
            Allows registration of an action that's executed before any tasks are run.
            If setup fails, no tasks will be executed but teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.CakeEngine.RegisterTeardownAction(System.Action)">
            <summary>
            Allows registration of an action that's executed after all other tasks have been run.
            If a setup action or a task fails with or without recovery, the specified teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.CakeEngine.RunTarget(Cake.Core.ICakeContext,Cake.Core.IExecutionStrategy,System.String)">
            <summary>
            Runs the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="strategy">The execution strategy.</param>
            <param name="target">The target to run.</param>
            <returns>The resulting report.</returns>
        </member>
        <member name="M:Cake.Core.CakeEngine.RegisterTaskSetupAction(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext})">
            <summary>
            Allows registration of an action that's executed before each task is run.
            If the task setup fails, the task will not be executed but the task's teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.CakeEngine.RegisterTaskTeardownAction(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext})">
            <summary>
            Allows registration of an action that's executed after each task has been run.
            If a task setup action or a task fails with or without recovery, the specified task teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="P:Cake.Core.CakeEngine.Tasks">
            <summary>
            Gets all registered tasks.
            </summary>
            <value>The registered tasks.</value>
        </member>
        <member name="T:Cake.Core.CakeException">
            <summary>
            Represent errors that occur during script execution.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeException"/> class.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeException"/> class.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Cake.Core.CakeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeException"/> class.
            </summary>
            <param name="message">The error message that explains the reason for the exception.</param>
            <param name="innerException">The exception that is the cause of the current exception, or a null reference (Nothing in Visual Basic) if no inner exception is specified.</param>
        </member>
        <member name="M:Cake.Core.CakeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeException"/> class.
            </summary>
            <param name="info">The <see cref="T:System.Runtime.Serialization.SerializationInfo"/> that holds the serialized object data about the exception being thrown.</param>
            <param name="context">The <see cref="T:System.Runtime.Serialization.StreamingContext"/> that contains contextual information about the source or destination.</param>
        </member>
        <member name="T:Cake.Core.CakeReport">
            <summary>
            Contains information about tasks that were executed in a script.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeReport.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeReport"/> class.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeReport.Add(System.String,System.TimeSpan)">
            <summary>
            Adds a task result to the report.
            </summary>
            <param name="task">The task.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Cake.Core.CakeReport.AddSkipped(System.String)">
            <summary>
            Adds a skipped task result to the report.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="M:Cake.Core.CakeReport.AddDelegated(System.String,System.TimeSpan)">
            <summary>
            Adds a delegated task result to the report.
            </summary>
            <param name="task">The task.</param>
            <param name="span">The span.</param>
        </member>
        <member name="M:Cake.Core.CakeReport.Add(System.String,System.TimeSpan,Cake.Core.CakeTaskExecutionStatus)">
            <summary>
            Adds a task result to the report.
            </summary>
            <param name="task">The task.</param>
            <param name="span">The span.</param>
            <param name="executionStatus">The execution status.</param>
        </member>
        <member name="M:Cake.Core.CakeReport.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeReport.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            Returns an enumerator that iterates through a collection.
            </summary>
            <returns>
            An <see cref="T:System.Collections.IEnumerator" /> object that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Cake.Core.CakeReport.IsEmpty">
            <summary>
            Gets a value indicating whether the report is empty.
            </summary>
            <value>
              <c>true</c> if this report is empty; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.Annotations.CakeMethodAliasAttribute">
            <summary>
            An attribute used to mark script method aliases.
            </summary>
        </member>
        <member name="T:Cake.Core.CakeReportEntry">
            <summary>
            Represents an entry in a <see cref="T:Cake.Core.CakeReport"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeReportEntry.#ctor(System.String,System.TimeSpan)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeReportEntry"/> class.
            </summary>
            <param name="taskName">The name of the task.</param>
            <param name="duration">The duration.</param>
        </member>
        <member name="M:Cake.Core.CakeReportEntry.#ctor(System.String,System.TimeSpan,Cake.Core.CakeTaskExecutionStatus)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeReportEntry"/> class.
            </summary>
            <param name="taskName">The name of the task.</param>
            <param name="duration">The duration.</param>
            <param name="executionStatus">The execution status.</param>
        </member>
        <member name="P:Cake.Core.CakeReportEntry.TaskName">
            <summary>
            Gets the task name.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Cake.Core.CakeReportEntry.Duration">
            <summary>
            Gets the duration the task ran for.
            </summary>
            <value>The duration the task ran for.</value>
        </member>
        <member name="P:Cake.Core.CakeReportEntry.ExecutionStatus">
            <summary>
            Gets the task execution status.
            </summary>
            <value>The execution status.</value>
        </member>
        <member name="T:Cake.Core.CakeTaskBuilder`1">
            <summary>
            Allows configuration to be performed for a registered <see cref="T:Cake.Core.CakeTask"/>.
            </summary>
            <typeparam name="T">The task type.</typeparam>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilder`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeTaskBuilder`1"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Cake.Core.CakeTaskBuilder`1.Task">
            <summary>
            Gets the task being configured.
            </summary>
            <value>The task being configured.</value>
        </member>
        <member name="T:Cake.Core.CakeTaskBuilderExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.CakeTaskBuilder`1"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.IsDependentOn``1(Cake.Core.CakeTaskBuilder{``0},System.String)">
            <summary>
            Creates a dependency between two tasks.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The task builder.</param>
            <param name="name">The name of the dependent task.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.WithCriteria``1(Cake.Core.CakeTaskBuilder{``0},System.Boolean)">
            <summary>
            Adds a criteria that has to be fulfilled for the task to run.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The task builder.</param>
            <param name="criteria">The criteria.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.WithCriteria``1(Cake.Core.CakeTaskBuilder{``0},System.Func{System.Boolean})">
            <summary>
            Adds a criteria that has to be fulfilled for the task to run.
            The criteria is evaluated when traversal of the graph occurs.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The task builder.</param>
            <param name="criteria">The criteria.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.WithCriteria``1(Cake.Core.CakeTaskBuilder{``0},System.Func{Cake.Core.ICakeContext,System.Boolean})">
            <summary>
            Adds a criteria that has to be fulfilled for the task to run.
            The criteria is evaluated when traversal of the graph occurs.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The task builder.</param>
            <param name="criteria">The criteria.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.Does(Cake.Core.CakeTaskBuilder{Cake.Core.ActionTask},System.Action)">
            <summary>
            Adds an action to be executed when the task is invoked.
            </summary>
            <param name="builder">The task builder.</param>
            <param name="action">The action.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.Does(Cake.Core.CakeTaskBuilder{Cake.Core.ActionTask},System.Action{Cake.Core.ICakeContext})">
            <summary>
            Adds an action to be executed when the task is invoked.
            </summary>
            <param name="builder">The task builder.</param>
            <param name="action">The action.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.Description``1(Cake.Core.CakeTaskBuilder{``0},System.String)">
            <summary>
            Adds a description to the task.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The task builder.</param>
            <param name="description">The description.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.ContinueOnError(Cake.Core.CakeTaskBuilder{Cake.Core.ActionTask})">
            <summary>
            Adds an indication to the task that a thrown exception will not halt the script execution.
            </summary>
            <param name="builder">The task builder.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.OnError``1(Cake.Core.CakeTaskBuilder{``0},System.Action)">
            <summary>
            Adds an error handler to be executed if an exception occurs in the task.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.OnError``1(Cake.Core.CakeTaskBuilder{``0},System.Action{System.Exception})">
            <summary>
            Adds an error handler to be executed if an exception occurs in the task.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="errorHandler">The error handler.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.Finally``1(Cake.Core.CakeTaskBuilder{``0},System.Action)">
            <summary>
            Adds a finally handler to be executed after the task have finished executing.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="finallyHandler">The finally handler.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.CakeTaskBuilderExtensions.ReportError``1(Cake.Core.CakeTaskBuilder{``0},System.Action{System.Exception})">
            <summary>
            Adds an error reporter for the task to be executed when an exception is thrown from the task.
            This action is invoked before the error handler, but gives no opportunity to recover from the error.
            </summary>
            <typeparam name="T">The task type.</typeparam>
            <param name="builder">The builder.</param>
            <param name="errorReporter">The finally handler.</param>
            <returns>The same <see cref="T:Cake.Core.CakeTaskBuilder`1"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Core.CakeTaskExecutionStatus">
            <summary>
            The execution status of a <see cref="T:Cake.Core.CakeTask"/>.
            </summary>
        </member>
        <member name="F:Cake.Core.CakeTaskExecutionStatus.Executed">
            <summary>
            The task was executed.
            </summary>
        </member>
        <member name="F:Cake.Core.CakeTaskExecutionStatus.Delegated">
            <summary>
            The task delegated execution.
            </summary>
        </member>
        <member name="F:Cake.Core.CakeTaskExecutionStatus.Skipped">
            <summary>
            The task was skipped.
            </summary>
        </member>
        <member name="T:Cake.Core.CakeTaskExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.CakeTask"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeTaskExtensions.AddCriteria(Cake.Core.CakeTask,System.Func{System.Boolean})">
            <summary>
            Adds a criteria to the task that is invoked when the task is invoked.
            </summary>
            <param name="task">The task.</param>
            <param name="criteria">The criteria.</param>
        </member>
        <member name="T:Cake.Core.DefaultExecutionStrategy">
            <summary>
            The default execution strategy.
            </summary>
        </member>
        <member name="T:Cake.Core.IExecutionStrategy">
            <summary>
            Represents a task execution strategy.
            </summary>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.PerformSetup(System.Action)">
            <summary>
            Performs the setup.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.PerformTeardown(System.Action)">
            <summary>
            Performs the teardown.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.Execute(Cake.Core.CakeTask,Cake.Core.ICakeContext)">
            <summary>
            Executes the specified task.
            </summary>
            <param name="task">The task to execute.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.Skip(Cake.Core.CakeTask)">
            <summary>
            Skips the specified task.
            </summary>
            <param name="task">The task to skip.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.ReportErrors(System.Action{System.Exception},System.Exception)">
            <summary>
            Executes the error reporter.
            </summary>
            <param name="action">The action.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.HandleErrors(System.Action{System.Exception},System.Exception)">
            <summary>
            Executes the error handler.
            </summary>
            <param name="action">The action.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.InvokeFinally(System.Action)">
            <summary>
            Invokes the finally handler.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.PerformTaskSetup(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext},Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext)">
            <summary>
            Performs the specified setup action before each task is invoked.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <param name="setupContext">The setup context.</param>
        </member>
        <member name="M:Cake.Core.IExecutionStrategy.PerformTaskTeardown(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext},Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext)">
            <summary>
            Performs the specified teardown action after each task is invoked.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <param name="teardownContext">The teardown context.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.#ctor(Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.DefaultExecutionStrategy"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.PerformSetup(System.Action)">
            <summary>
            Performs the setup.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.PerformTeardown(System.Action)">
            <summary>
            Performs the teardown.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.Execute(Cake.Core.CakeTask,Cake.Core.ICakeContext)">
            <summary>
            Executes the specified task.
            </summary>
            <param name="task">The task to execute.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.Skip(Cake.Core.CakeTask)">
            <summary>
            Skips the specified task.
            </summary>
            <param name="task">The task to skip.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.ReportErrors(System.Action{System.Exception},System.Exception)">
            <summary>
            Executes the error reporter.
            </summary>
            <param name="action">The action.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.HandleErrors(System.Action{System.Exception},System.Exception)">
            <summary>
            Executes the error handler.
            </summary>
            <param name="action">The action.</param>
            <param name="exception">The exception.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.InvokeFinally(System.Action)">
            <summary>
            Invokes the finally handler.
            </summary>
            <param name="action">The action.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.PerformTaskSetup(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext},Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext)">
            <summary>
            Performs the specified setup action before each task is invoked.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <param name="setupContext">The setup context.</param>
        </member>
        <member name="M:Cake.Core.DefaultExecutionStrategy.PerformTaskTeardown(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext},Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext)">
            <summary>
            Performs the specified teardown action after each task is invoked.
            </summary>
            <param name="action">The action.</param>
            <param name="context">The context.</param>
            <param name="teardownContext">The teardown context.</param>
        </member>
        <member name="T:Cake.Core.Diagnostics.ICakeLog">
            <summary>
            Represents a log.
            </summary>
        </member>
        <member name="M:Cake.Core.Diagnostics.ICakeLog.Write(Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the
            log using the specified verbosity, log level and format information.
            </summary>
            <param name="verbosity">The verbosity.</param>
            <param name="level">The log level.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="P:Cake.Core.Diagnostics.ICakeLog.Verbosity">
            <summary>
            Gets the verbosity.
            </summary>
            <value>The verbosity.</value>
        </member>
        <member name="T:Cake.Core.Diagnostics.LogAction">
            <summary>
            Delegate representing lazy log action.
            </summary>
            <param name="actionEntry">Proxy to log.</param>
        </member>
        <member name="T:Cake.Core.Diagnostics.LogActionEntry">
            <summary>
            Delegate representing lazy log entry.
            </summary>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="T:Cake.Core.Diagnostics.LogExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.Diagnostics.ICakeLog"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Error(Cake.Core.Diagnostics.ICakeLog,System.String,System.Object[])">
            <summary>
            Writes an error message to the log using the specified format information.
            </summary>
            <param name="log">The log.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Error(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,System.String,System.Object[])">
            <summary>
            Writes an error message to the log using the specified verbosity and format information.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Error(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an error message to the log using the specified verbosity and log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Error(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an error message to the log using the specified log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Warning(Cake.Core.Diagnostics.ICakeLog,System.String,System.Object[])">
            <summary>
            Writes a warning message to the log using the specified format information.
            </summary>
            <param name="log">The log.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Warning(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,System.String,System.Object[])">
            <summary>
            Writes a warning message to the log using the specified verbosity and format information.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Warning(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a warning message to the log using the specified log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Warning(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a warning message to the log using the specified verbosity and log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Information(Cake.Core.Diagnostics.ICakeLog,System.String,System.Object[])">
            <summary>
            Writes an informational message to the log using the specified format information.
            </summary>
            <param name="log">The log.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Information(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,System.String,System.Object[])">
            <summary>
            Writes an informational message to the log using the specified verbosity and format information.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Information(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an informational message to the log using the specified verbosity and log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Information(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an informational message to the log using the specified log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Verbose(Cake.Core.Diagnostics.ICakeLog,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log using the specified format information.
            </summary>
            <param name="log">The log.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Verbose(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log using the specified verbosity and format information.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Verbose(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a verbose message to the log using the specified log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Verbose(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a verbose message to the log using the specified verbosity and log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Debug(Cake.Core.Diagnostics.ICakeLog,System.String,System.Object[])">
            <summary>
            Writes a debug message to the log using the specified format information.
            </summary>
            <param name="log">The log.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Debug(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,System.String,System.Object[])">
            <summary>
            Writes a debug message to the log using the specified verbosity and format information.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Debug(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a debug message to the log using the specified log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Debug(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a debug message to the log using the specified verbosity and log message action.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="M:Cake.Core.Diagnostics.LogExtensions.Write(Cake.Core.Diagnostics.ICakeLog,Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogLevel,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a message to the log using the specified verbosity, log level and log action delegate.
            Evaluates log message only if the verbosity is equal to or more verbose than the log's verbosity.
            </summary>
            <param name="log">The log.</param>
            <param name="verbosity">The verbosity.</param>
            <param name="level">The log level.</param>
            <param name="logAction">The log action.</param>
        </member>
        <member name="T:Cake.Core.Diagnostics.LogLevel">
            <summary>
            Represents a log level.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Fatal">
            <summary>
            Severe errors that cause premature termination.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Error">
            <summary>
            Other runtime errors or unexpected conditions.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Warning">
            <summary>
            Use of deprecated APIs, poor use of API, 'almost' errors, other runtime
            situations that are undesirable or unexpected, but not necessarily "wrong".
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Information">
            <summary>
            Interesting runtime events.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Verbose">
            <summary>
            Detailed information on the flow through the system.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.LogLevel.Debug">
            <summary>
            Most detailed information.
            </summary>
        </member>
        <member name="T:Cake.Core.Diagnostics.NullLog">
            <summary>
            A log that discards messages written to it.
            </summary>
        </member>
        <member name="M:Cake.Core.Diagnostics.NullLog.Write(Cake.Core.Diagnostics.Verbosity,Cake.Core.Diagnostics.LogLevel,System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the
            log using the specified verbosity, log level and format information.
            </summary>
            <param name="verbosity">The verbosity.</param>
            <param name="level">The log level.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An array of objects to write using format.</param>
        </member>
        <member name="P:Cake.Core.Diagnostics.NullLog.Verbosity">
            <summary>
            Gets the verbosity.
            </summary>
            <value>The verbosity.</value>
        </member>
        <member name="T:Cake.Core.Diagnostics.Verbosity">
            <summary>
            Represents verbosity.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.Verbosity.Quiet">
            <summary>
            Quiet verbosity.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.Verbosity.Minimal">
            <summary>
            Minimal verbosity.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.Verbosity.Normal">
            <summary>
            Normal verbosity.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.Verbosity.Verbose">
            <summary>
            Verbose verbosity.
            </summary>
        </member>
        <member name="F:Cake.Core.Diagnostics.Verbosity.Diagnostic">
            <summary>
            Diagnostic verbosity.
            </summary>
        </member>
        <member name="T:Cake.Core.ConsoleExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.IConsole"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.ConsoleExtensions.WriteLine(Cake.Core.IConsole)">
            <summary>
            Writes an empty line to the console output.
            </summary>
            <param name="console">The console to write to.</param>
        </member>
        <member name="M:Cake.Core.ConsoleExtensions.WriteErrorLine(Cake.Core.IConsole)">
            <summary>
            Writes an empty line to the console error output.
            </summary>
            <param name="console">The console to write to.</param>
        </member>
        <member name="T:Cake.Core.DirectoryExtensions">
            <summary>
            Contains extensions for <see cref="T:Cake.Core.IO.IDirectory"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.DirectoryExtensions.GetDirectories(Cake.Core.IO.IDirectory,System.String,Cake.Core.IO.SearchScope,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Gets directories matching the specified filter and scope, with option to exclude hidden directories.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <param name="predicate">Predicate used to filter directories based on file system information.</param>
            <returns>The directories matching the specified filter, scope and predicate.</returns>
        </member>
        <member name="M:Cake.Core.DirectoryExtensions.GetDirectories(Cake.Core.IO.IDirectory,System.String,Cake.Core.IO.SearchScope,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean},System.Action{Cake.Core.IO.IFileSystemInfo})">
            <summary>
            Gets directories matching the specified filter and scope, with option to exclude hidden directories.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <param name="predicate">Predicate used to filter directories based on file system information.</param>
            <param name="action">Callback if directory gets filtered by <paramref name="predicate"/>.</param>
            <returns>The directories matching the specified filter, scope and predicate.</returns>
        </member>
        <member name="M:Cake.Core.DirectoryExtensions.GetFiles(Cake.Core.IO.IDirectory,System.String,Cake.Core.IO.SearchScope,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Gets files matching the specified filter and scope.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <param name="predicate">Predicate used to filter files based on file system information.</param>
            <returns>The files matching the specified filter, scope and predicate.</returns>
        </member>
        <member name="M:Cake.Core.DirectoryExtensions.GetFiles(Cake.Core.IO.IDirectory,System.String,Cake.Core.IO.SearchScope,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean},System.Action{Cake.Core.IO.IFileSystemInfo})">
            <summary>
            Gets files matching the specified filter and scope.
            </summary>
            <param name="directory">The directory.</param>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <param name="predicate">Predicate used to filter files based on file system information.</param>
            <param name="action">Callback if file gets filtered by <paramref name="predicate"/>.</param>
            <returns>The files matching the specified filter, scope and predicate.</returns>
        </member>
        <member name="T:Cake.Core.MethodInfoExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Reflection.MethodInfo"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.MethodInfoExtensions.GetSignature(System.Reflection.MethodInfo,System.Boolean,System.Boolean)">
            <summary>
            Gets the signature for a method.
            </summary>
            <param name="method">The method.</param>
            <param name="includeMethodNamespace">if set to <c>true</c>, include method namespace.</param>
            <param name="includeParameterNamespace">if set to <c>true</c>, include parameter namespace.</param>
            <returns>The method signature.</returns>
        </member>
        <member name="M:Cake.Core.MethodInfoExtensions.GetFullName(System.Reflection.MethodInfo)">
            <summary>
            Gets the full name of a method.
            </summary>
            <param name="method">The method to get the full name for.</param>
            <returns>The full name.</returns>
        </member>
        <member name="M:Cake.Core.MethodInfoExtensions.GetNamespace(System.Reflection.MethodInfo)">
            <summary>
            Gets the namespace of the method.
            </summary>
            <param name="method">The method.</param>
            <returns>The namespace of the method.</returns>
        </member>
        <member name="T:Cake.Core.ProcessArgumentListExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.Append(Cake.Core.IO.ProcessArgumentBuilder,System.String)">
            <summary>
            Appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="text">The text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.Append(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.Object[])">
            <summary>
            Formats and appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">A composite format string.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String)">
            <summary>
            Quotes and appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="text">The text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.Object[])">
            <summary>
            Formats, quotes and appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">A composite format string to be quoted and appended.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuoted(Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified argument to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="argument">The argument to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="text">The secret text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.Object[])">
            <summary>
            Formats and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">A composite format string for the secret text to be appended.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSecret(Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.IProcessArgument)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="text">The secret text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.Object[])">
            <summary>
            Formats, quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="format">A composite format string for the secret text to be quoted and appended.</param>
            <param name="args">An object array that contains zero or more objects to format.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
            <exception cref="T:System.ArgumentNullException"><paramref name="format"/> or <paramref name="args"/> is null. </exception>
            <exception cref="T:System.FormatException"><paramref name="format"/> is invalid.-or- The index of a format item is less than zero, or greater than or equal to the length of the <paramref name="args"/> array. </exception>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitch(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String)">
            <summary>
            Appends the specified switch to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="text">The text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitch(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,System.String)">
            <summary>
            Appends the specified switch to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument.</param>
            <param name="text">The text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String)">
            <summary>
            Quotes and appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="text">The text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,System.String)">
            <summary>
            Quotes and appends the specified text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument.</param>
            <param name="text">The text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified argument to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="argument">The argument to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuoted(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified argument to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument.</param>
            <param name="argument">The argument to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="text">The secret text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,System.String)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument</param>
            <param name="text">The secret text to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="text">The secret text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendSwitchQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,System.String)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument.</param>
            <param name="text">The secret text to be quoted and appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessArgumentListExtensions.AppendQuotedSecret(Cake.Core.IO.ProcessArgumentBuilder,System.String,System.String,Cake.Core.IO.IProcessArgument)">
            <summary>
            Quotes and appends the specified secret text to the argument builder.
            </summary>
            <param name="builder">The builder.</param>
            <param name="switch">The switch preceding the text.</param>
            <param name="separator">The separator between the switch and argument</param>
            <param name="argument">The secret argument to be appended.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Core.ProcessRunnerExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.IO.IProcessRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.ProcessRunnerExtensions.Start(Cake.Core.IO.IProcessRunner,Cake.Core.IO.FilePath)">
            <summary>
            Starts a process using the specified information.
            </summary>
            <param name="processRunner">The process runner.</param>
            <param name="filePath">The file name such as an application or document with which to start the process.</param>
            <returns>A process handle.</returns>
        </member>
        <member name="T:Cake.Core.ProcessSettingsExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.IO.ProcessSettings"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.ProcessSettingsExtensions.WithArguments(Cake.Core.IO.ProcessSettings,System.Action{Cake.Core.IO.ProcessArgumentBuilder})">
            <summary>
            Sets the arguments for the process
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The action used to set arguments.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessSettingsExtensions.UseWorkingDirectory(Cake.Core.IO.ProcessSettings,Cake.Core.IO.DirectoryPath)">
            <summary>
            Sets the working directory for the process to be started.
            </summary>
            <param name="settings">The process settings.</param>
            <param name="path">The working directory for the process to be started.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessSettingsExtensions.SetRedirectStandardOutput(Cake.Core.IO.ProcessSettings,System.Boolean)">
            <summary>
            Sets a value indicating whether the output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardOutput"/> stream.
            </summary>
            <param name="settings">The process settings.</param>
            <param name="redirect">true if output should be written to <see cref="P:System.Diagnostics.Process.StandardOutput"/>; otherwise, false. The default is false.</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Core.ProcessSettingsExtensions.SetTimeout(Cake.Core.IO.ProcessSettings,System.Int32)">
            <summary>
            Sets the optional timeout for process execution
            </summary>
            <param name="settings">The process settings.</param>
            <param name="timeout">The timeout duration</param>
            <returns>The same <see cref="T:Cake.Core.IO.ProcessSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Core.StringExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.String"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.StringExtensions.Quote(System.String)">
            <summary>
            Quotes the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to quote.</param>
            <returns>A quoted string.</returns>
        </member>
        <member name="M:Cake.Core.StringExtensions.UnQuote(System.String)">
            <summary>
            Unquote the specified <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to unquote.</param>
            <returns>An unquoted string.</returns>
        </member>
        <member name="M:Cake.Core.StringExtensions.SplitLines(System.String)">
            <summary>
            Splits the <see cref="T:System.String"/> into lines.
            </summary>
            <param name="content">The string to split.</param>
            <returns>The lines making up the provided string.</returns>
        </member>
        <member name="M:Cake.Core.StringExtensions.NormalizeLineEndings(System.String)">
            <summary>
            Normalizes the line endings in a <see cref="T:System.String"/>.
            </summary>
            <param name="value">The string to normalize line endings in.</param>
            <returns>A <see cref="T:System.String"/> with normalized line endings.</returns>
        </member>
        <member name="T:Cake.Core.TypeExtensions">
            <summary>
            Contains extension methods for <see cref="T:System.Type"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.TypeExtensions.IsStatic(System.Type)">
            <summary>
            Determines whether the specified <see cref="T:System.Type"/> is static.
            </summary>
            <param name="type">The type.</param>
            <returns>Whether or not the specified type is static</returns>
        </member>
        <member name="M:Cake.Core.TypeExtensions.GetFullName(System.Type,System.Boolean)">
            <summary>
            Gets the full name of a <see cref="T:System.Type"/>.
            </summary>
            <param name="type">The type.</param>
            <param name="includeNamespace">if set to <c>true</c> then namespace is included.</param>
            <returns>The full name of a type</returns>
        </member>
        <member name="T:Cake.Core.ICakeArguments">
            <summary>
            Represents arguments passed to script.
            </summary>
        </member>
        <member name="M:Cake.Core.ICakeArguments.SetArguments(System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Initializes the argument list.
            </summary>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Cake.Core.ICakeArguments.HasArgument(System.String)">
            <summary>
            Determines whether or not the specified argument exist.
            </summary>
            <param name="name">The argument name.</param>
            <returns>
              <c>true</c> if the argument exist; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cake.Core.ICakeArguments.GetArgument(System.String)">
            <summary>
            Gets an argument.
            </summary>
            <param name="name">The argument name.</param>
            <returns>The argument value.</returns>
        </member>
        <member name="T:Cake.Core.ICakeReportPrinter">
            <summary>
            Represents a report printer.
            </summary>
        </member>
        <member name="M:Cake.Core.ICakeReportPrinter.Write(Cake.Core.CakeReport)">
            <summary>
            Writes the specified report to a target.
            </summary>
            <param name="report">The report to write.</param>
        </member>
        <member name="T:Cake.Core.IConsole">
            <summary>
            Represents console output.
            </summary>
        </member>
        <member name="M:Cake.Core.IConsole.Write(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the
            console output using the specified format information.
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.IConsole.WriteLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed
            by the current line terminator, to the console output using the specified
            format information.
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.IConsole.WriteError(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects to the
            console error output using the specified format information.
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.IConsole.WriteErrorLine(System.String,System.Object[])">
            <summary>
            Writes the text representation of the specified array of objects, followed
            by the current line terminator, to the console error output using the
            specified format information.
            </summary>
            <param name="format">A composite format string</param>
            <param name="arg">An array of objects to write using format.</param>
        </member>
        <member name="M:Cake.Core.IConsole.ResetColor">
            <summary>
            Sets the foreground and background console colors to their defaults.
            </summary>
        </member>
        <member name="P:Cake.Core.IConsole.ForegroundColor">
            <summary>
            Gets or sets the foreground color.
            </summary>
            <value>The foreground color</value>
        </member>
        <member name="P:Cake.Core.IConsole.BackgroundColor">
            <summary>
            Gets or sets the background color.
            </summary>
            <value>The background color</value>
        </member>
        <member name="T:Cake.Core.IO.Arguments.SwitchArgument">
            <summary>
            Represents a argument preceded by a switch.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.IProcessArgument">
            <summary>
             Represents a process argument.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IProcessArgument.Render">
            <summary>
            Render the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be included.
            </summary>
            <returns>A string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.IProcessArgument.RenderSafe">
            <summary>
            Renders the argument as a <see cref="T:System.String"/>.
            Sensitive information will be redacted.
            </summary>
            <returns>A safe string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SwitchArgument.#ctor(System.String,Cake.Core.IO.IProcessArgument,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Arguments.SwitchArgument"/> class.
            </summary>
            <param name="switch">The switch.</param>
            <param name="argument">The argument.</param>
            <param name="separator">The separator between the <paramref name="switch"/> and the <paramref name="argument"/>.</param>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SwitchArgument.Render">
            <summary>
            Render the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be included.
            </summary>
            <returns>
            A string representation of the argument.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SwitchArgument.RenderSafe">
            <summary>
            Renders the argument as a <see cref="T:System.String"/>.
             The secret text will be redacted.
            </summary>
            <returns>A safe string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SwitchArgument.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>
            A string that represents the current object.
            </returns>
        </member>
        <member name="T:Cake.Core.IO.DirectoryPathCollection">
            <summary>
            A collection of <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.#ctor(Cake.Core.IO.PathComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.#ctor(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath},Cake.Core.IO.PathComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> class.
            </summary>
            <param name="paths">The paths.</param>
            <param name="comparer">The comparer.</param>
            <exception cref="T:System.ArgumentNullException"><paramref name="comparer"/> is <c>null</c>.</exception>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.Add(Cake.Core.IO.DirectoryPath)">
            <summary>
            Adds the specified path to the collection.
            </summary>
            <param name="path">The path to add.</param>
            <returns>
              <c>true</c> if the path was added; <c>false</c> if the path was already present.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.Add(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Adds the specified paths to the collection.
            </summary>
            <param name="paths">The paths to add.</param>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.Remove(Cake.Core.IO.DirectoryPath)">
            <summary>
            Removes the specified path from the collection.
            </summary>
            <param name="path">The path to remove.</param>
            <returns>
              <c>true</c> if the path was removed; <c>false</c> if the path was not found in the collection.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.Remove(System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Removes the specified paths from the collection.
            </summary>
            <param name="paths">The paths to remove.</param>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.op_Addition(Cake.Core.IO.DirectoryPathCollection,Cake.Core.IO.DirectoryPath)">
            <summary>Adds a path to the collection.</summary>
            <param name="collection">The collection.</param>
            <param name="path">The path to add.</param>
            <returns>A new <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> that contains the provided path as
            well as the paths in the original collection.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.op_Addition(Cake.Core.IO.DirectoryPathCollection,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>Adds multiple paths to the collection.</summary>
            <param name="collection">The collection.</param>
            <param name="paths">The paths to add.</param>
            <returns>A new <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> with the content of both collections.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.op_Subtraction(Cake.Core.IO.DirectoryPathCollection,Cake.Core.IO.DirectoryPath)">
            <summary>
            Removes a path from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="path">The path to remove.</param>
            <returns>A new <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> that do not contain the provided path.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.op_Subtraction(Cake.Core.IO.DirectoryPathCollection,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Removes multiple paths from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="paths">The paths to remove.</param>
            <returns>A new <see cref="T:Cake.Core.IO.DirectoryPathCollection"/> that do not contain the provided paths.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPathCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Cake.Core.IO.DirectoryPathCollection.Count">
            <summary>
            Gets the number of directories in the collection.
            </summary>
            <value>The number of directories in the collection.</value>
        </member>
        <member name="T:Cake.Core.IO.FilePathCollection">
            <summary>
            A collection of <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.#ctor(Cake.Core.IO.PathComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.FilePathCollection"/> class.
            </summary>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.#ctor(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.PathComparer)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.FilePathCollection"/> class.
            </summary>
            <param name="paths">The paths.</param>
            <param name="comparer">The comparer.</param>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.Add(Cake.Core.IO.FilePath)">
            <summary>
            Adds the specified path to the collection.
            </summary>
            <param name="path">The path to add.</param>
            <returns>
              <c>true</c> if the path was added; <c>false</c> if the path was already present.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.Add(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Adds the specified paths to the collection.
            </summary>
            <param name="paths">The paths to add.</param>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.Remove(Cake.Core.IO.FilePath)">
            <summary>
            Removes the specified path from the collection.
            </summary>
            <param name="path">The path to remove.</param>
            <returns>
              <c>true</c> if the path was removed; <c>false</c> if the path was not found in the collection.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.Remove(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Removes the specified paths from the collection.
            </summary>
            <param name="paths">The paths to remove.</param>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.op_Addition(Cake.Core.IO.FilePathCollection,Cake.Core.IO.FilePath)">
            <summary>Adds a path to the collection.</summary>
            <param name="collection">The collection.</param>
            <param name="path">The path to add.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePathCollection"/> that contains the provided path as
            well as the paths in the original collection.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.op_Addition(Cake.Core.IO.FilePathCollection,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>Adds multiple paths to the collection.</summary>
            <param name="collection">The collection.</param>
            <param name="paths">The paths to add.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePathCollection"/> with the content of both collections.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.op_Subtraction(Cake.Core.IO.FilePathCollection,Cake.Core.IO.FilePath)">
            <summary>
            Removes a path from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="path">The path to remove.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePathCollection"/> that do not contain the provided path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.op_Subtraction(Cake.Core.IO.FilePathCollection,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Removes multiple paths from the collection.
            </summary>
            <param name="collection">The collection.</param>
            <param name="paths">The paths to remove.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePathCollection"/> that do not contain the provided paths.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePathCollection.GetEnumerator">
            <summary>
            Returns an enumerator that iterates through the collection.
            </summary>
            <returns>
            A <see cref="T:System.Collections.Generic.IEnumerator`1" /> that can be used to iterate through the collection.
            </returns>
        </member>
        <member name="P:Cake.Core.IO.FilePathCollection.Count">
            <summary>
            Gets the number of files in the collection.
            </summary>
            <value>The number of files in the collection.</value>
        </member>
        <member name="T:Cake.Core.IO.FileExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Core.IO.IFile"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.FileExtensions.Open(Cake.Core.IO.IFile,System.IO.FileMode)">
            <summary>
            Opens the file using the specified options.
            </summary>
            <param name="file">The file.</param>
            <param name="mode">The mode.</param>
            <returns>A <see cref="T:System.IO.Stream"/> to the file.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileExtensions.Open(Cake.Core.IO.IFile,System.IO.FileMode,System.IO.FileAccess)">
            <summary>
            Opens the file using the specified options.
            </summary>
            <param name="file">The file.</param>
            <param name="mode">The mode.</param>
            <param name="access">The access.</param>
            <returns>A <see cref="T:System.IO.Stream"/> to the file.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileExtensions.OpenRead(Cake.Core.IO.IFile)">
            <summary>
            Opens the file for reading.
            </summary>
            <param name="file">The file.</param>
            <returns>A <see cref="T:System.IO.Stream"/> to the file.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileExtensions.OpenWrite(Cake.Core.IO.IFile)">
            <summary>
            Opens the file for writing.
            If the file already exists, it will be overwritten.
            </summary>
            <param name="file">The file to be opened.</param>
            <returns>A <see cref="T:System.IO.Stream"/> to the file.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileExtensions.ReadLines(Cake.Core.IO.IFile,System.Text.Encoding)">
            <summary>
            Enumerates line in file
            </summary>
            <param name="file">The file to be read from.</param>
            <param name="encoding">The encoding that is applied to the content of the file.</param>
            <returns>A <see cref="T:System.Collections.Generic.IEnumerable`1"/> of file line content</returns>
        </member>
        <member name="T:Cake.Core.IO.FileSystemExtensions">
            <summary>
            Contains extensions for <see cref="T:Cake.Core.IO.IFileSystem"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.FileSystemExtensions.Exist(Cake.Core.IO.IFileSystem,Cake.Core.IO.FilePath)">
            <summary>
            Determines if a specified <see cref="T:Cake.Core.IO.FilePath"/> exist.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="path">The path.</param>
            <returns>Whether or not the specified file exist.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileSystemExtensions.Exist(Cake.Core.IO.IFileSystem,Cake.Core.IO.DirectoryPath)">
            <summary>
            Determines if a specified <see cref="T:Cake.Core.IO.DirectoryPath"/> exist.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="path">The path.</param>
            <returns>Whether or not the specified directory exist.</returns>
        </member>
        <member name="T:Cake.Core.IO.GlobberExtensions">
            <summary>
            Contains extensions for <see cref="T:Cake.Core.IO.IGlobber"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.GlobberExtensions.GetFiles(Cake.Core.IO.IGlobber,System.String)">
            <summary>
            Gets all files matching the specified pattern.
            </summary>
            <param name="globber">The globber.</param>
            <param name="pattern">The pattern.</param>
            <returns>The files matching the specified pattern.</returns>
        </member>
        <member name="M:Cake.Core.IO.GlobberExtensions.GetDirectories(Cake.Core.IO.IGlobber,System.String)">
            <summary>
            Gets all directories matching the specified pattern.
            </summary>
            <param name="globber">The globber.</param>
            <param name="pattern">The pattern.</param>
            <returns>The directories matching the specified pattern.</returns>
        </member>
        <member name="M:Cake.Core.IO.GlobberExtensions.Match(Cake.Core.IO.IGlobber,System.String)">
            <summary>
            Returns <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </summary>
            <param name="globber">The globber.</param>
            <param name="pattern">The pattern to match.</param>
            <returns>
              <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </returns>
        </member>
        <member name="T:Cake.Core.CakeEnvironment">
            <summary>
            Represents the environment Cake operates in.
            </summary>
        </member>
        <member name="T:Cake.Core.ICakeEnvironment">
            <summary>
            Represents the environment Cake operates in.
            </summary>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.Is64BitOperativeSystem">
            <summary>
            Gets whether or not the current operative system is 64 bit.
            </summary>
            <returns>Whether or not the current operative system is 64 bit.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.IsUnix">
            <summary>
            Determines whether the current machine is running Unix.
            </summary>
            <returns>Whether or not the current machine is running Unix.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.GetSpecialPath(Cake.Core.IO.SpecialPath)">
            <summary>
            Gets a special path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPath"/> to the special path.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.GetApplicationRoot">
            <summary>
            Gets the application root path.
            </summary>
            <returns>The application root path.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>The value of the environment variable.</returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.GetEnvironmentVariables">
            <summary>
            Gets all environment variables.
            </summary>
            <returns>The environment variables as IDictionary&lt;string, string&gt; </returns>
        </member>
        <member name="M:Cake.Core.ICakeEnvironment.GetTargetFramework">
            <summary>
            Gets the target .Net framework version that the current AppDomain is targeting.
            </summary>
            <returns>The target framework.</returns>
        </member>
        <member name="P:Cake.Core.ICakeEnvironment.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.CakeEnvironment"/> class.
            </summary>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.Is64BitOperativeSystem">
            <summary>
            Gets whether or not the current operative system is 64 bit.
            </summary>
            <returns>
            Whether or not the current operative system is 64 bit.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.IsUnix">
            <summary>
            Determines whether the current machine is running Unix.
            </summary>
            <returns>
            Whether or not the current machine is running Unix.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.GetSpecialPath(Cake.Core.IO.SpecialPath)">
            <summary>
            Gets a special path.
            </summary>
            <param name="path">The path.</param>
            <returns>
            A <see cref="T:Cake.Core.IO.DirectoryPath"/> to the special path.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.GetApplicationRoot">
            <summary>
            Gets the application root path.
            </summary>
            <returns>
            The application root path.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.GetEnvironmentVariable(System.String)">
            <summary>
            Gets an environment variable.
            </summary>
            <param name="variable">The variable.</param>
            <returns>
            The value of the environment variable.
            </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.GetEnvironmentVariables">
            <summary>
            Gets all environment variables.
            </summary>
            <returns>The environment variables as IDictionary&lt;string, string&gt; </returns>
        </member>
        <member name="M:Cake.Core.CakeEnvironment.GetTargetFramework">
            <summary>
            Gets the target .Net framework version that the current AppDomain is targeting.
            </summary>
            <returns>The target framework.</returns>
        </member>
        <member name="P:Cake.Core.CakeEnvironment.WorkingDirectory">
            <summary>
            Gets or sets the working directory.
            </summary>
            <value>The working directory.</value>
        </member>
        <member name="T:Cake.Core.IO.IDirectory">
            <summary>
            Represents a directory.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.IFileSystemInfo">
            <summary>
            Represents an entry in the file system
            </summary>
        </member>
        <member name="P:Cake.Core.IO.IFileSystemInfo.Path">
            <summary>
            Gets the path to the entry.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Cake.Core.IO.IFileSystemInfo.Exists">
            <summary>
            Gets a value indicating whether this <see cref="T:Cake.Core.IO.IFileSystemInfo"/> exists.
            </summary>
            <value>
              <c>true</c> if the entry exists; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Core.IO.IFileSystemInfo.Hidden">
            <summary>
            Gets a value indicating whether this <see cref="T:Cake.Core.IO.IFileSystemInfo"/> is hidden.
            </summary>
            <value>
              <c>true</c> if the entry is hidden; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:Cake.Core.IO.IDirectory.Create">
            <summary>
            Creates the directory.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IDirectory.Delete(System.Boolean)">
            <summary>
            Deletes the directory.
            </summary>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Core.IO.IDirectory.GetDirectories(System.String,Cake.Core.IO.SearchScope)">
            <summary>
            Gets directories matching the specified filter and scope.
            </summary>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <returns>Directories matching the filter and scope.</returns>
        </member>
        <member name="M:Cake.Core.IO.IDirectory.GetFiles(System.String,Cake.Core.IO.SearchScope)">
            <summary>
            Gets files matching the specified filter and scope.
            </summary>
            <param name="filter">The filter.</param>
            <param name="scope">The search scope.</param>
            <returns>Files matching the specified filter and scope.</returns>
        </member>
        <member name="P:Cake.Core.IO.IDirectory.Path">
            <summary>
            Gets the path to the directory.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Cake.Core.IO.IFile">
            <summary>
            Represents a file.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IFile.Copy(Cake.Core.IO.FilePath,System.Boolean)">
            <summary>
            Copies the file to the specified destination path.
            </summary>
            <param name="destination">The destination path.</param>
            <param name="overwrite">Will overwrite existing destination file if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Core.IO.IFile.Move(Cake.Core.IO.FilePath)">
            <summary>
            Moves the file to the specified destination path.
            </summary>
            <param name="destination">The destination path.</param>
        </member>
        <member name="M:Cake.Core.IO.IFile.Delete">
            <summary>
            Deletes the file.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IFile.Open(System.IO.FileMode,System.IO.FileAccess,System.IO.FileShare)">
            <summary>
            Opens the file using the specified options.
            </summary>
            <param name="fileMode">The file mode.</param>
            <param name="fileAccess">The file access.</param>
            <param name="fileShare">The file share.</param>
            <returns>A <see cref="T:System.IO.Stream"/> to the file.</returns>
        </member>
        <member name="P:Cake.Core.IO.IFile.Path">
            <summary>
            Gets the path to the file.
            </summary>
            <value>The path.</value>
        </member>
        <member name="P:Cake.Core.IO.IFile.Length">
            <summary>
            Gets the length of the file.
            </summary>
            <value>The length of the file.</value>
        </member>
        <member name="T:Cake.Core.IO.FileSystem">
            <summary>
            A physical file system implementation.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.IFileSystem">
            <summary>
            Represents a file system.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IFileSystem.GetFile(Cake.Core.IO.FilePath)">
            <summary>
            Gets a <see cref="T:Cake.Core.IO.IFile"/> instance representing the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.IFile"/> instance representing the specified path.</returns>
        </member>
        <member name="M:Cake.Core.IO.IFileSystem.GetDirectory(Cake.Core.IO.DirectoryPath)">
            <summary>
            Gets a <see cref="T:Cake.Core.IO.IDirectory"/> instance representing the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.IDirectory"/> instance representing the specified path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileSystem.GetFile(Cake.Core.IO.FilePath)">
            <summary>
            Gets a <see cref="T:Cake.Core.IO.IFile"/> instance representing the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.IFile"/> instance representing the specified path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FileSystem.GetDirectory(Cake.Core.IO.DirectoryPath)">
            <summary>
            Gets a <see cref="T:Cake.Core.IO.IDirectory"/> instance representing the specified path.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.IDirectory"/> instance representing the specified path.</returns>
        </member>
        <member name="T:Cake.Core.IO.Globber">
            <summary>
            The file system globber.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.IGlobber">
            <summary>
            Represents a file system globber.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IGlobber.Match(System.String,System.Func{Cake.Core.IO.IDirectory,System.Boolean})">
            <summary>
            Returns <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="predicate">The predicate used to filter directories based on file system information.</param>
            <returns>
              <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.Globber.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Globber"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Core.IO.Globber.Match(System.String,System.Func{Cake.Core.IO.IDirectory,System.Boolean})">
            <summary>
            Returns <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </summary>
            <param name="pattern">The pattern to match.</param>
            <param name="predicate">The predicate used to filter directories based on file system information.</param>
            <returns>
              <see cref="T:Cake.Core.IO.Path"/> instances matching the specified pattern.
            </returns>
        </member>
        <member name="T:Cake.Core.IO.IProcess">
            <summary>
            Represents a process.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IProcess.WaitForExit">
            <summary>
            Waits for the process to exit.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IProcess.WaitForExit(System.Int32)">
            <summary>
            Waits for the process to exit with possible timeout for command.
            </summary>
            <param name="milliseconds">The amount of time, in milliseconds, to wait for the associated process to exit. The maximum is the largest possible value of a 32-bit integer, which represents infinity to the operating system.</param>
            <returns>true if the associated process has exited; otherwise, false.</returns>
        </member>
        <member name="M:Cake.Core.IO.IProcess.GetExitCode">
            <summary>
            Gets the exit code of the process.
            </summary>
            <returns>The exit code of the process.</returns>
        </member>
        <member name="M:Cake.Core.IO.IProcess.GetStandardOutput">
            <summary>
            Get the standard output of process
            </summary>
            <returns>Returns process output <see cref="P:Cake.Core.IO.ProcessSettings.RedirectStandardOutput">RedirectStandardOutput</see> is true</returns>
        </member>
        <member name="M:Cake.Core.IO.IProcess.Kill">
            <summary>
            Immediately stops the associated process.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.IProcessRunner">
            <summary>
            Represents a process runner.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IProcessRunner.Start(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Starts a process using the specified information.
            </summary>
            <param name="filePath">The file name such as an application or document with which to start the process.</param>
            <param name="settings">The information about the process to start.</param>
            <returns>A process handle.</returns>
        </member>
        <member name="T:Cake.Core.IO.IRegistry">
            <summary>
            Represents the Windows registry.
            </summary>
        </member>
        <member name="P:Cake.Core.IO.IRegistry.LocalMachine">
            <summary>
            Gets a registry key representing HKEY_LOCAL_MACHINE.
            </summary>
            <value>
            A registry key representing HKEY_LOCAL_MACHINE.
            </value>
        </member>
        <member name="T:Cake.Core.IO.IRegistryKey">
            <summary>
            Represents a Windows registry key.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.IRegistryKey.GetSubKeyNames">
            <summary>
            Gets all sub keys.
            </summary>
            <returns>All sub keys.</returns>
        </member>
        <member name="M:Cake.Core.IO.IRegistryKey.OpenKey(System.String)">
            <summary>
            Opens the sub key with the specified name.
            </summary>
            <param name="name">The name of the key.</param>
            <returns>The sub key with the specified name</returns>
        </member>
        <member name="M:Cake.Core.IO.IRegistryKey.GetValue(System.String)">
            <summary>
            Gets the value of the key.
            </summary>
            <param name="name">The name of the key.</param>
            <returns>The value of the key.</returns>
        </member>
        <member name="T:Cake.Core.IO.Machine">
            <summary>
            Responsible for retrieving information about the current machine.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.Machine.Is64BitOperativeSystem">
            <summary>
            Determines if the current operative system is 64 bit.
            </summary>
            <returns>Whether or not the current operative system is 64 bit.</returns>
        </member>
        <member name="M:Cake.Core.IO.Machine.IsUnix">
            <summary>
            Determines whether the current machine is running Unix.
            </summary>
            <returns>Whether or not the current machine is running Unix.</returns>
        </member>
        <member name="T:Cake.Core.IO.NuGet.INuGetToolResolver">
            <summary>
            Represents a NuGet path resolver.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.NuGet.INuGetToolResolver.ResolvePath">
            <summary>
            Resolves the path to nuget.exe.
            </summary>
            <returns>The path to nuget.exe.</returns>
        </member>
        <member name="T:Cake.Core.IO.NuGet.NuGetToolResolver">
            <summary>
            Contains NuGet path resolver functionality
            </summary>
        </member>
        <member name="M:Cake.Core.IO.NuGet.NuGetToolResolver.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.NuGet.NuGetToolResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Core.IO.NuGet.NuGetToolResolver.ResolvePath">
            <summary>
            Resolves the path to nuget.exe.
            </summary>
            <returns>The path to nuget.exe.</returns>
        </member>
        <member name="T:Cake.Core.IO.Path">
            <summary>
            Provides properties and instance methods for working with paths.
            This class must be inherited.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.Path.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Path"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Core.IO.Path.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this path.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cake.Core.IO.Path.FullPath">
            <summary>
            Gets the full path.
            </summary>
            <value>The full path.</value>
        </member>
        <member name="P:Cake.Core.IO.Path.IsRelative">
            <summary>
            Gets a value indicating whether this path is relative.
            </summary>
            <value>
            <c>true</c> if this path is relative; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Core.IO.Path.Segments">
            <summary>
            Gets the segments making up the path.
            </summary>
            <value>The segments making up the path.</value>
        </member>
        <member name="T:Cake.Core.IO.DirectoryPath">
            <summary>
            Represents a directory path.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.DirectoryPath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.GetDirectoryName">
            <summary>
            Gets the name of the directory.
            </summary>
            <returns>The directory name.</returns>
            <remarks>
               If this is passed a file path, it will return the file name.
               This is by-and-large equivalent to how DirectoryInfo handles this scenario.
               If we wanted to return the *actual* directory name, we'd need to pull in IFileSystem,
               and do various checks to make sure things exists.
            </remarks>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.GetFilePath(Cake.Core.IO.FilePath)">
            <summary>
            Combines the current path with the file name of a <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the file name of the provided <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.CombineWithFilePath(Cake.Core.IO.FilePath)">
            <summary>
            Combines the current path with a <see cref="T:Cake.Core.IO.FilePath"/>.
            The provided <see cref="T:Cake.Core.IO.FilePath"/> must be relative.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the provided <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.Combine(Cake.Core.IO.DirectoryPath)">
            <summary>
            Combines the current path with another <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            The provided <see cref="T:Cake.Core.IO.DirectoryPath"/> must be relative.
            </summary>
            <param name="path">The path.</param>
            <returns>A combination of the current path and the provided <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.MakeAbsolute(Cake.Core.IO.DirectoryPath)">
            <summary>
            Makes the path absolute to another (absolute) path.
            </summary>
            <param name="path">The path.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.MakeAbsolute(Cake.Core.ICakeEnvironment)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <param name="environment">The environment.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.Collapse">
            <summary>
            Collapses a <see cref="T:Cake.Core.IO.DirectoryPath"/> containing ellipses.
            </summary>
            <returns>A collapsed <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.op_Implicit(System.String)~Cake.Core.IO.DirectoryPath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.FromString(System.String)">
            <summary>
            Performs a conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.GetRelativePath(Cake.Core.IO.DirectoryPath)">
            <summary>
            Get the relative path to another directory.
            </summary>
            <param name="to">The target directory path.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.DirectoryPath.GetRelativePath(Cake.Core.IO.FilePath)">
            <summary>
            Get the relative path to another file.
            </summary>
            <param name="to">The target file path.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="T:Cake.Core.IO.FilePath">
            <summary>
            Represents a file path.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.FilePath.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.FilePath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetDirectory">
            <summary>
            Gets the directory part of the path.
            </summary>
            <returns>The directory part of the path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetFilename">
            <summary>
            Gets the filename.
            </summary>
            <returns>The filename.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetFilenameWithoutExtension">
            <summary>
            Gets the filename without it's extension.
            </summary>
            <returns>The filename without it's extension.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetExtension">
            <summary>
            Gets the file extension.
            </summary>
            <returns>The file extension.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.ChangeExtension(System.String)">
            <summary>
            Changes the file extension of the path.
            </summary>
            <param name="extension">The new extension.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePath"/> with a new extension.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.AppendExtension(System.String)">
            <summary>
            Appends a file extension to the path.
            </summary>
            <param name="extension">The extension.</param>
            <returns>A new <see cref="T:Cake.Core.IO.FilePath"/> with an appended extension.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.MakeAbsolute(Cake.Core.ICakeEnvironment)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <param name="environment">The environment.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.MakeAbsolute(Cake.Core.IO.DirectoryPath)">
            <summary>
            Makes the path absolute (if relative) using the specified directory path.
            </summary>
            <param name="path">The path.</param>
            <returns>An absolute path.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.Collapse">
            <summary>
            Collapses a <see cref="T:Cake.Core.IO.FilePath"/> containing ellipses.
            </summary>
            <returns>A collapsed <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.op_Implicit(System.String)~Cake.Core.IO.FilePath">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.FromString(System.String)">
            <summary>
            Performs a conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetRelativePath(Cake.Core.IO.DirectoryPath)">
            <summary>
            Get the relative path to another directory.
            </summary>
            <param name="to">The target directory path.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.FilePath.GetRelativePath(Cake.Core.IO.FilePath)">
            <summary>
            Get the relative path to another file.
            </summary>
            <param name="to">The target file path.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="P:Cake.Core.IO.FilePath.HasExtension">
            <summary>
            Gets a value indicating whether this path has a file extension.
            </summary>
            <value>
            <c>true</c> if this file path has a file extension; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.IO.PathComparer">
            <summary>
            Compares <see cref="T:Cake.Core.IO.Path"/> instances.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.PathComparer.Default">
            <summary>
            The default path comparer.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.PathComparer.#ctor(System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.PathComparer"/> class.
            </summary>
            <param name="isCaseSensitive">if set to <c>true</c>, comparison is case sensitive.</param>
        </member>
        <member name="M:Cake.Core.IO.PathComparer.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.PathComparer"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Core.IO.PathComparer.Equals(Cake.Core.IO.Path,Cake.Core.IO.Path)">
            <summary>
            Determines whether the specified <see cref="T:Cake.Core.IO.Path"/> instances are equal.
            </summary>
            <param name="x">The first <see cref="T:Cake.Core.IO.Path"/> to compare.</param>
            <param name="y">The second <see cref="T:Cake.Core.IO.Path"/> to compare.</param>
            <returns>
            True if the specified <see cref="T:Cake.Core.IO.Path"/> instances are equal; otherwise, false.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.PathComparer.GetHashCode(Cake.Core.IO.Path)">
            <summary>
            Returns a hash code for the specified <see cref="T:Cake.Core.IO.Path"/>.
            </summary>
            <param name="obj">The path.</param>
            <returns>
            A hash code for this instance, suitable for use in hashing algorithms and data structures like a hash table.
            </returns>
        </member>
        <member name="P:Cake.Core.IO.PathComparer.IsCaseSensitive">
            <summary>
            Gets a value indicating whether comparison is case sensitive.
            </summary>
            <value>
            <c>true</c> if comparison is case sensitive; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.IO.ProcessRunner">
            <summary>
            Responsible for starting processes.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.ProcessRunner.#ctor(Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.ProcessRunner"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Core.IO.ProcessRunner.Start(Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Starts a process using the specified information.
            </summary>
            <param name="filePath">The file name such as an application or document with which to start the process.</param>
            <param name="settings">The information about the process to start.</param>
            <returns>A process handle.</returns>
        </member>
        <member name="T:Cake.Core.IO.ProcessSettings">
            <summary>
            Specifies a set of values that are used to start a process.
            </summary>
        </member>
        <member name="P:Cake.Core.IO.ProcessSettings.Arguments">
            <summary>
            Gets or sets the set of command-line arguments to use when starting the application.
            </summary>
            <value>The set of command-line arguments to use when starting the application.</value>
        </member>
        <member name="P:Cake.Core.IO.ProcessSettings.WorkingDirectory">
            <summary>
            Gets or sets the working directory for the process to be started.
            </summary>
            <value>The working directory for the process to be started.</value>
        </member>
        <member name="P:Cake.Core.IO.ProcessSettings.RedirectStandardOutput">
            <summary>
            Gets or sets a value indicating whether the output of an application is written to the <see cref="P:System.Diagnostics.Process.StandardOutput"/> stream.
            </summary>
            <value>true if output should be written to <see cref="P:System.Diagnostics.Process.StandardOutput"/>; otherwise, false. The default is false.</value>
        </member>
        <member name="P:Cake.Core.IO.ProcessSettings.Timeout">
            <summary>
            Gets or sets optional timeout for process execution
            </summary>
        </member>
        <member name="P:Cake.Core.IO.ProcessSettings.Silent">
            <summary>
            Gets or sets a value indicating whether process output will be suppressed.
            </summary>
            <value>
              <c>true</c> if process output will be suppressed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.IO.Arguments.QuotedArgument">
            <summary>
            Represents a quoted argument.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.Arguments.QuotedArgument.#ctor(Cake.Core.IO.IProcessArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Arguments.QuotedArgument"/> class.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Cake.Core.IO.Arguments.QuotedArgument.Render">
            <summary>
            Render the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be included.
            </summary>
            <returns>A string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.QuotedArgument.RenderSafe">
            <summary>
            Renders the argument as a <see cref="T:System.String"/>.
            Sensitive information will be redacted.
            </summary>
            <returns>A safe string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.QuotedArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cake.Core.IO.SearchScope">
            <summary>
            Represents a search scope.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SearchScope.Current">
            <summary>
            The current directory.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SearchScope.Recursive">
            <summary>
            The current directory and child directories.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.Arguments.SecretArgument">
            <summary>
            Represents a secret argument.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SecretArgument.#ctor(Cake.Core.IO.IProcessArgument)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Arguments.SecretArgument"/> class.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SecretArgument.Render">
            <summary>
            Render the arguments as a <see cref="T:System.String"/>.
            The secret text will be included.
            </summary>
            <returns>A string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SecretArgument.RenderSafe">
            <summary>
            Renders the argument as a <see cref="T:System.String"/>.
             The secret text will be redacted.
            </summary>
            <returns>A safe string representation of the argument.</returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.SecretArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cake.Core.IO.SpecialPath">
            <summary>
            Represents a special path.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.ApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific
            data for the current roaming user.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.CommonApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific
            data that is used by all users.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.LocalApplicationData">
            <summary>
            The directory that serves as a common repository for application-specific
            data that is used by the current, non-roaming user.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.ProgramFiles">
            <summary>
            The Program Files folder.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.ProgramFilesX86">
            <summary>
            The Program Files (X86) folder.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.Windows">
            <summary>
            The Windows folder.
            </summary>
        </member>
        <member name="F:Cake.Core.IO.SpecialPath.LocalTemp">
            <summary>
            The current user's temporary folder.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.Arguments.TextArgument">
            <summary>
            Represents a text argument.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.Arguments.TextArgument.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.Arguments.TextArgument"/> class.
            </summary>
            <param name="text">The text.</param>
        </member>
        <member name="M:Cake.Core.IO.Arguments.TextArgument.Render">
            <summary>
            Render the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be included.
            </summary>
            <returns>
            A string representation of the argument.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.TextArgument.RenderSafe">
            <summary>
            Renders the argument as a <see cref="T:System.String"/>.
            Sensitive information will be redacted.
            </summary>
            <returns>
            A safe string representation of the argument.
            </returns>
        </member>
        <member name="M:Cake.Core.IO.Arguments.TextArgument.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Cake.Core.IO.WindowsRegistry">
            <summary>
            Represents an Windows implementation of <see cref="T:Cake.Core.IO.IRegistry"/>.
            </summary>
        </member>
        <member name="P:Cake.Core.IO.WindowsRegistry.LocalMachine">
            <summary>
            Gets the LocalMachine <see cref="T:Cake.Core.IO.IRegistryKey"/>.
            </summary>
        </member>
        <member name="T:Cake.Core.ITaskSetupContext">
            <summary>
            Acts as a context providing info about a <see cref="T:Cake.Core.CakeTask"/> before its invocation.
            </summary>
        </member>
        <member name="P:Cake.Core.ITaskSetupContext.Task">
            <summary>
            Gets the <see cref="T:Cake.Core.ICakeTaskInfo"/> describing the <see cref="T:Cake.Core.CakeTask"/> that has just been invoked.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="T:Cake.Core.ITaskTeardownContext">
            <summary>
            Acts as a context providing info about a <see cref="T:Cake.Core.CakeTask"/> following its invocation.
            </summary>
        </member>
        <member name="P:Cake.Core.ITaskTeardownContext.Task">
            <summary>
            Gets the <see cref="T:Cake.Core.ICakeTaskInfo"/> describing the <see cref="T:Cake.Core.CakeTask"/> that has just been invoked.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="P:Cake.Core.ITaskTeardownContext.Duration">
            <summary>
            Gets the duration of the <see cref="T:Cake.Core.CakeTask"/>'s execution.
            </summary>
            <value>
            The duration of the <see cref="T:Cake.Core.CakeTask"/>'s execution.
            </value>
        </member>
        <member name="P:Cake.Core.ITaskTeardownContext.Skipped">
            <summary>
            Gets a value indicating whether this <see cref="T:Cake.Core.CakeTask"/> was skipped (not executed).
            </summary>
            <value>
            <c>true</c> if skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.Scripting.Processors.LineProcessor">
            <summary>
            Abstract line processor.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Processors.LineProcessor.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.Processors.LineProcessor"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Core.Scripting.Processors.LineProcessor.Process(Cake.Core.Scripting.Analysis.IScriptAnalyzerContext,System.String)">
            <summary>
            Processes the specified line.
            </summary>
            <param name="analyzer">The analyzer.</param>
            <param name="line">The line.</param>
            <returns><c>true</c> if the line was processed 
            by this processor; otherwise <c>false</c>.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.Processors.LineProcessor.Split(System.String)">
            <summary>
            Splits the specified line into tokens.
            </summary>
            <param name="line">The line to split.</param>
            <returns>The parts that make up the line.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.Processors.LineProcessor.GetAbsoluteDirectory(Cake.Core.IO.FilePath)">
            <summary>
            Gets the absolute directory for the path.
            </summary>
            <param name="path">The path.</param>
            <returns>The absolute directory path.</returns>
        </member>
        <member name="T:Cake.Core.Packaging.IPackageInstaller">
            <summary>
            Represents an installer for a specific package.
            </summary>
        </member>
        <member name="M:Cake.Core.Packaging.IPackageInstaller.CanInstall(Cake.Core.Packaging.PackageReference,Cake.Core.Packaging.PackageType)">
            <summary>
            Determines whether this instance can install the specified resource.
            </summary>
            <param name="package">The package resource.</param>
            <param name="type">The package type.</param>
            <returns>
              <c>true</c> if this installer can install the
              specified resource; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cake.Core.Packaging.IPackageInstaller.Install(Cake.Core.Packaging.PackageReference,Cake.Core.Packaging.PackageType,Cake.Core.IO.DirectoryPath)">
            <summary>
            Installs the specified resource at the given location.
            </summary>
            <param name="package">The package resource.</param>
            <param name="type">The package type.</param>
            <param name="path">The location where to install the resource.</param>
            <returns>The installed files.</returns>
        </member>
        <member name="T:Cake.Core.Packaging.PackageReference">
            <summary>
            Represents an URI resource.
            </summary>
        </member>
        <member name="M:Cake.Core.Packaging.PackageReference.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Packaging.PackageReference"/> class.
            </summary>
            <param name="uri">The URI.</param>
        </member>
        <member name="M:Cake.Core.Packaging.PackageReference.#ctor(System.Uri)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Packaging.PackageReference"/> class.
            </summary>
            <param name="uri">The URI.</param>
            <exception cref="T:System.ArgumentException">Package query string parameter is missing.;uri</exception>
        </member>
        <member name="P:Cake.Core.Packaging.PackageReference.OriginalString">
            <summary>
            Gets the original string.
            </summary>
            <value>The original string.</value>
        </member>
        <member name="P:Cake.Core.Packaging.PackageReference.Scheme">
            <summary>
            Gets the scheme.
            </summary>
            <value>The scheme.</value>
        </member>
        <member name="P:Cake.Core.Packaging.PackageReference.Address">
            <summary>
            Gets the address.
            </summary>
            <value>The address.</value>
        </member>
        <member name="P:Cake.Core.Packaging.PackageReference.Parameters">
            <summary>
            Gets the parameters.
            </summary>
            <value>The parameters.</value>
        </member>
        <member name="P:Cake.Core.Packaging.PackageReference.Package">
            <summary>
            Gets the package.
            </summary>
            <value>The package.</value>
        </member>
        <member name="T:Cake.Core.Packaging.PackageType">
            <summary>
            Represents a package type.
            </summary>
        </member>
        <member name="F:Cake.Core.Packaging.PackageType.Unspecified">
            <summary>
            Represents an unspecified package type.
            </summary>
        </member>
        <member name="F:Cake.Core.Packaging.PackageType.Addin">
            <summary>
            Represents an addin.
            </summary>
        </member>
        <member name="F:Cake.Core.Packaging.PackageType.Tool">
            <summary>
            Represents a tool.
            </summary>
        </member>
        <member name="T:Cake.Core.NamespaceDoc">
            <summary>
            The <see cref="N:Cake.Core"/> namespace contains fundamental classes and
            base classes for Cake and the Cake scripting environment.
            </summary>
        </member>
        <member name="T:Cake.Core.Annotations.NamespaceDoc">
            <summary>
            This namespace contain attributes used by
            the Cake engine and addins.
            </summary>
        </member>
        <member name="T:Cake.Core.Diagnostics.NamespaceDoc">
            <summary>
            This namespace contain types that
            enable you to implement custom logging support
            and interact with build logs.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.NamespaceDoc">
            <summary>
            This namespace contain fundamental types that support
            input and output, including the ability to read and write data
            to streams and to interact with the file system.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.Arguments.NamespaceDoc">
            <summary>
            This namespace contain types
            used to compose process arguments in a safe way.
            </summary>
        </member>
        <member name="T:Cake.Core.IO.NuGet.NamespaceDoc">
            <summary>
            This namespace contain types
            related to NuGet functionality.
            </summary>
        </member>
        <member name="T:Cake.Core.Scripting.NamespaceDoc">
            <summary>
            This namespace contain types
            related to script processing and execution.
            </summary>
        </member>
        <member name="T:Cake.Core.Scripting.Processors.NamespaceDoc">
            <summary>
            This namespace contain types
            related to script processing.
            </summary>
        </member>
        <member name="T:Cake.Core.Text.NamespaceDoc">
            <summary>
            This namespace contain types
            related to text processing and transformations.
            </summary>
        </member>
        <member name="T:Cake.Core.Utilities.NamespaceDoc">
            <summary>
            This namespace contain base classes
            and functionality related to tooling.
            </summary>
        </member>
        <member name="T:Cake.Core.Scripting.Analysis.IScriptAnalyzer">
            <summary>
            Represents the script analyzer responsible for 
            parsing and analyzing scripts.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.IScriptAnalyzer.Analyze(Cake.Core.IO.FilePath)">
            <summary>
            Analyzes the specified script path.
            </summary>
            <param name="path">The path to the script to analyze.</param>
            <returns>The script analysis result.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.Analysis.IScriptAnalyzerContext">
            <summary>
            Represents the context used by the <see cref="T:Cake.Core.Scripting.Analysis.ScriptAnalyzer"/>.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.IScriptAnalyzerContext.Analyze(Cake.Core.IO.FilePath)">
            <summary>
            Processes the specified script path using the same context.
            </summary>
            <param name="scriptPath">The script path to process.</param>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.IScriptAnalyzerContext.AddScriptLine(System.String)">
            <summary>
            Adds a script line to the result.
            </summary>
            <param name="line">The script line to add.</param>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptAnalyzerContext.Script">
            <summary>
            Gets the current script being processed.
            </summary>
            <value>The current script being processed.</value>
        </member>
        <member name="T:Cake.Core.Scripting.Analysis.IScriptInformation">
            <summary>
            Represents information about a script.
            </summary>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.Path">
            <summary>
            Gets the script path.
            </summary>
            <value>The script path.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.Includes">
            <summary>
            Gets the includes.
            </summary>
            <value>The includes.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.References">
            <summary>
            Gets the referenced script assemblies.
            </summary>
            <value>The referenced script assemblies.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.Namespaces">
            <summary>
            Gets all namespaces referenced by the script.
            </summary>
            <value>The namespaces referenced by the script.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.UsingAliases">
            <summary>
            Gets all using aliases defined by the scripts.
            </summary>
            <value>The using aliases defined by the script.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.Tools">
            <summary>
            Gets the tools.
            </summary>
            <value>The tools.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.IScriptInformation.Addins">
            <summary>
            Gets the addins.
            </summary>
            <value>The addins.</value>
        </member>
        <member name="T:Cake.Core.Scripting.Analysis.ScriptAnalyzer">
            <summary>
            The script analyzer.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.ScriptAnalyzer.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.Analysis.ScriptAnalyzer"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.ScriptAnalyzer.Analyze(Cake.Core.IO.FilePath)">
            <summary>
            Analyzes the specified script path.
            </summary>
            <param name="path">The path to the script to analyze.</param>
            <returns>The script analysis result.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult">
            <summary>
            Represents a script analysis result.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.#ctor(Cake.Core.Scripting.Analysis.IScriptInformation,System.Collections.Generic.IReadOnlyList{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult"/> class.
            </summary>
            <param name="script">The script.</param>
            <param name="lines">The merged script lines.</param>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.Script">
            <summary>
            Gets the analyzed script.
            </summary>
            <value>The script.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.Lines">
            <summary>
            Gets the merged script lines.
            </summary>
            <value>The merged script lines.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.References">
            <summary>
            Gets all references.
            </summary>
            <value>The references.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.Namespaces">
            <summary>
            Gets all the namespaces.
            </summary>
            <value>The namespaces.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.UsingAliases">
            <summary>
            Gets the using aliases.
            </summary>
            <value>The using aliases.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.Addins">
            <summary>
            Gets the addins.
            </summary>
            <value>The addins.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Analysis.ScriptAnalyzerResult.Tools">
            <summary>
            Gets the tools.
            </summary>
            <value>The tools.</value>
        </member>
        <member name="T:Cake.Core.Scripting.CodeGen.MethodAliasGenerator">
            <summary>
            Responsible for generating script method aliases.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.CodeGen.MethodAliasGenerator.Generate(System.Reflection.MethodInfo)">
            <summary>
            Generates a script method alias from the specified method.
            The provided method must be an extension method for <see cref="T:Cake.Core.ICakeContext"/>
            and it must be decorated with the <see cref="T:Cake.Core.Annotations.CakeMethodAliasAttribute"/>.
            </summary>
            <param name="method">The method to generate the code for.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.CodeGen.PropertyAliasGenerator">
            <summary>
            Responsible for generating script property aliases.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.CodeGen.PropertyAliasGenerator.Generate(System.Reflection.MethodInfo)">
            <summary>
            Generates a script property alias from the specified method.
            The provided method must be an extension method for <see cref="T:Cake.Core.ICakeContext"/>
            and it must be decorated with the <see cref="T:Cake.Core.Annotations.CakePropertyAliasAttribute"/>.
            </summary>
            <param name="method">The method to generate the code for.</param>
            <returns>The generated code.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptAliasFinder">
            <summary>
            Represents a script alias generator.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptAliasFinder.FindAliases(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds script aliases in the provided assemblies.
            </summary>
            <param name="assemblies">The assemblies to find script aliases in.</param>
            <returns>The script aliases that were found.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptConventions">
            <summary>
            Represents the script conventions used by Cake.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptConventions.GetDefaultNamespaces">
            <summary>
            Gets the default namespaces.
            </summary>
            <returns>A list containing all default namespaces.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptConventions.GetDefaultAssemblies(Cake.Core.IO.DirectoryPath)">
            <summary>
            Gets the default assemblies.
            </summary>
            <param name="root">The root to where to find Cake related assemblies.</param>
            <returns>A list containing all default assemblies.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptEngine">
            <summary>
            Represents a script engine.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptEngine.CreateSession(Cake.Core.Scripting.IScriptHost,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Creates a new script session.
            </summary>
            <param name="host">The host.</param>
            <param name="arguments">The script arguments.</param>
            <returns>A new script session.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptHost">
            <summary>
            Represents a script host that works as a context for scripts.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.Task(System.String)">
            <summary>
            Registers a new task.
            </summary>
            <param name="name">The name of the task.</param>
            <returns>A <see cref="T:Cake.Core.CakeTaskBuilder`1"/>.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.Setup(System.Action)">
            <summary>
            Allows registration of an action that's executed before any tasks are run.
            If setup fails, no tasks will be executed but teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.Teardown(System.Action)">
            <summary>
            Allows registration of an action that's executed after all other tasks have been run.
            If a setup action or a task fails with or without recovery, the specified teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.TaskSetup(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext})">
            <summary>
            Allows registration of an action that's executed before each task is run.
            If the task setup fails, its task will not be executed but the task teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.TaskTeardown(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext})">
            <summary>
            Allows registration of an action that's executed after each task has been run.
            If a task setup action or a task fails with or without recovery, the specified task teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptHost.RunTarget(System.String)">
            <summary>
            Runs the specified target.
            </summary>
            <param name="target">The target to run.</param>
            <returns>The resulting report.</returns>
        </member>
        <member name="P:Cake.Core.Scripting.IScriptHost.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Cake.Core.Scripting.IScriptHost.Tasks">
            <summary>
            Gets all registered tasks.
            </summary>
            <value>The registered tasks.</value>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptProcessor">
            <summary>
            Represents a script processor.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptProcessor.InstallAddins(Cake.Core.Scripting.Analysis.ScriptAnalyzerResult,Cake.Core.IO.DirectoryPath)">
            <summary>
            Installs the addins.
            </summary>
            <param name="analyzerResult">The analyzer result.</param>
            <param name="installPath">The install path.</param>
            <returns>A list containing file paths to installed addin assemblies.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptProcessor.InstallTools(Cake.Core.Scripting.Analysis.ScriptAnalyzerResult,Cake.Core.IO.DirectoryPath)">
            <summary>
            Installs the tools specified in the build scripts.
            </summary>
            <param name="analyzerResult">The analyzer result.</param>
            <param name="installPath">The install path.</param>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptRunner">
            <summary>
            Represents a script runner responsible for running scripts.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptRunner.Run(Cake.Core.Scripting.IScriptHost,Cake.Core.IO.FilePath,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Runs the script using the specified script host.
            </summary>
            <param name="host">The script host.</param>
            <param name="scriptPath">The script path.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Cake.Core.Scripting.IScriptSession">
            <summary>
            Represents a script session.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptSession.AddReference(Cake.Core.IO.FilePath)">
            <summary>
            Adds a reference path to the session.
            </summary>
            <param name="path">The reference path.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptSession.AddReference(System.Reflection.Assembly)">
            <summary>
            Adds an assembly reference to the session.
            </summary>
            <param name="assembly">The assembly reference.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptSession.ImportNamespace(System.String)">
            <summary>
            Imports a namespace to the session.
            </summary>
            <param name="namespace">The namespace to import.</param>
        </member>
        <member name="M:Cake.Core.Scripting.IScriptSession.Execute(Cake.Core.Scripting.Script)">
            <summary>
            Executes the specified script.
            </summary>
            <param name="script">The script to execute.</param>
        </member>
        <member name="T:Cake.Core.IO.ProcessArgumentBuilder">
            <summary>
            Utility for building process arguments.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/> class.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.Clear">
            <summary>
            Clears all arguments from the builder.
            </summary>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.Append(Cake.Core.IO.IProcessArgument)">
            <summary>
            Appends an argument.
            </summary>
            <param name="argument">The argument.</param>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.Render">
            <summary>
            Renders the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be included.
            </summary>
            <returns>A string representation of the arguments.</returns>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.RenderSafe">
            <summary>
            Renders the arguments as a <see cref="T:System.String"/>.
            Sensitive information will be redacted.
            </summary>
            <returns>A safe string representation of the arguments.</returns>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.FilterUnsafe(System.String)">
            <summary>
            Tries to filer any unsafe arguments from string
            </summary>
            <param name="source">unsafe source string.</param>
            <returns>Filtered string.</returns>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.op_Implicit(System.String)~Cake.Core.IO.ProcessArgumentBuilder">
            <summary>
            Performs an implicit conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/>.
            </summary>
            <param name="value">The text value to convert.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="M:Cake.Core.IO.ProcessArgumentBuilder.FromString(System.String)">
            <summary>
            Performs a conversion from <see cref="T:System.String"/> to <see cref="T:Cake.Core.IO.ProcessArgumentBuilder"/>.
            </summary>
            <param name="value">The text value to convert.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePath"/>.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.Script">
            <summary>
            Represents a script.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.Script.#ctor(System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{System.String},System.Collections.Generic.IEnumerable{Cake.Core.Scripting.ScriptAlias},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.Script"/> class.
            </summary>
            <param name="namespaces">The namespaces.</param>
            <param name="lines">The scrip lines.</param>
            <param name="aliases">The script aliases.</param>
            <param name="usingAliasDirectives">The using alias directives.</param>
        </member>
        <member name="P:Cake.Core.Scripting.Script.Namespaces">
            <summary>
            Gets the namespaces imported via the <c>using</c> statement.
            </summary>
            <value>The namespaces.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Script.Lines">
            <summary>
            Gets the script lines.
            </summary>
            <value>
            The lines.
            </value>
        </member>
        <member name="P:Cake.Core.Scripting.Script.Aliases">
            <summary>
            Gets the aliases.
            </summary>
            <value>The aliases.</value>
        </member>
        <member name="P:Cake.Core.Scripting.Script.UsingAliasDirectives">
            <summary>
            Gets the using alias directives.
            </summary>
            <value>The using alias directives.</value>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptAlias">
            <summary>
            Represents a script alias.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptAlias.#ctor(System.Reflection.MethodInfo,Cake.Core.Scripting.ScriptAliasType,System.Collections.Generic.ISet{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptAlias"/> class.
            </summary>
            <param name="method">The method associated with the alias.</param>
            <param name="type">The alias type.</param>
            <param name="namespaces">The namespaces that the alias need to be imported.</param>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptAlias.Name">
            <summary>
            Gets the name of the alias.
            </summary>
            <value>The name.</value>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptAlias.Method">
            <summary>
            Gets the method associated with the alias.
            </summary>
            <value>The method associated with the alias.</value>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptAlias.Type">
            <summary>
            Gets the alias type.
            </summary>
            <value>The alias type.</value>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptAlias.Namespaces">
            <summary>
            Gets all namespaces that the alias need to be imported.
            </summary>
            <value>
            The namespaces that the alias need to be imported.
            </value>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptAliasFinder">
            <summary>
            The script alias finder.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptAliasFinder.#ctor(Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptAliasFinder"/> class.
            </summary>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptAliasFinder.FindAliases(System.Collections.Generic.IEnumerable{System.Reflection.Assembly})">
            <summary>
            Finds script aliases in the provided assemblies.
            </summary>
            <param name="assemblies">The assemblies to find script aliases in.</param>
            <returns>The script aliases that were found.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptAliasType">
            <summary>
            Represents a script alias type.
            </summary>
        </member>
        <member name="F:Cake.Core.Scripting.ScriptAliasType.Unknown">
            <summary>
            Represents an unknown script alias type.
            </summary>
        </member>
        <member name="F:Cake.Core.Scripting.ScriptAliasType.Method">
            <summary>
            Represents a script alias method.
            </summary>
        </member>
        <member name="F:Cake.Core.Scripting.ScriptAliasType.Property">
            <summary>
            Represents a script alias property.
            </summary>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptConventions">
            <summary>
            The script conventions used by Cake.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptConventions.#ctor(Cake.Core.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptConventions"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptConventions.GetDefaultNamespaces">
            <summary>
            Gets the default namespaces.
            </summary>
            <returns>A list containing all default namespaces.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptConventions.GetDefaultAssemblies(Cake.Core.IO.DirectoryPath)">
            <summary>
            Gets the default assemblies.
            </summary>
            <param name="root">The root to where to find Cake related assemblies.</param>
            <returns>A list containing all default assemblies.</returns>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptHost">
            <summary>
            The script host works as a context for scripts.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.#ctor(Cake.Core.ICakeEngine,Cake.Core.ICakeContext)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptHost"/> class.
            </summary>
            <param name="engine">The engine.</param>
            <param name="context">The context.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.Task(System.String)">
            <summary>
            Registers a new task.
            </summary>
            <param name="name">The name of the task.</param>
            <returns>A <see cref="T:Cake.Core.CakeTaskBuilder`1"/>.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.Setup(System.Action)">
            <summary>
            Allows registration of an action that's executed before any tasks are run.
            If setup fails, no tasks will be executed but teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.Teardown(System.Action)">
            <summary>
            Allows registration of an action that's executed after all other tasks have been run.
            If a setup action or a task fails with or without recovery, the specified teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.TaskSetup(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskSetupContext})">
            <summary>
            Allows registration of an action that's executed before each task is run.
            If the task setup fails, its task will not be executed but the task teardown will be performed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.TaskTeardown(System.Action{Cake.Core.ICakeContext,Cake.Core.ITaskTeardownContext})">
            <summary>
            Allows registration of an action that's executed after each task has been run.
            If a task setup action or a task fails with or without recovery, the specified task teardown action will still be executed.
            </summary>
            <param name="action">The action to be executed.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptHost.RunTarget(System.String)">
            <summary>
            Runs the specified target.
            </summary>
            <param name="target">The target to run.</param>
            <returns>The resulting report.</returns>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptHost.Engine">
            <summary>
            Gets the engine.
            </summary>
            <value>The engine.</value>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptHost.Context">
            <summary>
            Gets the context.
            </summary>
            <value>The context.</value>
        </member>
        <member name="P:Cake.Core.Scripting.ScriptHost.Tasks">
            <summary>
            Gets all registered tasks.
            </summary>
            <value>The registered tasks.</value>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptProcessor">
            <summary>
            Implementation of a script processor.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptProcessor.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog,System.Collections.Generic.IEnumerable{Cake.Core.Packaging.IPackageInstaller})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptProcessor"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
            <param name="installers">The available package installers.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptProcessor.InstallAddins(Cake.Core.Scripting.Analysis.ScriptAnalyzerResult,Cake.Core.IO.DirectoryPath)">
            <summary>
            Installs the addins.
            </summary>
            <param name="analyzerResult">The analyzer result.</param>
            <param name="installPath">The install path.</param>
            <returns>A list containing file paths to installed addin assemblies.</returns>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptProcessor.InstallTools(Cake.Core.Scripting.Analysis.ScriptAnalyzerResult,Cake.Core.IO.DirectoryPath)">
            <summary>
            Installs the tools specified in the build scripts.
            </summary>
            <param name="analyzerResult">The analyzer result.</param>
            <param name="installPath">The install path.</param>
        </member>
        <member name="T:Cake.Core.Scripting.ScriptRunner">
            <summary>
            Responsible for running scripts.
            </summary>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptRunner.#ctor(Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog,Cake.Core.Scripting.IScriptEngine,Cake.Core.Scripting.IScriptAliasFinder,Cake.Core.Scripting.Analysis.IScriptAnalyzer,Cake.Core.Scripting.IScriptProcessor,Cake.Core.Scripting.IScriptConventions)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Scripting.ScriptRunner"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
            <param name="engine">The session factory.</param>
            <param name="aliasFinder">The alias finder.</param>
            <param name="analyzer">The script analyzer.</param>
            <param name="processor">The script processor.</param>
            <param name="conventions">The script conventions.</param>
        </member>
        <member name="M:Cake.Core.Scripting.ScriptRunner.Run(Cake.Core.Scripting.IScriptHost,Cake.Core.IO.FilePath,System.Collections.Generic.IDictionary{System.String,System.String})">
            <summary>
            Runs the script using the specified script host.
            </summary>
            <param name="host">The script host.</param>
            <param name="scriptPath">The script.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="T:Cake.Core.TaskSetupContext">
            <summary>
            Acts as a context providing info about a <see cref="T:Cake.Core.CakeTask"/> before its invocation.
            </summary>
        </member>
        <member name="M:Cake.Core.TaskSetupContext.#ctor(Cake.Core.ICakeTaskInfo)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.TaskSetupContext"/> class.
            </summary>
            <param name="task">The task.</param>
        </member>
        <member name="P:Cake.Core.TaskSetupContext.Task">
            <summary>
            Gets the <see cref="T:Cake.Core.ICakeTaskInfo"/> describing the <see cref="T:Cake.Core.CakeTask"/> that has just been invoked.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="T:Cake.Core.TaskTeardownContext">
            <summary>
            Acts as a context providing info about a <see cref="T:Cake.Core.ICakeTaskInfo"/> following its invocation.
            </summary>
        </member>
        <member name="M:Cake.Core.TaskTeardownContext.#ctor(Cake.Core.ICakeTaskInfo,System.TimeSpan,System.Boolean)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.TaskTeardownContext"/> class.
            </summary>
            <param name="task">The task.</param>
            <param name="duration">The duration of the task.</param>
            <param name="skipped">if set to <c>true</c>, the task was not executed.</param>
        </member>
        <member name="P:Cake.Core.TaskTeardownContext.Task">
            <summary>
            Gets the <see cref="T:Cake.Core.ICakeTaskInfo"/> describing the <see cref="T:Cake.Core.CakeTask"/> that has just been invoked.
            </summary>
            <value>
            The task.
            </value>
        </member>
        <member name="P:Cake.Core.TaskTeardownContext.Duration">
            <summary>
            Gets the duration of the <see cref="T:Cake.Core.CakeTask"/>'s execution.
            </summary>
            <value>
            The duration of the <see cref="T:Cake.Core.CakeTask"/>'s execution.
            </value>
        </member>
        <member name="P:Cake.Core.TaskTeardownContext.Skipped">
            <summary>
            Gets a value indicating whether the <see cref="T:Cake.Core.CakeTask"/> was skipped (not executed).
            </summary>
            <value>
            <c>true</c> if skipped; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Core.Text.ITextTransformationTemplate">
            <summary>
            Represents a text template.
            </summary>
        </member>
        <member name="M:Cake.Core.Text.ITextTransformationTemplate.Register(System.String,System.Object)">
            <summary>
            Registers a key and an associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cake.Core.Text.ITextTransformationTemplate.Render">
            <summary>
            Renders the text template using the registered tokens.
            </summary>
            <returns>The rendered template.</returns>
        </member>
        <member name="T:Cake.Core.Text.TextTransformationTemplate">
            <summary>
            Provides template functionality for simple text transformations.
            </summary>
        </member>
        <member name="M:Cake.Core.Text.TextTransformationTemplate.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Text.TextTransformationTemplate"/> class.
            </summary>
            <param name="template">The template.</param>
        </member>
        <member name="M:Cake.Core.Text.TextTransformationTemplate.#ctor(System.String,System.Tuple{System.String,System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Text.TextTransformationTemplate"/> class.
            </summary>
            <param name="template">The template.</param>
            <param name="placeholder">The key placeholder.</param>
        </member>
        <member name="M:Cake.Core.Text.TextTransformationTemplate.Register(System.String,System.Object)">
            <summary>
            Registers a key and an associated value.
            </summary>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
        </member>
        <member name="M:Cake.Core.Text.TextTransformationTemplate.Render">
            <summary>
            Renders the template using the registered tokens.
            </summary>
            <returns>The rendered template.</returns>
        </member>
        <member name="T:Cake.Core.Tooling.Tool`1">
            <summary>
            Base class for tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Tooling.Tool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.Run(`0,Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Runs the tool using the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.Run(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.ProcessSettings,System.Action{Cake.Core.IO.IProcess})">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="processSettings">The process settings</param>
            <param name="postAction">If specified called after process exit</param>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.RunProcess(`0,Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <returns>The process that the tool is running under.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.RunProcess(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.ProcessSettings)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="processSettings">The process settings</param>
            <returns>The process that the tool is running under.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetWorkingDirectory(`0)">
            <summary>
            Gets the working directory.
            Defaults to the currently set working directory.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The working directory for the tool.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetAlternativeToolPaths(`0)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetToolPath(`0)">
            <summary>
            Gets the tool path
            </summary>
            <param name="settings">The settings</param>
            <returns>The full path to the tool</returns>
        </member>
        <member name="M:Cake.Core.Tooling.Tool`1.GetToolPath(Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets the tool path
            </summary>
            <param name="toolPath">The tool path to be used</param>
            <param name="alternativePaths">The alternatives paths to be used to look for the tools</param>
            <param name="toolExeNames">The exe names to be looked for</param>
            <returns>The full path to the tool</returns>
        </member>
        <member name="T:Cake.Core.Tooling.ToolSettings">
            <summary>
            Base class for tool settings.
            </summary>
        </member>
        <member name="P:Cake.Core.Tooling.ToolSettings.ToolPath">
            <summary>
            Gets or sets the tool path.
            </summary>
            <value>The tool path.</value>
        </member>
        <member name="P:Cake.Core.Tooling.ToolSettings.ArgumentCustomization">
            <summary>
            Gets or sets the argument customization.
            </summary>
            <value>The arguments.</value>
        </member>
        <member name="T:Cake.Core.Utilities.Tool`1">
            <summary>
            Base class for tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Core.Utilities.Tool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.Run(`0,Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Runs the tool using the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.Run(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.FilePath)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="toolPath">The tool path to use.</param>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.Run(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings,System.Action{Cake.Core.IO.IProcess})">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="toolPath">The tool path to use.</param>
            <param name="processSettings">The process settings</param>
            <param name="postAction">If specified called after process exit</param>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.RunProcess(`0,Cake.Core.IO.ProcessArgumentBuilder)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <returns>The process that the tool is running under.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.RunProcess(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.FilePath)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="toolPath">The tool path to use.</param>
            <returns>The process that the tool is running under.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.RunProcess(`0,Cake.Core.IO.ProcessArgumentBuilder,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Runs the tool using a custom tool path and the specified settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="arguments">The arguments.</param>
            <param name="toolPath">The tool path to use.</param>
            <param name="processSettings">The process settings</param>
            <returns>The process that the tool is running under.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.GetToolPath(`0,Cake.Core.IO.FilePath)">
            <summary>
            Gets the tool path.
            </summary>
            <param name="settings">The settings.</param>
            <param name="toolPath">The provided tool path (if any).</param>
            <returns>The tool path.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.GetWorkingDirectory(`0)">
            <summary>
            Gets the working directory.
            Defaults to the currently set working directory.
            </summary>
            <param name="settings">The settings.</param>
            <returns>The working directory for the tool.</returns>
        </member>
        <member name="M:Cake.Core.Utilities.Tool`1.GetAlternativeToolPaths(`0)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
    </members>
</doc>
