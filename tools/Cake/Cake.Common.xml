<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Cake.Common</name>
    </assembly>
    <members>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo">
            <summary>
            Provides AppVeyor environment information for a current build.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.AppVeyorInfo">
            <summary>
            Base class used to provide information about the AppVeyor environment.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentString(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.String"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentInteger(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorInfo.GetEnvironmentBoolean(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.ApiUrl">
            <summary>
            Gets the AppVeyor build agent API URL.
            </summary>
            <value>
              The AppVeyor build agent API URL.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.JobId">
            <summary>
            Gets the AppVeyor unique job ID.
            </summary>
            <value>
              The AppVeyor unique job ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.JobName">
            <summary>
            Gets the AppVeyor Job Name.
            </summary>
            <value>
              The AppVeyor Job Name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.ScheduledBuild">
            <summary>
            Gets a value indicating whether the build runs by scheduler.
            </summary>
            <value>
              <c>true</c> if the build runs by scheduler; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Platform">
            <summary>
            Gets the platform name set on build tab of project settings (or through platform parameter in appveyor.yml).
            </summary>
            <value>
              The platform name set on build tab of project settings (or through platform parameter in appveyor.yml).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Configuration">
            <summary>
            Gets the configuration name set on build tab of project settings (or through configuration parameter in appveyor.yml).
            </summary>
            <value>
              The configuration name set on build tab of project settings (or through configuration parameter in appveyor.yml).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Project">
            <summary>
            Gets AppVeyor project information.
            </summary>
            <value>
              The AppVeyor project information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Build">
            <summary>
            Gets AppVeyor build information.
            </summary>
            <value>
              The AppVeyor build information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.PullRequest">
            <summary>
            Gets AppVeyor pull request information.
            </summary>
            <value>
              The AppVeyor pull request information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorEnvironmentInfo.Repository">
            <summary>
            Gets AppVeyor repository information.
            </summary>
            <value>
              The AppVeyor repository information.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.AppVeyorProvider">
            <summary>
            Responsible for communicating with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.IAppVeyorProvider">
            <summary>
            Represents a service that communicates with AppVeyor.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.IAppVeyorProvider.UploadArtifact(Cake.Core.IO.FilePath)">
            <summary>
            Uploads an AppVeyor artifact.
            </summary>
            <param name="path">The file path of the artifact to upload.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.IAppVeyorProvider.UpdateBuildVersion(System.String)">
            <summary>
            Updates the build version.
            </summary>
            <param name="version">The new build version.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.IAppVeyorProvider.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <value>
            <c>true</c> if the current build is running on AppVeyor.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.IAppVeyorProvider.Environment">
            <summary>
            Gets the AppVeyor environment.
            </summary>
            <value>
            The AppVeyor environment.
            </value>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.#ctor(Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorProvider"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.UploadArtifact(Cake.Core.IO.FilePath)">
            <summary>
            Uploads an AppVeyor artifact.
            </summary>
            <param name="path">The file path of the artifact to upload.</param>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.AppVeyorProvider.UpdateBuildVersion(System.String)">
            <summary>
            Updates the build version.
            </summary>
            <param name="version">The new build version.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.AppVeyorProvider.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <value>
            <c>true</c> if the current build is running on AppVeyor.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.AppVeyorProvider.Environment">
            <summary>
            Gets the AppVeyor environment.
            </summary>
            <value>
            The AppVeyor environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo">
            <summary>
            Provides AppVeyor build information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Folder">
            <summary>
            Gets the path to the clone directory.
            </summary>
            <value>
            The path to the clone directory.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Id">
            <summary>
            Gets the AppVeyor unique build ID.
            </summary>
            <value>
            The AppVeyor unique build ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Number">
            <summary>
            Gets the build number.
            </summary>
            <value>
            The build number.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorBuildInfo.Version">
            <summary>
            Gets the build version.
            </summary>
            <value>
            The build version.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo">
            <summary>
            Provides AppVeyor commit information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Id">
            <summary>
            Gets commit ID (SHA).
            </summary>
            <value>
              The commit ID (SHA).
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Author">
            <summary>
            Gets the commit author's name.
            </summary>
            <value>
              The commit author's name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Email">
            <summary>
            Gets the commit author's email address.
            </summary>
            <value>
              The commit author's email address.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Timestamp">
            <summary>
            Gets the commit date/time.
            </summary>
            <value>
              The commit date/time.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.Message">
            <summary>
            Gets the commit message.
            </summary>
            <value>
              The commit message.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorCommitInfo.ExtendedMessage">
            <summary>
            Gets the rest of commit message after line break (if exists).
            </summary>
            <value>
              The rest of commit message after line break (if exists).
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo">
            <summary>
            Provides AppVeyor project information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Id">
            <summary>
            Gets the AppVeyor unique project ID.
            </summary>
            <value>
            The AppVeyor unique project ID.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Name">
            <summary>
            Gets the project name.
            </summary>
            <value>
            The project name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorProjectInfo.Slug">
            <summary>
            Gets the project slug (as seen in project details URL).
            </summary>
            <value>
            The project slug (as seen in project details URL).
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo">
            <summary>
            Provides AppVeyor pull request information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.IsPullRequest">
            <summary>
            Gets a value indicating whether the current build was started by a pull request.
            </summary>
            <value>
              <c>true</c> if the current build was started by a pull request; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.Number">
            <summary>
            Gets the GitHub pull request number.
            </summary>
            <value>
              The GitHub pull request number.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorPullRequestInfo.Title">
            <summary>
            Gets the GitHub pull request title.
            </summary>
            <value>
              The GitHub pull request title.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo">
            <summary>
            Provides AppVeyor repository information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Provider">
            <summary>
            Gets the repository provider.
            <list type="bullet">
              <item>
                <description>github</description>
              </item>
              <item>
                <description>bitbucket</description>
              </item>
              <item>
                <description>kiln</description>
              </item>
            </list>
            </summary>
            <value>
              The repository provider.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Scm">
            <summary>
            Gets the revision control system.
            <list type="bullet">
              <item>
                <description>git</description>
              </item>
              <item>
                <description>mercurial</description>
              </item>
            </list>
            </summary>
            <value>
              The revision control system.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Name">
            <summary>
            Gets the repository name in format owner-name/repo-name.
            </summary>
            <value>
              The repository name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Branch">
            <summary>
            Gets the build branch. For pull request commits it is base branch PR is merging into.
            </summary>
            <value>
              The build branch.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Tag">
            <summary>
            Gets the tag information for the build.
            </summary>
            <value>
              The tag information for the build.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorRepositoryInfo.Commit">
            <summary>
            Gets the commit information for the build.
            </summary>
            <value>
              The commit information for the build.
            </value>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo">
            <summary>
            Provides AppVeyor tag information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.IsTag">
            <summary>
            Gets a value indicating whether build was started by pushed tag.
            </summary>
            <value>
              <c>true</c> if build was started by pushed tag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.AppVeyor.Data.AppVeyorTagInfo.Name">
            <summary>
            Gets the name for builds started by tag; otherwise this variable is undefined.
            </summary>
            <value>
              The name of the tag.
            </value>
        </member>
        <member name="T:Cake.Common.Build.BuildSystem">
            <summary>
            Provides functionality for interacting with
            different build systems.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.BuildSystem.#ctor(Cake.Common.Build.AppVeyor.IAppVeyorProvider,Cake.Common.Build.TeamCity.ITeamCityProvider,Cake.Common.Build.MyGet.IMyGetProvider,Cake.Common.Build.Bamboo.IBambooProvider,Cake.Common.Build.ContinuaCI.IContinuaCIProvider)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.BuildSystem"/> class.
            </summary>
            <param name="appVeyorProvider">The AppVeyor Provider.</param>
            <param name="teamCityProvider">The TeamCity Provider.</param>
            <param name="myGetProvider">The MyGet Provider.</param>
            <param name="bambooProvider">The Bamboo Provider.</param>
            <param name="continuaCIProvider">The Continua CI Provider.</param>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnAppVeyor">
            <summary>
            Gets a value indicating whether the current build is running on AppVeyor.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnAppVeyor)
            {
                // Upload artifact to AppVeyor.
                AppVeyor.UploadArtifact("./build/release_x86.zip");
            }
            </code>
            </example>
            <value>
            <c>true</c> if the build currently is running on AppVeyor; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.AppVeyor">
            <summary>
            Gets the AppVeyor Provider.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnAppVeyor)
            {
                // Upload artifact to AppVeyor.
                BuildSystem.AppVeyor.UploadArtifact("./build/release_x86.zip");
            }
            </code>
            </example>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnTeamCity">
            <summary>
            Gets a value indicating whether the current build is running on TeamCity.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnTeamCity)
            {
                TeamCity.ProgressMessage("Doing an action...");
                // Do action...
            }
            </code>
            </example>
            <value>
            <c>true</c> if the build currently is running on TeamCity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.TeamCity">
            <summary>
            Gets the TeamCity Provider.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnTeamCiy)
            {
                // Set the build number.
                BuildSystem.TeamCity.SetBuildNumber("1.2.3.4");
            }
            </code>
            </example>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnMyGet">
            <summary>
            Gets a value indicating whether the current build is running on MyGet.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnMyGet)
            {
                MyGet.BuildProblem("Something went wrong...");
                // Do action...
            }
            </code>
            </example>
            <value>
            <c>true</c> if the build currently is running on MyGet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.MyGet">
            <summary>
            Gets the MyGet Provider.
            </summary>
            <example>
            <code>
            if(BuildSystem.IsRunningOnMyGet)
            {
                // Set the build number.
                BuildSystem.MyGet.SetBuildNumber("1.2.3.4");
            }
            </code>
            </example>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnBamboo">
             <summary>
             Gets a value indicating whether the current build is running on Bamboo.
             </summary>
             <example>
             <code>
             if(BuildSystem.IsRunningOnBamboo)
             {
                 // Get the build number.
                 var buildNumber = BuildSystem.Bamboo.Number;
            
             }
             </code>
             </example>
             <value>
             <c>true</c> if the build currently is running on Bamboo; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.Bamboo">
             <summary>
             Gets the Bamboo Provider.
             </summary>
             <example>
             <code>
             if(BuildSystem.IsRunningOnBamboo)
             {
                 //Get the Bamboo Plan Name
                 var planName = BuildSystem.Bamboo.Project.PlanName
            
             }
             </code>
             </example>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsRunningOnContinuaCI">
             <summary>
             Gets a value indicating whether the current build is running on Continua CI.
             </summary>
             <example>
             <code>
             if(BuildSystem.IsRunningOnContinuaCI)
             {
                 // Get the build version.
                 var buildVersion = BuildSystem.ContinuaCI.Environment.Build.Version;
            
             }
             </code>
             </example>
             <value>
             <c>true</c> if the build currently is running on Continua CI; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.ContinuaCI">
             <summary>
             Gets the Continua CI Provider.
             </summary>
             <example>
             <code>
             if(BuildSystem.IsRunningOnContinuaCI)
             {
                 //Get the Continua CI Project Name
                 var projectName = BuildSystem.ContinuaCI.Environment.Project.Name
            
             }
             </code>
             </example>
        </member>
        <member name="P:Cake.Common.Build.BuildSystem.IsLocalBuild">
             <summary>
             Gets a value indicating whether the current build is local build.
             </summary>
             <example>
             <code>
             // Get a flag telling us if this is a local build or not.
             var isLocal = BuildSystem.IsLocalBuild;
            
             // Define a task that only runs locally.
             Task("LocalOnly")
               .WithCriteria(isLocal)
               .Does(() =>
             {
             });
             </code>
             </example>
             <value>
               <c>true</c> if the current build is local build; otherwise, <c>false</c>.
             </value>
        </member>
        <member name="T:Cake.Common.Build.BuildSystemAliases">
            <summary>
            Contains functionality related to build systems.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.BuildSystem(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.BuildSystem"/> instance that can
            be used to query for information about the current build system.
            </summary>
            <example>
            <code>
            var isLocal = BuildSystem.IsLocalBuild;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="T:Cake.Common.Build.BuildSystem"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.AppVeyor(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.AppVeyor.AppVeyorProvider"/> instance that can
            be used to manipulate the AppVeyor environment.
            </summary>
            <example>
            <code>
            var isAppVeyorBuild = AppVeyor.IsRunningOnAppVeyor;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.AppVeyor"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.TeamCity(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.TeamCity.TeamCityProvider"/> instance that can
            be used to manipulate the TeamCity environment.
            </summary>
            <example>
            <code>
            var isTeamCityBuild = TeamCity.IsRunningOnTeamCity;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.TeamCity"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.MyGet(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.MyGet.MyGetProvider"/> instance that can
            be used to manipulate the MyGet environment.
            </summary>
            <example>
            <code>
            var isMyGetBuild = MyGet.IsRunningOnMyGet;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.MyGet"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.Bamboo(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.Bamboo.BambooProvider"/> instance that can
            be used to manipulate the Bamboo environment.
            </summary>
            <example>
            <code>
            var isBambooBuild = Bamboo.IsRunningBamboo;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.Bamboo"/> instance.</returns>
        </member>
        <member name="M:Cake.Common.Build.BuildSystemAliases.ContinuaCI(Cake.Core.ICakeContext)">
            <summary>
            Gets a <see cref="T:Cake.Common.Build.ContinuaCI.ContinuaCIProvider"/> instance that can
            be used to manipulate the Continua CI environment.
            </summary>
            <example>
            <code>
            var isContinuaCIBuild = ContinuaCI.IsRunningContinuaCI;
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>A <see cref="N:Cake.Common.Build.ContinuaCI"/> instance.</returns>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.ContinuaCIInfo">
            <summary>
            Base class used to provide information about the Continua CI environment.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.ContinuaCIInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentString(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.String"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentInteger(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentBoolean(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentDateTime(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.DateTime"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentLong(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Int64"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentTimeSpan(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.TimeSpan"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentStringList(System.String)">
            <summary>
            Gets an environment variable as an array of <see cref="T:System.String"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable value split by comma into an array of values.</returns>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIInfo.GetEnvironmentStringDictionary(System.String)">
            <summary>
            Gets matching list of environment variables as an dictionary of <see cref="T:System.String"/>.
            </summary>
            <param name="variablePrefix">The prefix for the environment variables name.</param>
            <returns>A dictionary of environment variables starting with variablePrefix</returns>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo">
            <summary>
            Provides Continua CI build information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.#ctor(Cake.Core.ICakeEnvironment,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="prefix">The prefix for environment variables in this clas</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.Id">
            <summary>
            Gets the build id.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.Version">
            <summary>
            Gets the build version.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.StartedBy">
            <summary>
            Gets the name of the user or trigger starting the build.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.IsFeatureBranchBuild">
            <summary>
            Gets a value indicating whether the build uses the feature branch.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.BuildNumber">
            <summary>
            Gets the build number.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.Started">
            <summary>
            Gets the build start date and time.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.UsesDefaultBranch">
            <summary>
            Gets a value indicating whether the build uses the default branch.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.HasNewChanges">
            <summary>
            Gets a value indicating whether the build has new changes.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.ChangesetCount">
            <summary>
            Gets build the number of changesets associated with this build
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.IssueCount">
            <summary>
            Gets build the number of issues associated with this build
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.Elapsed">
            <summary>
            Gets build elapsed time on queue as a time span.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.TimeOnQueue">
            <summary>
            Gets build time on queue in ticks.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.Repositories">
            <summary>
            Gets list of repository names
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.RepositoryBranches">
            <summary>
            Gets list of repository branch names
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.TriggeringBranch">
            <summary>
            Gets triggering branch name
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.ChangesetRevisions">
            <summary>
            Gets list of changeset revisions
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.ChangesetUserNames">
            <summary>
            Gets list of changeset user names
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.ChangesetTagNames">
            <summary>
            Gets list of changeset tag names
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIBuildInfo.LatestChangeset">
            <summary>
            Gets the latest build changeset
            </summary>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo">
            <summary>
            Provides Continua CI changeset information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.#ctor(Cake.Core.ICakeEnvironment,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="prefix">The environment variable key prefix.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.Revision">
            <summary>
            Gets the revision used to build this release. Format depends on the VCS used.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.Branch">
            <summary>
            Gets the changeset branch name
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.Created">
            <summary>
            Gets the changeset created date and time.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.FileCount">
            <summary>
            Gets the count of the number of files in the changeset.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.UserName">
            <summary>
            Gets the changeset author user/committer name
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.TagCount">
            <summary>
            Gets the count of the number of tags associated with the changeset.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.IssueCount">
            <summary>
            Gets the count of the number of tags associated with the changeset.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.TagNames">
            <summary>
            Gets list of changeset tag names
            </summary>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIChangesetInfo.IssueNames">
            <summary>
            Gets list of changeset issue names
            </summary>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo">
            <summary>
            Provides Continua CI environment information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.Configuration">
            <summary>
            Gets Continua CI configuration information.
            </summary>
            <value>
              The Continua CI configuration information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.Project">
            <summary>
            Gets Continua CI project information.
            </summary>
            <value>
              The Continua CI project information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.Build">
            <summary>
            Gets Continua CI build information.
            </summary>
            <value>
              The Continua CI build information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.Variable">
            <summary>
            Gets Continua CI build variables.
            </summary>
            <value>
              The Continua CI build variables.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.AgentProperty">
            <summary>
            Gets Continua CI build agent properties
            </summary>
            <value>
              The Continua CI build agent properties.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIEnvironmentInfo.Version">
            <summary>
            Gets Continua CI product version.
            </summary>
            <value>
              The Continua CI product version.
            </value>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIProjectInfo">
            <summary>
            Provides Continua CI project information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.Data.ContinuaCIProjectInfo.#ctor(Cake.Core.ICakeEnvironment,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIProjectInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="prefix">The environment variable key prefix.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIProjectInfo.Name">
            <summary>
            Gets the Continua CI Project Name
            </summary>
            <value>
              The Continua CI Project Name.
            </value>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIConfigurationInfo">
            <summary>
            Provides Continua CI configuration information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.Data.ContinuaCIConfigurationInfo.#ctor(Cake.Core.ICakeEnvironment,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.Data.ContinuaCIConfigurationInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
            <param name="prefix">The environment variable key prefix.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.Data.ContinuaCIConfigurationInfo.Name">
            <summary>
            Gets the Continua CI Configuration Name
            </summary>
            <value>
              The Continua CI Configuration Name.
            </value>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.IContinuaCIProvider">
            <summary>
            Represents a Continua CI provider.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.WriteMessage(System.String,Cake.Common.Build.ContinuaCI.ContinuaCIMessageType)">
            <summary>
            Write a status message to the Continua CI build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.WriteStartGroup(System.String)">
            <summary>
            Write the start of a message group to the Continua CI build log.
            </summary>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.WriteEndBlock(System.String)">
            <summary>
            Write the end of a message block to the Continua CI build log.
            </summary>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.SetVariable(System.String,System.String,System.Boolean)">
            <summary>
            Set a Continua CI build variable.
            </summary>
            <param name="name">Name of the variable to set.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="skipIfNotDefined">Set to 'true' to prevent the build failing if the variable has not been defined for the configuration..</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.SetBuildVersion(System.String)">
            <summary>
            Set a Continua CI build version.
            </summary>
            <param name="version">The new build version.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.SetBuildStatus(System.String)">
            <summary>
            Set a Continua CI build status message, which is shown on the build details page when a build is running.
            </summary>
            <param name="text">The new build status text.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.IsRunningOnContinuaCI">
            <summary>
            Gets a value indicating whether the current build is running on Continua CI.
            </summary>
            <value>
            <c>true</c> if the current build is running on Continua CI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.IContinuaCIProvider.Environment">
            <summary>
            Gets the Continua CI environment.
            </summary>
            <value>
            The Continua CI environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType">
            <summary>
            Provides the known values for Continua CI Message Types
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Debug">
            <summary>
            Debug Message
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Success">
            <summary>
            Success Message
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Information">
            <summary>
            Information Message
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Warning">
            <summary>
            Warning Message
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Error">
            <summary>
            Error Message
            </summary>
        </member>
        <member name="F:Cake.Common.Build.ContinuaCI.ContinuaCIMessageType.Fatal">
            <summary>
            Fatal Message
            </summary>
        </member>
        <member name="T:Cake.Common.Build.ContinuaCI.ContinuaCIProvider">
            <summary>
            Responsible for communicating with Continua CI.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.ContinuaCI.ContinuaCIProvider"/> class.
            </summary>
            <param name="environment">The cake environment.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.WriteMessage(System.String,Cake.Common.Build.ContinuaCI.ContinuaCIMessageType)">
            <summary>
            Write a status message to the Continua CI build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.WriteStartGroup(System.String)">
            <summary>
            Write the start of a message group to the Continua CI build log.
            </summary>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.WriteEndBlock(System.String)">
            <summary>
            Write the end of a message block to the Continua CI build log.
            </summary>
            <param name="groupName">Group name.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.SetVariable(System.String,System.String,System.Boolean)">
            <summary>
            Set a Continua CI build variable.
            </summary>
            <param name="name">Name of the variable to set.</param>
            <param name="value">Value to assign to the variable.</param>
            <param name="skipIfNotDefined">Set to 'true' to prevent the build failing if the variable has not been defined for the configuration..</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.SetBuildVersion(System.String)">
            <summary>
            Set a Continua CI build version.
            </summary>
            <param name="version">The new build version.</param>
        </member>
        <member name="M:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.SetBuildStatus(System.String)">
            <summary>
            Set a Continua CI build status message, which is shown on the build details page when a build is running.
            </summary>
            <param name="text">The new build status text.</param>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.IsRunningOnContinuaCI">
            <summary>
            Gets a value indicating whether the current build is running on Continua CI.
            </summary>
            <value>
            <c>true</c> if the current build is running on Continua CI; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.ContinuaCI.ContinuaCIProvider.Environment">
            <summary>
            Gets the Continua CI environment.
            </summary>
            <value>
            The Continua CI environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.MyGet.IMyGetProvider">
            <summary>
            Represents a MyGet provider.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.MyGet.IMyGetProvider.BuildProblem(System.String)">
            <summary>
            Report a build problem to MyGet.
            </summary>
            <param name="description">Description of build problem.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.IMyGetProvider.SetParameter(System.String,System.String)">
            <summary>
            Allows setting an environment variable that can be used by a future process.
            </summary>
            <param name="name">Name of the parameter to set.</param>
            <param name="value">Value to assign to the parameter.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.IMyGetProvider.WriteStatus(System.String,Cake.Common.Build.MyGet.MyGetBuildStatus,System.String)">
            <summary>
            Write a status message to the MyGet build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
            <param name="errorDetails">Error details if status is error.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.IMyGetProvider.SetBuildNumber(System.String)">
            <summary>
            Tells MyGet to change the current build number.
            </summary>
            <param name="buildNumber">The required build number.</param>
        </member>
        <member name="P:Cake.Common.Build.MyGet.IMyGetProvider.IsRunningOnMyGet">
            <summary>
            Gets a value indicating whether the current build is running on MyGet.
            </summary>
            <value>
            <c>true</c> if the current build is running on MyGet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Build.MyGet.MyGetProvider">
            <summary>
            Responsible for communicating with MyGet.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.MyGet.MyGetProvider.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.MyGet.MyGetProvider"/> class.
            </summary>
            <param name="environment">The cake environment.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.MyGetProvider.BuildProblem(System.String)">
            <summary>
            Report a build problem to MyGet.
            </summary>
            <param name="description">Description of build problem.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.MyGetProvider.SetParameter(System.String,System.String)">
            <summary>
            Allows setting an environment variable that can be used by a future process.
            </summary>
            <param name="name">Name of the parameter to set.</param>
            <param name="value">Value to assign to the parameter.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.MyGetProvider.WriteStatus(System.String,Cake.Common.Build.MyGet.MyGetBuildStatus,System.String)">
            <summary>
            Write a status message to the MyGet build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
            <param name="errorDetails">Error details if status is error.</param>
        </member>
        <member name="M:Cake.Common.Build.MyGet.MyGetProvider.SetBuildNumber(System.String)">
            <summary>
            Tells MyGet to change the current build number.
            </summary>
            <param name="buildNumber">The required build number.</param>
        </member>
        <member name="P:Cake.Common.Build.MyGet.MyGetProvider.IsRunningOnMyGet">
            <summary>
            Gets a value indicating whether the current build is running on MyGet.
            </summary>
            <value>
            <c>true</c> if the current build is running on MyGet; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Build.MyGet.MyGetBuildStatus">
            <summary>
            Provides the known values for MyGet Build Status
            </summary>
        </member>
        <member name="F:Cake.Common.Build.MyGet.MyGetBuildStatus.Failure">
            <summary>
            Failure Status
            </summary>
        </member>
        <member name="F:Cake.Common.Build.MyGet.MyGetBuildStatus.Error">
            <summary>
            Error Status
            </summary>
        </member>
        <member name="F:Cake.Common.Build.MyGet.MyGetBuildStatus.Warning">
            <summary>
            Warning Status
            </summary>
        </member>
        <member name="F:Cake.Common.Build.MyGet.MyGetBuildStatus.Normal">
            <summary>
            Normal Status
            </summary>
        </member>
        <member name="T:Cake.Common.Build.TeamCity.ITeamCityProvider">
            <summary>
            Represents a TeamCity provider.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.BuildProblem(System.String,System.String)">
            <summary>
            Report a build problem to TeamCity.
            </summary>
            <param name="description">Description of build problem.</param>
            <param name="identity">Build identity.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.ImportData(System.String,Cake.Core.IO.FilePath)">
            <summary>
            Tell TeamCity to import data of a given type.
            </summary>
            <param name="type">Date type.</param>
            <param name="path">Data file path.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.PublishArtifacts(System.String)">
            <summary>
            Tells TeamCity to publish artifacts in the given directory.
            </summary>
            <param name="path">Path to artifacts.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.SetBuildNumber(System.String)">
            <summary>
            Tells TeamCity to change the current build number.
            </summary>
            <param name="buildNumber">The required build number.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteEndBlock(System.String)">
            <summary>
            Write the end of a message block to the TeamCity build log.
            </summary>
            <param name="blockName">Block name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteEndBuildBlock(System.String)">
            <summary>
            Write the end of a build block to the TeamCity build log.
            </summary>
            <param name="compilerName">Build compiler name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteEndProgress(System.String)">
            <summary>
            Write a progressFinish message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteProgressMessage(System.String)">
            <summary>
            Write a progress message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteStartBlock(System.String)">
            <summary>
            Write the start of a message block to the TeamCity build log.
            </summary>
            <param name="blockName">Block name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteStartBuildBlock(System.String)">
            <summary>
            Write the start of a build block to the TeamCity build log.
            </summary>
            <param name="compilerName">Build compiler name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteStartProgress(System.String)">
            <summary>
            Write a progressStart message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.ITeamCityProvider.WriteStatus(System.String,System.String,System.String)">
            <summary>
            Write a status message to the TeamCity build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
            <param name="errorDetails">Error details if status is error.</param>
        </member>
        <member name="P:Cake.Common.Build.TeamCity.ITeamCityProvider.IsRunningOnTeamCity">
            <summary>
            Gets a value indicating whether the current build is running on TeamCity.
            </summary>
            <value>
            <c>true</c> if the current build is running on TeamCity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions">
            <summary>
            A set of extensions for allowing "using" with TeamCity "blocks".
            </summary>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.Block(Cake.Common.Build.TeamCity.TeamCityProvider,System.String)">
            <summary>
            Writes the start of a TeamCity message block, then returns a disposable that write the end on Dispose.
            </summary>
            <param name="teamCityProvider">TeamCity provider.</param>
            <param name="blockName">The name of the report block.</param>
            <returns>A disposable wrapper the writes the report block end.</returns>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.BuildBlock(Cake.Common.Build.TeamCity.TeamCityProvider,System.String)">
            <summary>
            Writes the start of a TeamCity build block, then returns a disposable that write the end on Dispose.
            </summary>
            <param name="teamCityProvider">TeamCity provider.</param>
            <param name="compilerName">The name of the build block.</param>
            <returns>A disposable wrapper the writes the build block end.</returns>
        </member>
        <member name="T:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.TeamCityActionDisposable">
            <summary>
            Disposable helper for writing TeamCity message blocks.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.TeamCityActionDisposable.#ctor(Cake.Common.Build.TeamCity.ITeamCityProvider,System.Action{Cake.Common.Build.TeamCity.ITeamCityProvider})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.TeamCityActionDisposable"/> class.
            </summary>
            <param name="teamCityProvider">TeamCity provider.</param>
            <param name="disposeAction">The action to do on Dispose.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityDisposableExtensions.TeamCityActionDisposable.Dispose">
            <summary>
            Writes the end block for this message block.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.TeamCity.TeamCityProvider">
            <summary>
            Responsible for communicating with TeamCity.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.TeamCity.TeamCityProvider"/> class.
            </summary>
            <param name="environment">The cake environment.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteProgressMessage(System.String)">
            <summary>
            Write a progress message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteStartProgress(System.String)">
            <summary>
            Write a progressStart message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteEndProgress(System.String)">
            <summary>
            Write a progressFinish message to the TeamCity build log.
            </summary>
            <param name="message">Build log message.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteStartBlock(System.String)">
            <summary>
            Write the start of a message block to the TeamCity build log.
            </summary>
            <param name="blockName">Block name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteEndBlock(System.String)">
            <summary>
            Write the end of a message block to the TeamCity build log.
            </summary>
            <param name="blockName">Block name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteStartBuildBlock(System.String)">
            <summary>
            Write the start of a build block to the TeamCity build log.
            </summary>
            <param name="compilerName">Build compiler name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteEndBuildBlock(System.String)">
            <summary>
            Write the end of a build block to the TeamCity build log.
            </summary>
            <param name="compilerName">Build compiler name.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.WriteStatus(System.String,System.String,System.String)">
            <summary>
            Write a status message to the TeamCity build log.
            </summary>
            <param name="message">Message contents.</param>
            <param name="status">Build status.</param>
            <param name="errorDetails">Error details if status is error.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.ImportData(System.String,Cake.Core.IO.FilePath)">
            <summary>
            Tell TeamCity to import data of a given type.
            </summary>
            <param name="type">Date type.</param>
            <param name="path">Data file path.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.BuildProblem(System.String,System.String)">
            <summary>
            Report a build problem to TeamCity.
            </summary>
            <param name="description">Description of build problem.</param>
            <param name="identity">Build identity.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.PublishArtifacts(System.String)">
            <summary>
            Tells TeamCity to publish artifacts in the given directory.
            </summary>
            <param name="path">Path to artifacts.</param>
        </member>
        <member name="M:Cake.Common.Build.TeamCity.TeamCityProvider.SetBuildNumber(System.String)">
            <summary>
            Tells TeamCity to change the current build number.
            </summary>
            <param name="buildNumber">The required build number.</param>
        </member>
        <member name="P:Cake.Common.Build.TeamCity.TeamCityProvider.IsRunningOnTeamCity">
            <summary>
            Gets a value indicating whether the current build is running on TeamCity.
            </summary>
            <value>
            <c>true</c> if the current build is running on TeamCity; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.IBambooProvider">
            <summary>
            Represents a Bamboo provider.
            </summary>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.IBambooProvider.IsRunningOnBamboo">
            <summary>
            Gets a value indicating whether the current build is running on Bamboo.
            </summary>
            <value>
            <c>true</c> if the current build is running on Bamboo; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.IBambooProvider.Environment">
            <summary>
            Gets the Bamboo environment.
            </summary>
            <value>
            The Bamboo environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.BambooProvider">
            <summary>
            Responsible for communicating with Bamboo.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.BambooProvider.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.BambooProvider"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.BambooProvider.IsRunningOnBamboo">
            <summary>
            Gets a value indicating whether the current build is running on Bamboo.
            </summary>
            <value>
            <c>true</c> if the current build is running on Bamboo.; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.BambooProvider.Environment">
            <summary>
            Gets the Bamboo environment.
            </summary>
            <value>
            The Bamboo environment.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.BambooInfo">
            <summary>
            Base class used to provide information about the Bamboo environment.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.BambooInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.BambooInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.BambooInfo.GetEnvironmentString(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.String"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.BambooInfo.GetEnvironmentInteger(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Int32"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.BambooInfo.GetEnvironmentBoolean(System.String)">
            <summary>
            Gets an environment variable as a <see cref="T:System.Boolean"/>.
            </summary>
            <param name="variable">The environment variable name.</param>
            <returns>The environment variable.</returns>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo">
            <summary>
            Provides Bamboo environment information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo.Plan">
            <summary>
            Gets Bamboo plan information.
            </summary>
            <value>
              The Bamboo plan information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo.Build">
            <summary>
            Gets Bamboo build information.
            </summary>
            <value>
              The Bamboo build information.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooEnvironmentInfo.Repository">
            <summary>
            Gets Bamboo repository information.
            </summary>
            <value>
              The Bamboo repository information.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooBuildInfo">
            <summary>
            Provides Bamboo build information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooBuildInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.Folder">
            <summary>
            Gets the path to the clone directory.
            </summary>
            <value>
            The path to the clone directory.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.Number">
            <summary>
            Gets the build number.
            </summary>
            <value>
            The build number.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.BuildKey">
            <summary>
            Gets the job key for the current job, in the form PROJECT-PLAN-JOB, e.g. BAM-MAIN-JOBX
            </summary>
            <value>
              The Bamboo Build Key.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.ResultKey">
            <summary>
            Gets the Bamboo Build Result Key.
            The result key when this job executes, in the form PROJECT-PLAN-JOB-BUILD e.g. BAM-BOO-JOB1-8, where '8' is the build number.
            For deployment projects this variable will not have the JOB component e.g. PROJ-TP-6.
            </summary>
            <value>
              The Build Result Key.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.ResultsUrl">
            <summary>
            Gets the URL of the result in Bamboo once the job has finished executing.
            </summary>
            <value>
              The Bamboo build result url.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.BuildTimestamp">
            <summary>
            Gets the time when build was started in ISO 8601 format e.g. 2010-01-01T01:00:00.000+01:00.
            </summary>
            <value>
              The Bamboo build timestamp.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooBuildInfo.CustomBuild">
            <summary>
            Gets Bamboo custom build information.
            </summary>
            <value>
              The Bamboo custom build information.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooCommitInfo">
            <summary>
            Provides Bamboo commit information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooCommitInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooCommitInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooCommitInfo.RepositoryRevision">
            <summary>
            Gets the revision use to build this release. Format depends on the VCS used.
            </summary>
            <value>
              The commit ID (SHA).
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo">
            <summary>
            Provides Bamboo repository information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo.Scm">
            <summary>
            Gets the revision control system.
            <list type="bullet">
              <item>
                <description>Subversion</description>
              </item>
              <item>
                <description>CVS</description>
              </item>
              <item>
                <description>Perforce</description>
              </item>
              <item>
                <description>Git</description>
              </item>
              <item>
                <description>Mercurial</description>
              </item>
            </list>
            </summary>
            <value>
              The revision control system.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo.Name">
            <summary>
            Gets the repository name as named in Bamboo
            </summary>
            <value>
              The bamboo repository name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo.Branch">
            <summary>
            Gets the build branch.
            </summary>
            <value>
              The build branch.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooRepositoryInfo.Commit">
            <summary>
            Gets the commit information for the build.
            </summary>
            <value>
              The commit information for the build.
            </value>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo">
            <summary>
            Provides Bamboo tag information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo.IsCustomBuild">
            <summary>
            Gets a value indicating whether build was started by pushed tag.
            </summary>
            <value>
              <c>true</c> if build was started by pushed tag; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooCustomBuildInfo.RevisonName">
            <summary>
            Gets the name for builds started by tag; otherwise this variable is undefined.
            </summary>
            <value>
              The name of the tag.
            </value>
        </member>
        <member name="T:Cake.Common.IO.Paths.ConvertableDirectoryPath">
            <summary>
            Represents a <see cref="T:Cake.Core.IO.DirectoryPath"/> that can be easily converted.
            <example>
            To get the underlying <see cref="T:Cake.Core.IO.DirectoryPath"/>:
            <code>
            ConvertableDirectoryPath convertable = Directory("./root");
            DirectoryPath path = (DirectoryPath)convertable;
            </code>
            To combine two directories:
            <code>
            ConvertableDirectoryPath path = Directory("./root") + Directory("other");
            </code>
            To combine a directory with a file:
            <code>
            ConvertableFilePath path = Directory("./root") + File("other.txt");
            </code>
            </example>
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.#ctor(Cake.Core.IO.DirectoryPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Common.IO.Paths.ConvertableDirectoryPath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance
            with another <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance.
            </summary>
            <param name="left">The left directory path operand.</param>
            <param name="right">The right directory path operand.</param>
            <returns>A new directory path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance
            with a <see cref="T:Cake.Core.IO.DirectoryPath"/> instance.
            </summary>
            <param name="left">The left directory path operand.</param>
            <param name="right">The right directory path operand.</param>
            <returns>A new directory path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Common.IO.Paths.ConvertableFilePath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance
            with a <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> instance.
            </summary>
            <param name="directory">The left directory path operand.</param>
            <param name="file">The right file path operand.</param>
            <returns>A new file path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Addition(Cake.Common.IO.Paths.ConvertableDirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Operator that combines A <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> instance
            with a <see cref="T:Cake.Core.IO.FilePath"/> instance.
            </summary>
            <param name="directory">The left directory path operand.</param>
            <param name="file">The right file path operand.</param>
            <returns>A new file path representing a combination of the two provided paths.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Implicit(Cake.Common.IO.Paths.ConvertableDirectoryPath)~Cake.Core.IO.DirectoryPath">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> to <see cref="T:Cake.Core.IO.DirectoryPath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.op_Implicit(Cake.Common.IO.Paths.ConvertableDirectoryPath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableDirectoryPath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableDirectoryPath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cake.Common.IO.Paths.ConvertableDirectoryPath.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The path.</value>
        </member>
        <member name="T:Cake.Common.IO.Paths.ConvertableFilePath">
            <summary>
            Represents a <see cref="T:Cake.Core.IO.FilePath"/> that can be easily converted.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> class.
            </summary>
            <param name="path">The path.</param>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.op_Implicit(Cake.Common.IO.Paths.ConvertableFilePath)~Cake.Core.IO.FilePath">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> to <see cref="T:Cake.Core.IO.FilePath"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion. </returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.op_Implicit(Cake.Common.IO.Paths.ConvertableFilePath)~System.String">
            <summary>
            Performs an implicit conversion from <see cref="T:Cake.Common.IO.Paths.ConvertableFilePath"/> to <see cref="T:System.String"/>.
            </summary>
            <param name="path">The path.</param>
            <returns>The result of the conversion.</returns>
        </member>
        <member name="M:Cake.Common.IO.Paths.ConvertableFilePath.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents this instance.
            </summary>
            <returns>
            A <see cref="T:System.String"/> that represents this instance.
            </returns>
        </member>
        <member name="P:Cake.Common.IO.Paths.ConvertableFilePath.Path">
            <summary>
            Gets the path.
            </summary>
            <value>The actual path.</value>
        </member>
        <member name="T:Cake.Common.NamespaceDoc">
            <summary>
            This namespace contain types used for common operations
            such as parsing release notes, retrieving arguments and
            to read and write environment variables.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.NamespaceDoc">
            <summary>
            This namespace contain types that
            support different build system related tasks.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.AppVeyor.Data.NamespaceDoc">
            <summary>
            This namespace contain types
            representing data used for interaction with AppVeyor.
            </summary>
        </member>
        <member name="T:Cake.Common.Build.TeamCity.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with TeamCity.
            </summary>
        </member>
        <member name="T:Cake.Common.Diagnostics.NamespaceDoc">
            <summary>
            This namespace contain types that
            enable you to interact with build logs.
            </summary>
        </member>
        <member name="T:Cake.Common.IO.NamespaceDoc">
            <summary>
            This namespace contain types that support input and output,
            including the ability to read and write data to streams and to
            interact with the file system.
            </summary>
        </member>
        <member name="T:Cake.Common.IO.Paths.NamespaceDoc">
            <summary>
            This namespace contain types related
            to file system paths.
            </summary>
        </member>
        <member name="T:Cake.Common.IO.Net.NamespaceDoc">
            <summary>
            This namespace contain types related
            to network operations.
            </summary>
        </member>
        <member name="T:Cake.Common.Net.NamespaceDoc">
            <summary>
            This namespace contain types related
            to security aspects such as hashing.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.NamespaceDoc">
            <summary>
            This namespace contain types that
            support interaction with MSBuild solution files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.NamespaceDoc">
            <summary>
            This namespace contain types that
            support interaction with MSBuild project files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.NamespaceDoc">
            <summary>
            This namespace contain types that
            enable you to read or create assembly information files.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.NamespaceDoc">
            <summary>
            This namespace contain types that
            enable you to read XML documentation comments.
            </summary>
        </member>
        <member name="T:Cake.Common.Text.NamespaceDoc">
            <summary>
            This namespace contain types for
            text templating and transformations.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NamespaceDoc">
            <summary>
            This namespace contain types used to interact
            with different third party tools.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Cake.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with Cake.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with ILMerge.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with MSBuild.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with MSTest.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with NuGet.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NamespaceDoc">
            <summary>
            This namespace contain types used to interact
            with the NuGet package installer.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NamespaceDoc">
            <summary>
            This namespace contain types used to
            pack NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NamespaceDoc">
            <summary>
            This namespace contain types used to
            push NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NamespaceDoc">
            <summary>
            This namespace contain types used to
            restore NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetApiKey.NamespaceDoc">
            <summary>
            This namespace contain types used to
            set NuGet API keys.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetProxy.NamespaceDoc">
            <summary>
            This namespace contain types used to
            set proxy settings.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NamespaceDoc">
            <summary>
            This namespace contain types used to
            interact with NuGet sources.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Update.NamespaceDoc">
            <summary>
            This namespace contain types used to
            update NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with NUnit.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with Octopus Deploy.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Roundhouse.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with Roundhouse.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.NamespaceDoc">
            <summary>
            This namespace contain types used for
            signing assemblies with SignTool.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with WiX.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.NamespaceDoc">
            <summary>
            This namespace contain types used
            to interact with XBuild.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.NamespaceDoc">
            <summary>
            This namespace contain types used to interact with XUnit.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Xml.NamespaceDoc">
            <summary>
            This namespace contain types used to
            interact with XML documents.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.HashAlgorithm">
            <summary>
            The hash algorithm to use for a specific operation.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.MD5">
            <summary>
            The MD5 hash algorithm.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.SHA256">
            <summary>
            The SHA256 hash algorithm.
            </summary>
        </member>
        <member name="F:Cake.Common.Security.HashAlgorithm.SHA512">
            <summary>
            The SHA512 hash algorithm.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.FileHash">
            <summary>
            Represents a calculated file hash.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.FileHash.#ctor(Cake.Core.IO.FilePath,System.Byte[],Cake.Common.Security.HashAlgorithm)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Security.FileHash"/> class.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="hash">The computed hash.</param>
            <param name="hashAlgorithm">The algorithm used.</param>
        </member>
        <member name="M:Cake.Common.Security.FileHash.ToHex">
            <summary>
            Convert the file hash to a hexadecimal string.
            </summary>
            <returns>A hexadecimal string representing the computed hash.</returns>
        </member>
        <member name="P:Cake.Common.Security.FileHash.Algorithm">
            <summary>
            Gets the algorithm used for the hash computation.
            </summary>
        </member>
        <member name="P:Cake.Common.Security.FileHash.Path">
            <summary>
            Gets the <see cref="T:Cake.Core.IO.FilePath"/> for the file.
            </summary>
        </member>
        <member name="P:Cake.Common.Security.FileHash.ComputedHash">
            <summary>
            Gets the raw computed hash.
            </summary>
        </member>
        <member name="T:Cake.Common.Security.FileHashCalculator">
            <summary>
            Represents a file hash operation.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.FileHashCalculator.#ctor(Cake.Core.IO.IFileSystem)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Security.FileHashCalculator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
        </member>
        <member name="M:Cake.Common.Security.FileHashCalculator.Calculate(Cake.Core.IO.FilePath,Cake.Common.Security.HashAlgorithm)">
            <summary>
            Calculates the hash for a file using the given algorithm.
            </summary>
            <param name="filePath">The file path.</param>
            <param name="hashAlgorithm">The algorithm to use.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
        </member>
        <member name="T:Cake.Common.Security.SecurityAliases">
            <summary>
            Contains security related functionality, such as calculating file
            hashes.
            </summary>
        </member>
        <member name="M:Cake.Common.Security.SecurityAliases.CalculateFileHash(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Calculates the hash for a given file using the default (SHA256) algorithm.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
            <example>
            <code>
            Information(
               "Cake executable file SHA256 hash: {0}",
               CalculateFileHash("Cake.exe").ToHex());
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Security.SecurityAliases.CalculateFileHash(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Security.HashAlgorithm)">
            <summary>
            Calculates the hash for a given file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="hashAlgorithm">The hash algorithm to use.</param>
            <returns>A <see cref="T:Cake.Common.Security.FileHash"/> instance representing the calculated hash.</returns>
            <example>
            <code>
            Information(
                "Cake executable file MD5 hash: {0}",
                CalculateFileHash("Cake.exe", HashAlgorithm.MD5).ToHex());
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectAliases">
            <summary>
            Contains functionality related to MSBuild project files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectAliases.ParseProject(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses project information from project file
            </summary>
            <param name="context">The context.</param>
            <param name="projectPath">The project file path.</param>
            <returns>A parsed project.</returns>
            <example>
            <code>
            var parsedProject = ParseProject("./src/Cake/Cake.csproj");
            Information(
                @"    Parsed project file:
                Configuration         : {0}
                Platform              : {1}
                OutputType            : {2}
                RootNameSpace         : {3}
                AssemblyName          : {4}
                TargetFrameworkVersion: {5}
                Files                 : {6}",
                parsedProject.Configuration,
                parsedProject.Platform,
                parsedProject.OutputType,
                parsedProject.RootNameSpace,
                parsedProject.AssemblyName,
                parsedProject.TargetFrameworkVersion,
                string.Concat(
                    parsedProject
                        .Files
                        .Select(
                            file=>  string.Format(
                                        "\r\n            {0}",
                                        file.FilePath
                                    )
                        )
                )
            );
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectFile">
            <summary>
            Represents a MSBuild project file.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.FilePath">
            <summary>
            Gets or sets the project file path.
            </summary>
            <value>The project file path.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.RelativePath">
            <summary>
            Gets or sets the relative path to the project file.
            </summary>
            <value>
            The relative path to the project file.
            </value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectFile.Compile">
            <summary>
            Gets or sets a value indicating whether this <see cref="T:Cake.Common.Solution.Project.ProjectFile"/> is compiled.
            </summary>
            <value>
              <c>true</c> if compiled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectParser">
            <summary>
            The MSBuild project file parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses a project file.
            </summary>
            <param name="projectPath">The project path.</param>
            <returns>The parsed project.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectParserResult">
            <summary>
            Represents the content in an MSBuild project file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.ProjectParserResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Collections.Generic.IEnumerable{Cake.Common.Solution.Project.ProjectFile})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.ProjectParserResult"/> class.
            </summary>
            <param name="configuration">The build configuration.</param>
            <param name="platform">The target platform.</param>
            <param name="projectGuid">The unique project identifier.</param>
            <param name="outputType">The compiler output type.</param>
            <param name="rootNameSpace">The default root namespace.</param>
            <param name="assemblyName">Gets the build target assembly name.</param>
            <param name="targetFrameworkVersion">The compiler framework version.</param>
            <param name="files">The project content files.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Configuration">
            <summary>
            Gets the build configuration.
            </summary>
            <value>The build configuration.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Platform">
            <summary>
            Gets the target platform.
            </summary>
            <value>The platform.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.ProjectGuid">
            <summary>
            Gets the unique project identifier.
            </summary>
            <value>The unique project identifier.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.OutputType">
            <summary>
            Gets the compiler output type, i.e. <c>Exe/Library</c>.
            </summary>
            <value>The output type.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.RootNameSpace">
            <summary>
            Gets the default root namespace.
            </summary>
            <value>The root namespace.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.AssemblyName">
            <summary>
            Gets the build target assembly name.
            </summary>
            <value>The assembly name.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.TargetFrameworkVersion">
            <summary>
            Gets the compiler target framework version.
            </summary>
            <value>The target framework version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.ProjectParserResult.Files">
            <summary>
            Gets the project content files.
            </summary>
            <value>The files.</value>
        </member>
        <member name="T:Cake.Common.Solution.Project.ProjectXElement">
            <summary>
            MSBuild Project Xml Element XNames
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Project">
            <summary>
            Project root element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ItemGroup">
            <summary>
            Item group element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Reference">
            <summary>
            Assembly reference element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Import">
            <summary>
            Namespace import element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Compile">
            <summary>
            Namespace compile element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.PropertyGroup">
            <summary>
            Namespace property group element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.RootNamespace">
            <summary>
            Namespace root namespace element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.OutputType">
            <summary>
            Namespace output type element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.AssemblyName">
            <summary>
            Namespace assembly name element
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.TargetFrameworkVersion">
            <summary>
            Gets the namespace for the target framework version element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Configuration">
            <summary>
            Gets the namespace for the configuration element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Platform">
            <summary>
             Gets the namespace for the platform element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ProjectGuid">
            <summary>
            Gets the namespace for the project GUID.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.BootstrapperPackage">
            <summary>
            Gets the namespace for the bootstrapper package element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.ProjectReference">
            <summary>
            Gets the namespace for the project reference element.
            </summary>
        </member>
        <member name="F:Cake.Common.Solution.Project.ProjectXElement.Service">
            <summary>
            Gets the namespace for the service element.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator">
            <summary>
            The assembly info creator.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator.Create(Cake.Core.IO.FilePath,Cake.Common.Solution.Project.Properties.AssemblyInfoSettings)">
            <summary>
            Creates an assembly info file.
            </summary>
            <param name="outputPath">The output path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases">
            <summary>
            Contains functionality related to assembly info.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases.CreateAssemblyInfo(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Solution.Project.Properties.AssemblyInfoSettings)">
            <summary>
            Creates an assembly information file.
            </summary>
            <param name="context">The context.</param>
            <param name="outputPath">The output path.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var file = "./SolutionInfo.cs";
            var version = "0.0.1";
            var buildNo = "123";
            var semVersion = string.Concat(version + "-" + buildNo);
            CreateAssemblyInfo(file, new AssemblyInfoSettings {
                Product = "SampleProject",
                Version = version,
                FileVersion = version,
                InformationalVersion = semVersion,
                Copyright = string.Format("Copyright (c) Contoso 2014 - {0}", DateTime.Now.Year)
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoAliases.ParseAssemblyInfo(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses an existing assembly information file.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyInfoPath">The assembly info path.</param>
            <returns>The content of the assembly info file.</returns>
            <example>
            <code>
            var assemblyInfo = ParseAssemblyInfo("./SolutionInfo.cs");
            Information("Version: {0}", assemblyInfo.AssemblyVersion);
            Information("File version: {0}", assemblyInfo.AssemblyFileVersion);
            Information("Informational version: {0}", assemblyInfo.AssemblyInformationalVersion);
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParser">
            <summary>
            The assembly info parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses information from an assembly info file.
            </summary>
            <param name="assemblyInfoPath">The file path.</param>
            <returns>Information about the assembly info content.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult">
            <summary>
            Represents the content in an assembly info file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.#ctor(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult"/> class.
            </summary>
            <param name="clsCompliant">The assembly CLSCompliant Attribute.</param>
            <param name="company">The assembly Company Attribute.</param>
            <param name="comVisible">The assembly ComVisible Attribute.</param>
            <param name="configuration">The assembly Configuration Attribute.</param>
            <param name="copyright">The assembly Copyright Attribute.</param>
            <param name="description">The assembly Description Attribute.</param>
            <param name="assemblyFileVersion">The assembly file version.</param>
            <param name="guid">The assembly Guid Attribute.</param>
            <param name="assemblyInformationalVersion">The assembly informational version.</param>
            <param name="internalsVisibleTo">The assembly InternalsVisibleTo Attribute.</param>
            <param name="product">The assembly Product Attribute.</param>
            <param name="title">The assembly Title Attribute.</param>
            <param name="trademark">The assembly Trademark Attribute.</param>
            <param name="assemblyVersion">The assembly version.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.ClsCompliant">
            <summary>
            Gets a value indicating whether the assembly is CLSCompliant.
            </summary>
            <value>The assembly CLSCompliant attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Company">
            <summary>
            Gets the assembly Company Attribute.
            </summary>
            <value>The assembly Company attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.ComVisible">
            <summary>
            Gets a value indicating whether the assembly is ComVisible
            </summary>
            <value>The assembly ComVisible attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Configuration">
            <summary>
            Gets the assembly Configuration Attribute.
            </summary>
            <value>The assembly Configuration attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Copyright">
            <summary>
            Gets the assembly Copyright Attribute.
            </summary>
            <value>The assembly Copyright attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Description">
            <summary>
            Gets the assembly Description Attribute.
            </summary>
            <value>The assembly Description attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyFileVersion">
            <summary>
            Gets the assembly file version.
            </summary>
            <value>The assembly file version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Guid">
            <summary>
            Gets the assembly Guid Attribute.
            </summary>
            <value>The assembly Guid attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyInformationalVersion">
            <summary>
            Gets the assembly informational version.
            </summary>
            <value>The assembly informational version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.InternalsVisibleTo">
            <summary>
            Gets the assembly InternalsVisibleTo Attribute.
            </summary>
            <value>The assembly InternalsVisibleTo attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Product">
            <summary>
            Gets the assembly Product Attribute.
            </summary>
            <value>The assembly Product attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Title">
            <summary>
            Gets the assembly Title Attribute.
            </summary>
            <value>The assembly Title attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.Trademark">
            <summary>
            Gets the assembly Trademark Attribute.
            </summary>
            <value>The assembly Trademark attribute.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoParseResult.AssemblyVersion">
            <summary>
            Gets the assembly version.
            </summary>
            <value>The assembly version.</value>
        </member>
        <member name="T:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Solution.Project.Properties.AssemblyInfoCreator"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <value>The assembly title.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Description">
            <summary>
            Gets or sets the description.
            </summary>
            <value>The assembly description.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Guid">
            <summary>
            Gets or sets the unique identifier.
            </summary>
            <value>The unique identifier.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Product">
            <summary>
            Gets or sets the product.
            </summary>
            <value>The assembly product.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Copyright">
            <summary>
            Gets or sets the copyright.
            </summary>
            <value>The copyright.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Trademark">
            <summary>
            Gets or sets the trademark.
            </summary>
            <value>The trademark.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Version">
            <summary>
            Gets or sets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.FileVersion">
            <summary>
            Gets or sets the file version.
            </summary>
            <value>The file version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.InformationalVersion">
            <summary>
            Gets or sets the informational version.
            </summary>
            <value>The informational version.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.ComVisible">
            <summary>
            Gets or sets whether or not the assembly is COM visible.
            </summary>
            <value>Whether or not the assembly is COM visible.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.CLSCompliant">
            <summary>
            Gets or sets whether or not the assembly is CLS compliant.
            </summary>
            <value>Whether or not the assembly is CLS compliant.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Company">
            <summary>
            Gets or sets the company.
            </summary>
            <value>The company.</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.InternalsVisibleTo">
            <summary>
            Gets or sets the name(s) of the assembly(s) that internals should be visible to.
            </summary>
            <value>The name(s) of the assembly(s).</value>
        </member>
        <member name="P:Cake.Common.Solution.Project.Properties.AssemblyInfoSettings.Configuration">
            <summary>
            Gets or sets the configuration of the assembly.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="T:Cake.Common.Diagnostics.LoggingAliases">
            <summary>
            Contains functionality related to logging.
            </summary>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Error(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes an error message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Error("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Error(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an error message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Error(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Warning(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a warning message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Warning("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Warning(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a warning message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Warning(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Information(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes an informational message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Information("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Information(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes an informational message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Information(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Verbose(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a verbose message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Verbose("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Verbose(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a verbose message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Verbose(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Debug(Cake.Core.ICakeContext,System.String,System.Object[])">
            <summary>
            Writes a debug message to the log using the specified format information.
            </summary>
            <param name="context">The context.</param>
            <param name="format">The format.</param>
            <param name="args">The arguments.</param>
            <example>
            <code>
            Debug("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Diagnostics.LoggingAliases.Debug(Cake.Core.ICakeContext,Cake.Core.Diagnostics.LogAction)">
            <summary>
            Writes a debug message to the log using the specified log message action.
            Evaluation message only if verbosity same or more verbose.
            </summary>
            <param name="context">the context.</param>
            <param name="logAction">The function called for message when logging.</param>
            <example>
            <code>
            Debug(logAction=>logAction("Hello {0}! Today is an {1:dddd}", "World", DateTime.Now));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.EnvironmentAliases">
            <summary>
            Contains functionality related to the environment.
            </summary>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.EnvironmentVariable(Cake.Core.ICakeContext,System.String)">
            <summary>
            Retrieves the value of the environment variable or <c>null</c> if the environment variable do not exist.
            </summary>
            <example>
            <code>
            Information(EnvironmentVariable("HOME") ?? "Unknown location");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="variable">The environment variable.</param>
            <returns>The environment variable or <c>null</c> if the environment variable do not exist.</returns>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.EnvironmentVariables(Cake.Core.ICakeContext)">
             <summary>
             Retrieves all environment variables
             </summary>
             <example>
             <code>
             var envVars = EnvironmentVariables();
            
             string path;
             if (envVars.TryGetValue("PATH", out path))
             {
                 Information("Path: {0}", path);
             }
            
             foreach(var envVar in envVars)
             {
                 Information(
                     "Key: {0}\tValue: \"{1}\"",
                     envVar.Key,
                     envVar.Value
                     );
             }
             </code>
             </example>
             <param name="context">The context.</param>
             <returns>The environment variables</returns>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.HasEnvironmentVariable(Cake.Core.ICakeContext,System.String)">
            <summary>
            Checks for the existence of a value for a given environment variable.
            </summary>
            <example>
            <code>
            if (HasEnvironmentVariable("SOME_ENVIRONMENT_VARIABLE"))
            {
                Information("The environment variable was present.");
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="variable">The environment variable.</param>
            <returns>
              <c>true</c> if the environment variable exist; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.IsRunningOnWindows(Cake.Core.ICakeContext)">
            <summary>
            Determines whether the build script is running on Windows.
            </summary>
            <example>
            <code>
            if (IsRunningOnWindows())
            {
                Information("Windows!");
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if the build script is running on Windows; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="M:Cake.Common.EnvironmentAliases.IsRunningOnUnix(Cake.Core.ICakeContext)">
            <summary>
            Determines whether the build script running on a Unix or Linux based system.
            </summary>
            <example>
            <code>
            if (IsRunningOnUnix())
            {
                Information("Not Windows!");
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <returns>
              <c>true</c> if the build script running on a Unix or Linux based system; otherwise <c>false</c>.
            </returns>
        </member>
        <member name="T:Cake.Common.ProcessAliases">
            <summary>
            Contains functionality related to processes.
            </summary>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Starts the process resource that is specified by the filename.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">The file name.</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            var exitCodeWithoutArguments = StartProcess("ping");
            // This should output 1 as argument is missing
            Information("Exit code: {0}", exitCodeWithoutArguments);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Starts the process resource that is specified by the filename and arguments
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <param name="processArguments">The arguments used in the process settings.</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            var exitCodeWithArgument = StartProcess("ping", "localhost");
            // This should output 0 as valid arguments supplied
            Information("Exit code: {0}", exitCodeWithArgument);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Starts the process resource that is specified by the filename and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <param name="settings">The settings.</param>
            <returns>The exit code that the started process specified when it terminated.</returns>
            <example>
            <code>
            var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{ Arguments = "localhost" });
            // This should output 0 as valid arguments supplied
            Information("Exit code: {0}", exitCodeWithArgument);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings,System.Collections.Generic.IEnumerable{System.String}@)">
             <summary>
             Starts the process resource that is specified by the filename and settings.
             </summary>
             <param name="context">The context.</param>
             <param name="fileName">Name of the file.</param>
             <param name="settings">The settings.</param>
             <param name="redirectedOutput">outputs process output <see cref="P:Cake.Core.IO.ProcessSettings.RedirectStandardOutput">RedirectStandardOutput</see> is true</param>
             <returns>The exit code that the started process specified when it terminated.</returns>
             <example>
             <code>
             IEnumerable&lt;string&gt; redirectedOutput;
             var exitCodeWithArgument = StartProcess("ping", new ProcessSettings{
             Arguments = "localhost",
             RedirectStandardOutput = true
             },
             out redirectedOutput
             );
             //Output last line of process output
             Information("Last line of output: {0}", redirectedOutput.LastOrDefault());
            
             // This should output 0 as valid arguments supplied
             Information("Exit code: {0}", exitCodeWithArgument);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartAndReturnProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.ProcessSettings)">
            <summary>
            Starts the process resource that is specified by the filename and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <param name="settings">The settings.</param>
            <returns>The newly started process.</returns>
            <example>
            <code>
            using(var process = StartAndReturnProcess("ping", new ProcessSettings{ Arguments = "localhost" }))
            {
                process.WaitForExit();
                // This should output 0 as valid arguments supplied
                Information("Exit code: {0}", process.GetExitCode());
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/>, <paramref name="fileName"/>, or <paramref name="settings"/>  is null.</exception>
        </member>
        <member name="M:Cake.Common.ProcessAliases.StartAndReturnProcess(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Starts the process resource that is specified by the filename.
            </summary>
            <param name="context">The context.</param>
            <param name="fileName">Name of the file.</param>
            <returns>The newly started process.</returns>
            <example>
            <code>
            using(var process = StartAndReturnProcess("ping"))
            {
                process.WaitForExit();
                // This should output 0 as valid arguments supplied
                Information("Exit code: {0}", process.GetExitCode());
            }
            </code>
            </example>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/>, <paramref name="fileName"/> is null.</exception>
        </member>
        <member name="T:Cake.Common.ReleaseNotes">
            <summary>
            Represent release notes.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotes.#ctor(System.Version,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.ReleaseNotes"/> class.
            </summary>
            <param name="version">The version.</param>
            <param name="notes">The notes.</param>
        </member>
        <member name="P:Cake.Common.ReleaseNotes.Version">
            <summary>
            Gets the version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Cake.Common.ReleaseNotes.Notes">
            <summary>
            Gets the release notes.
            </summary>
            <value>The release notes.</value>
        </member>
        <member name="T:Cake.Common.ReleaseNotesAliases">
            <summary>
            Contains functionality related to release notes.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliases.ParseAllReleaseNotes(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses all release notes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>All release notes.</returns>
            <example>
            <code>
            var releaseNotes = ParseAllReleaseNotes("./ReleaseNotes.md");
            foreach(var releaseNote in releaseNotes)
            {
                Information("Version: {0}", releaseNote.Version);
                foreach(var note in releaseNote.Notes)
                {
                    Information("\t{0}", note);
                }
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ReleaseNotesAliases.ParseReleaseNotes(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses the latest release notes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <returns>The latest release notes.</returns>
            <example>
            <code>
            var releaseNote = ParseReleaseNotes("./ReleaseNotes.md");
            Information("Version: {0}", releaseNote.Version);
            foreach(var note in releaseNote.Notes)
            {
                Information("\t{0}", note);
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.ReleaseNotesParser">
            <summary>
            The release notes parser.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesParser.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.ReleaseNotesParser"/> class.
            </summary>
        </member>
        <member name="M:Cake.Common.ReleaseNotesParser.Parse(System.String)">
            <summary>
            Parses all release notes.
            </summary>
            <param name="content">The content.</param>
            <returns>All release notes.</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode">
            <summary>
            Parsed Xml documentation example code
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode"/> class.
            </summary>
            <param name="name">The name of code parent.</param>
            <param name="code">The example code.</param>
        </member>
        <member name="P:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.Name">
            <summary>
            Gets Example code parent name
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCode.Code">
            <summary>
            Gets Example code
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser">
            <summary>
            The MSBuild Xml documentation example code parser
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="globber">The globber.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses Xml documentation example code from given path
            </summary>
            <param name="xmlFilePath">Path to the file to parse.</param>
            <returns>Parsed Example Code</returns>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocExampleCodeParser.ParseFiles(System.String)">
            <summary>
            Parses Xml documentation example code from file(s) using given pattern
            </summary>
            <param name="pattern">The globber file pattern.</param>
            <returns>Parsed Example Code</returns>
        </member>
        <member name="T:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases">
            <summary>
            Contains functionality related to MSBuild XML document files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases.ParseXmlDocExampleCode(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses Xml documentation example code from given path.
            </summary>
            <param name="context">The context.</param>
            <param name="xmlFilePath">The Path to the file to parse.</param>
            <returns>Parsed example code.</returns>
            <example>
            <code>
            var exampleCodes = ParseXmlDocExampleCode("./Cake.Common.xml");
            foreach(var exampleCode in exampleCodes)
            {
                Information(
                    "{0}\r\n{1}",
                    exampleCode.Name,
                    exampleCode.Code
                );
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Solution.Project.XmlDoc.XmlDocAliases.ParseXmlDocFilesExampleCode(Cake.Core.ICakeContext,System.String)">
            <summary>
            Parses Xml documentation example code from file(s) using given pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globber file pattern.</param>
            <returns>Parsed example code.</returns>
            <example>
            <code>
            var filesExampleCodes = ParseXmlDocFilesExampleCode("./Cake.*.xml");
            foreach(var exampleCode in filesExampleCodes)
            {
                Information(
                    "{0}\r\n{1}",
                    exampleCode.Name,
                    exampleCode.Code
                );
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.SolutionAliases">
            <summary>
            Contains functionality related to MSBuild solution files.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionAliases.ParseSolution(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Parses project information from a solution file.
            </summary>
            <param name="context">The context.</param>
            <param name="solutionPath">The solution path.</param>
            <returns>A parsed solution.</returns>
            <example>
            <code>
            var solutionPath = "./src/Cake.sln";
            Information("Parsing {0}", solutionPath);
            var parsedSolution = ParseSolution(solutionPath);
            foreach(var project in parsedSolution.Projects)
            {
                Information(
                    @"Solution project file:
                Name: {0}
                Path: {1}
                Id  : {2}
                Type: {3}",
                    project.Name,
                    project.Path,
                    project.Id,
                    project.Type
                );
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Solution.SolutionParser">
            <summary>
            The MSBuild solution file parser.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionParser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParser.Parse(Cake.Core.IO.FilePath)">
            <summary>
            Parses a MSBuild solution.
            </summary>
            <param name="solutionPath">The solution path.</param>
            <returns>A parsed solution.</returns>
        </member>
        <member name="T:Cake.Common.Solution.SolutionParserResult">
            <summary>
            Represents the content in an MSBuild solution file.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionParserResult.#ctor(System.String,System.String,System.String,System.Collections.Generic.IReadOnlyCollection{Cake.Common.Solution.SolutionProject})">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionParserResult"/> class.
            </summary>
            <param name="version">The file format version.</param>
            <param name="visualStudioVersion">The version of Visual Studio that created the file.</param>
            <param name="minimumVisualStudioVersion">The minimum supported version of Visual Studio.</param>
            <param name="projects">The solution projects.</param>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.Version">
            <summary>
            Gets the file format version.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.VisualStudioVersion">
            <summary>
            Gets the version of Visual Studio that created the file.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.MinimumVisualStudioVersion">
            <summary>
            Gets the minimum supported version of Visual Studio.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionParserResult.Projects">
            <summary>
            Gets all solution projects.
            </summary>
        </member>
        <member name="T:Cake.Common.Solution.SolutionProject">
            <summary>
            Represents a project in a MSBuild solution.
            </summary>
        </member>
        <member name="M:Cake.Common.Solution.SolutionProject.#ctor(System.String,System.String,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Solution.SolutionProject"/> class.
            </summary>
            <param name="id">The project identity.</param>
            <param name="name">The project name.</param>
            <param name="path">The project path.</param>
            <param name="type">The project type identity.</param>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Id">
            <summary>
            Gets the project identity.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Name">
            <summary>
            Gets the project name.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Path">
            <summary>
            Gets the project path.
            </summary>
        </member>
        <member name="P:Cake.Common.Solution.SolutionProject.Type">
            <summary>
            Gets the project type identity.
            </summary>
        </member>
        <member name="T:Cake.Common.Text.TextTransformationAliases">
            <summary>
            Contains functionality related to text transformation.
            </summary>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformText(Cake.Core.ICakeContext,System.String)">
            <summary>
            Creates a text transformation from the provided template.
            </summary>
            <param name="context">The context.</param>
            <param name="template">The template.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template.
            <code>
            string text = TransformText("Hello &lt;%subject%&gt;!")
               .WithToken("subject", "world")
               .ToString();
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformText(Cake.Core.ICakeContext,System.String,System.String,System.String)">
            <summary>
            Creates a text transformation from the provided template, using the specified placeholder.
            </summary>
            <param name="context">The context.</param>
            <param name="template">The template.</param>
            <param name="leftPlaceholder">The left placeholder.</param>
            <param name="rightPlaceholder">The right placeholder.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template and placeholder.
            <code>
            string text = TransformText("Hello {subject}!", "{", "}")
               .WithToken("subject", "world")
               .ToString();
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformTextFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Creates a text transformation from the provided template on disc.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The template file path.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template file with the placeholder format <c>&lt;%key%&gt;</c>.
            <code>
            string text = TransformTextFile("./template.txt")
               .WithToken("subject", "world")
               .ToString();
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationAliases.TransformTextFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String,System.String)">
            <summary>
            Creates a text transformation from the provided template on disc, using the specified placeholder.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The template file path.</param>
            <param name="leftPlaceholder">The left placeholder.</param>
            <param name="rightPlaceholder">The right placeholder.</param>
            <returns>A <see cref="T:Cake.Common.Text.TextTransformation`1"/> representing the provided template.</returns>
            <example>
            This sample shows how to create a <see cref="T:Cake.Common.Text.TextTransformation`1"/> using
            the specified template file and placeholder.
            <code>
            string text = TransformTextFile("./template.txt", "{", "}")
               .WithToken("subject", "world")
               .ToString();
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Text.TextTransformation`1">
            <summary>
            Provides functionality to perform simple text transformations
            from a Cake build script and save them to disc.
            </summary>
            <typeparam name="TTemplate">The text transformation template.</typeparam>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Text.TextTransformation`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="template">The text template.</param>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.Save(Cake.Core.IO.FilePath)">
            <summary>
            Saves the text transformation to a file.
            </summary>
            <param name="path">The <see cref="T:Cake.Core.IO.FilePath"/> to save the test transformation to.</param>
        </member>
        <member name="M:Cake.Common.Text.TextTransformation`1.ToString">
            <summary>
            Returns a string containing the rendered template.
            </summary>
            <returns>A string containing the rendered template.</returns>
        </member>
        <member name="P:Cake.Common.Text.TextTransformation`1.Template">
            <summary>
            Gets the text transformation template.
            </summary>
            <value>The text transformation template.</value>
        </member>
        <member name="T:Cake.Common.Text.TextTransformationExtensions">
            <summary>
            Contains extension methods for <see cref="T:Cake.Common.Text.TextTransformation`1"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Text.TextTransformationExtensions.WithToken``1(Cake.Common.Text.TextTransformation{``0},System.String,System.Object)">
            <summary>
            Registers a key and a value to be used with the
            text transformation.
            </summary>
            <typeparam name="TTemplate">The text transformation template.</typeparam>
            <param name="transformation">The text transformation.</param>
            <param name="key">The key.</param>
            <param name="value">The value.</param>
            <returns>
            The same <see cref="T:Cake.Common.Text.TextTransformation`1"/> instance so that multiple calls can be chained.
            </returns>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeAliases">
            <summary>
            Contains functionality related to running Cake scripts out of process.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteScript(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Executes cake script out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeScriptPath">The script file.</param>
            <example>
            <code>
            CakeExecuteScript("./helloworld.cake");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteScript(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes cake script out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeScriptPath">The script file.</param>
            <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings"/>.</param>
            <example>
            <code>
            CakeExecuteScript("./helloworld.cake", new CakeSettings{ ToolPath="./Cake.exe" });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteExpression(Cake.Core.ICakeContext,System.String)">
            <summary>
            Executes Cake expression out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeExpression">The cake expression</param>
            <example>
            <code>
            CakeExecuteExpression("Information(\"Hello {0}\", \"World\");");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeAliases.CakeExecuteExpression(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes Cake expression out of process
            </summary>
            <param name="context">The context.</param>
            <param name="cakeExpression">The cake expression</param>
            <param name="settings">The settings <see cref="T:Cake.Common.Tools.Cake.CakeSettings"/>.</param>
            <example>
            <code>
            CakeExecuteExpression(
                "Information(\"Hello {0}!\", Argument&lt;string&gt;(\"name\"));",
                new CakeSettings {
                    ToolPath="./Cake.exe" ,
                    Arguments = new Dictionary&lt;string, string&gt;{{"name", "World"}}
                    });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeRunner">
            <summary>
            Cake out process runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Cake.CakeRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.ExecuteScript(Cake.Core.IO.FilePath,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes supplied cake script in own process and supplied settings
            </summary>
            <param name="scriptPath">Path to script to execute</param>
            <param name="settings">optional cake settings</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.ExecuteExpression(System.String,Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Executes supplied cake code expression in own process and supplied settings
            </summary>
            <param name="cakeExpression">Code expression to execute</param>
            <param name="settings">optional cake settings</param>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.GetToolExecutableNames">
            <summary>
            Gets the name of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Cake.CakeRunner.GetAlternativeToolPaths(Cake.Common.Tools.Cake.CakeSettings)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.Cake.CakeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Cake.CakeRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Cake.CakeSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.Cake.CakeSettings.Arguments">
            <summary>
            Gets or sets cake additional arguments.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter">
            <summary>
            The Chocolatey package pinner used to pin Chocolatey packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.ChocolateyTool`1">
            <summary>
            Base class for all Chocolatey related tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.ChocolateyTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyTool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyTool`1.GetAlternativeToolPaths(`0)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter.Set(System.String,System.String,Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings)">
            <summary>
            Pins Chocolatey packages using the specified package id and settings.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="source">The Server URL where the API key is valid.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySetter"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.ChocolateyAliases">
            <summary>
            Contains functionality for working with Chocolatey.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyPack(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
             <summary>
             Creates a Chocolatey package using the specified Nuspec file.
             </summary>
             <param name="context">The context.</param>
             <param name="nuspecFilePath">The nuspec file path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var chocolateyPackSettings   = new ChocolateyPackSettings {
                                                 Id                      = "TestChocolatey",
                                                 Title                   = "The tile of the package",
                                                 Version                 = "0.0.0.1",
                                                 Authors                 = new[] {"John Doe"},
                                                 Owners                  = new[] {"Contoso"},
                                                 Summary                 = "Excellent summary of what the package does",
                                                 Description             = "The description of the package",
                                                 ProjectUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 PackageSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 ProjectSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 DocsUrl                 = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 MailingListUrl          = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 BugTrackerUrl           = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 Tags                    = new [] {"Cake", "Script", "Build"},
                                                 Copyright               = "Some company 2015",
                                                 LicenseUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/blob/master/LICENSE.md"),
                                                 RequireLicenseAcceptance= false,
                                                 IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestChocolatey/master/icons/testchocolatey.png"),
                                                 ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                 Files                   = new [] {
                                                                                      new ChocolateyNuSpecContent {Source = "bin/TestChocolatey.dll", Target = "bin"},
                                                                                   },
                                                 Debug                   = false,
                                                 Verbose                 = false,
                                                 Force                   = false,
                                                 Noop                    = false,
                                                 LimitOutput             = false,
                                                 ExecutionTimeout        = 13,
                                                 CacheLocation           = @"C:\temp",
                                                 AllowUnofficial          = false
                                             };
            
                 ChocolateyPack("./nuspec/TestChocolatey.nuspec", chocolateyPackSettings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyPack(Cake.Core.ICakeContext,Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
             <summary>
             Creates a Chocolatey package using the specified settings.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var chocolateyPackSettings   = new ChocolateyPackSettings {
                                                 Id                      = "TestChocolatey",
                                                 Title                   = "The tile of the package",
                                                 Version                 = "0.0.0.1",
                                                 Authors                 = new[] {"John Doe"},
                                                 Owners                  = new[] {"Contoso"},
                                                 Summary                 = "Excellent summary of what the package does",
                                                 Description             = "The description of the package",
                                                 ProjectUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 PackageSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 ProjectSourceUrl        = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 DocsUrl                 = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 MailingListUrl          = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 BugTrackerUrl           = new Uri("https://github.com/SomeUser/TestChocolatey/"),
                                                 Tags                    = new [] {"Cake", "Script", "Build"},
                                                 Copyright               = "Some company 2015",
                                                 LicenseUrl              = new Uri("https://github.com/SomeUser/TestChocolatey/blob/master/LICENSE.md"),
                                                 RequireLicenseAcceptance= false,
                                                 IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestChocolatey/master/icons/testchocolatey.png"),
                                                 ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                 Files                   = new [] {
                                                                                      new ChocolateyNuSpecContent {Source = "bin/TestChocolatey.dll", Target = "bin"},
                                                                                   },
                                                 Debug                   = false,
                                                 Verbose                 = false,
                                                 Force                   = false,
                                                 Noop                    = false,
                                                 LimitOutput             = false,
                                                 ExecutionTimeout        = 13,
                                                 CacheLocation           = @"C:\temp",
                                                 AllowUnofficial          = false
                                             };
            
                 ChocolateyPack(chocolateyPackSettings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyInstall(Cake.Core.ICakeContext,System.String)">
            <summary>
            Installs a Chocolatey package.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <example>
            <code>
            ChocolateyInstall("MyChocolateyPackage");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyInstall(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
            <summary>
            Installs a Chocolatey package using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyInstall("MyChocolateyPackage", new ChocolateyInstallSettings {
                Source                = true,
                Version               = "1.2.3",
                Prerelease            = false,
                Forcex86              = false,
                InstallArguments      = "arg1",
                OverrideArguments     = false,
                NotSilent             = false,
                PackageParameters     = "param1",
                AllowDowngrade        = false,
                SideBySide            = false,
                IgnoreDependencies    = false,
                ForceDependencies     = false,
                SkipPowerShell        = false,
                User                  = "user",
                Password              = "password",
                IgnoreChecksums       = false,
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Installs Chocolatey packages using the specified package configuration.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <example>
            <code>
            ChocolateyInstallFromConfig("./tools/packages.config");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
            <summary>
            Installs Chocolatey packages using the specified package configuration and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyInstallFromConfig("./tools/packages.config", new ChocolateyInstallSettings {
                Source                = true,
                Version               = "1.2.3",
                Prerelease            = false,
                Forcex86              = false,
                InstallArguments      = "arg1",
                OverrideArguments     = false,
                NotSilent             = false,
                PackageParameters     = "param1",
                AllowDowngrade        = false,
                SideBySide            = false,
                IgnoreDependencies    = false,
                ForceDependencies     = false,
                SkipPowerShell        = false,
                User                  = "user",
                Password              = "password",
                IgnoreChecksums       = false,
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyPin(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings)">
            <summary>
            Pins a Chocolatey package using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyPin("MyChocolateyPackage", new ChocolateyPinSettings {
                Version               = "1.2.3",
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyApiKey(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.Chocolatey.ApiKey.ChocolateyApiKeySettings)">
            <summary>
            Sets the Api Key for a Chocolatey Source using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="apiKey">The API Key.</param>
            <param name="source">The source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyApiKey("myApiKey", "http://www.mysource.com", new ChocolateyApiKeySettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyConfig(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings)">
            <summary>
            Sets the config parameter using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyConfig("cacheLocation", @"c:\temp", new ChocolateyConfigSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyEnableFeature(Cake.Core.ICakeContext,System.String)">
            <summary>
            Enables a Chocolatey Feature using the specified name
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the feature.</param>
            <example>
            <code>
            ChocolateyEnableFeature("checkSumFiles");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyEnableFeature(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
            <summary>
            Enables a Chocolatey Feature using the specified name and settings
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the feature.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyEnableFeature("checkSumFiles", new ChocolateyFeatureSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyDisableFeature(Cake.Core.ICakeContext,System.String)">
            <summary>
            Disables a Chocolatey Feature using the specified name
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the feature.</param>
            <example>
            <code>
            ChocolateyDisableFeature("checkSumFiles");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyDisableFeature(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
            <summary>
            Disables a Chocolatey Feature using the specified name and settings
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the feature.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyDisableFeature("checkSumFiles", new ChocolateyFeatureSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyAddSource(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Adds Chocolatey package source using the specified name &amp;source to global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <example>
            <code>
            ChocolateyAddSource("MySource", "http://www.mysource.com");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyAddSource(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Adds Chocolatey package source using the specified name, source &amp; settings to global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyAddSource("MySource", "http://www.mysource.com", new ChocolateySourcesSettings {
                UserName              = "user",
                Password              = "password",
                Priority              = 13,
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyRemoveSource(Cake.Core.ICakeContext,System.String)">
            <summary>
            Removes Chocolatey package source using the specified name &amp; source from global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <example>
            <code>
            ChocolateyRemoveSource("MySource");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyRemoveSource(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Removes Chocolatey package source using the specified name, source &amp; settings from global user config
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyRemoveSource("MySource", new ChocolateySourcesSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyEnableSource(Cake.Core.ICakeContext,System.String)">
            <summary>
            Enables a Chocolatey Source using the specified name
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <example>
            <code>
            ChocolateyEnableSource("MySource");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyEnableSource(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Enables a Chocolatey Source using the specified name and settings
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyEnableSource("MySource", new ChocolateySourcesSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyDisableSource(Cake.Core.ICakeContext,System.String)">
            <summary>
            Disables a Chocolatey Source using the specified name
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <example>
            <code>
            ChocolateyDisableSource("MySource");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyDisableSource(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Disables a Chocolatey Source using the specified name and settings
            </summary>
            <param name="context">The context.</param>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyDisableSource("MySource", new ChocolateySourcesSettings {
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyPush(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings)">
             <summary>
             Pushes a Chocolatey package to a Chocolatey server and publishes it.
             </summary>
             <param name="context">The context.</param>
             <param name="packageFilePath">The <c>.nupkg</c> file path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
             // Get the path to the package.
             var package = "./chocolatey/MyChocolateyPackage.0.0.1.nupkg";
            
             // Push the package.
             ChocolateyPush(package, new ChocolateyPushSettings {
                 Source                = "http://example.com/chocolateyfeed",
                 ApiKey                = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
                 Timeout               = 300
                 Debug                 = false,
                 Verbose               = false,
                 Force                 = false,
                 Noop                  = false,
                 LimitOutput           = false,
                 ExecutionTimeout      = 13,
                 CacheLocation         = @"C:\temp",
                 AllowUnofficial        = false
             });
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyUpgrade(Cake.Core.ICakeContext,System.String)">
            <summary>
            Upgrades Chocolatey package.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to upgrade.</param>
            <example>
            <code>
            ChocolateyUpgrade("MyChocolateyPackage");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyAliases.ChocolateyUpgrade(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings)">
            <summary>
            Upgrades Chocolatey package using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to upgrade.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ChocolateyUpgrade("MyChocolateyPackage", new ChocolateyUpgradeSettings {
                Source                = true,
                Version               = "1.2.3",
                Prerelease            = false,
                Forcex86              = false,
                InstallArguments      = "arg1",
                OverrideArguments     = false,
                NotSilent             = false,
                PackageParameters     = "param1",
                AllowDowngrade        = false,
                SideBySide            = false,
                IgnoreDependencies    = false,
                SkipPowerShell        = false,
                FailOnUnfound        = false,
                FailOnNotInstalled        = false,
                User                  = "user",
                Password              = "password",
                IgnoreChecksums       = false,
                Debug                 = false,
                Verbose               = false,
                Force                 = false,
                Noop                  = false,
                LimitOutput           = false,
                ExecutionTimeout      = 13,
                CacheLocation         = @"C:\temp",
                AllowUnofficial        = false
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.ChocolateyToolResolver">
            <summary>
            Contains Chocolatey path resolver functionality
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.IChocolateyToolResolver">
            <summary>
            Represents a Chocolatey path resolver.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.IChocolateyToolResolver.ResolvePath">
            <summary>
            Resolves the path to choco.exe.
            </summary>
            <returns>The path to choco.exe.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyToolResolver.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.ChocolateyToolResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.ChocolateyToolResolver.ResolvePath">
            <summary>
            Resolves the path to choco.exe.
            </summary>
            <returns>The path to choco.exe.</returns>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter">
            <summary>
            The Chocolatey configuration setter.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter.Set(System.String,System.String,Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings)">
            <summary>
            Sets Chocolatey configuration paramaters using the settings.
            </summary>
            <param name="name">The name of the config parameter.</param>
            <param name="value">The value to assign to the parameter.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSetter"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Config.ChocolateyConfigSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler">
            <summary>
            The Chocolatey feature toggler used to enable/disable Chocolatey Features.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler.EnableFeature(System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
            <summary>
            Pins Chocolatey packages using the specified package id and settings.
            </summary>
            <param name="name">The name of the feature.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureToggler.DisableFeature(System.String,Cake.Common.Tools.Chocolatey.Features.ChocolateyFeatureSettings)">
            <summary>
            Pins Chocolatey packages using the specified package id and settings.
            </summary>
            <param name="name">The name of the feature.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller">
            <summary>
            The Chocolatey package installer used to install Chocolatey packages.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller.InstallFromConfig(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
            <summary>
            Installs Chocolatey packages using the specified package configuration file and settings.
            </summary>
            <param name="packageConfigPath">Path to package configuration to use for install.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller.Install(System.String,Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings)">
            <summary>
            Installs Chocolatey packages using the specified package id and settings.
            </summary>
            <param name="packageId">The source package id.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstaller"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.AcceptLicense">
            <summary>
            Gets or sets a value indicating whether to accept license for package.
            </summary>
            <value>The accept license flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Source">
            <summary>
            Gets or sets a package sources to use for this command.
            </summary>
            <value>The package source to use for this command.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Version">
            <summary>
            Gets or sets the version of the package to install.
            If none specified, the latest will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow installation of prerelease packages.
            This flag is not required when restoring packages by installing from packages.config.
            </summary>
            <value>
              <c>true</c> to allow installation of prerelease packages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Forcex86">
            <summary>
            Gets or sets a value indicating whether to force installation of the x86 version of package.
            </summary>
            <value>The force x86 flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.InstallArguments">
            <summary>
            Gets or sets the install arguments to pass to native installer.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.OverrideArguments">
            <summary>
            Gets or sets a value indicating whether to override the passed arguments.
            </summary>
            <value>The override arguments flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.NotSilent">
            <summary>
            Gets or sets a value indicating whether or not to install silently.
            </summary>
            <value>The not silent flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.PackageParameters">
            <summary>
            Gets or sets the parameters to pass to the package.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.AllowDowngrade">
            <summary>
            Gets or sets a value indicating whether to allow downgrade of package.
            </summary>
            <value>The downgrade package flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.SideBySide">
            <summary>
            Gets or sets a value indicating whether to allow side by side installation.
            </summary>
            <value>The side by side installation flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.IgnoreDependencies">
            <summary>
            Gets or sets a value indicating whether to ignore dependencies.
            </summary>
            <value>The ignore dependencies flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.ForceDependencies">
            <summary>
            Gets or sets a value indicating whether to force dependencies.
            </summary>
            <value>The force dependencies flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.SkipPowerShell">
            <summary>
            Gets or sets a value indicating whether to skip the PowerShell installation of package.
            </summary>
            <value>The skip powershell flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.User">
            <summary>
            Gets or sets the user for authenticated feeds.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.Password">
            <summary>
            Gets or sets the password for authenticated feeds.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Install.ChocolateyInstallSettings.IgnoreChecksums">
            <summary>
            Gets or sets a value indicating whether to ignore checksums.
            </summary>
            <value>The ignore checksums flag</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecContent">
            <summary>
            Represents a Chocolatey nuspec file
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecContent.Source">
            <summary>
            Gets or sets the location of the file or files to include.
            The path is relative to the NuSpec file unless an absolute path is specified.
            The wildcard character - <c>*</c> - is allowed.
            Using a double wildcard - <c>**</c> implies a recursive directory search.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecContent.Target">
            <summary>
            Gets or sets the relative path to the directory within the package where the source files will be placed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyNuSpecContent.Exclude">
            <summary>
            Gets or sets the file or files to exclude.
            This is usually combined with a wildcard value in the <c>src</c> attribute.
            The <c>exclude</c> attribute can contain a semi-colon delimited list of files or a file pattern.
            Using a double wildcard - <c>**</c> - implies a recursive exclude pattern.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker">
            <summary>
            The Chocolatey packer.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Diagnostics.ICakeLog,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="log">The log.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker.Pack(Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
            <summary>
            Creates a Chocolatey package from the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker.Pack(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings)">
            <summary>
            Creates a Chocolatey package from the specified Nuspec file.
            </summary>
            <param name="nuspecFilePath">The nuspec file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPacker"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Id">
            <summary>
            Gets or sets the package ID.
            </summary>
            <value>The package ID.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Title">
            <summary>
            Gets or sets the package title.
            </summary>
            <value>The package title.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Version">
            <summary>
            Gets or sets the Nuspec version.
            </summary>
            <value>The Nuspec version.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Authors">
            <summary>
            Gets or sets the package authors.
            </summary>
            <value>The package authors.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Owners">
            <summary>
            Gets or sets the package owners.
            </summary>
            <value>The package owners.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Summary">
            <summary>
            Gets or sets the package summary.
            </summary>
            <value>The package summary.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Description">
            <summary>
            Gets or sets the package description.
            </summary>
            <value>The package description.</value>
            <remarks>Markdown format is allowed for this property</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.ProjectUrl">
            <summary>
            Gets or sets the package project URL.
            </summary>
            <value>The package project URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.PackageSourceUrl">
            <summary>
            Gets or sets the package Source URL.
            </summary>
            <value>The package Source URL.</value>
            <remarks>Requires at least Chocolatey 0.9.9.7.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.ProjectSourceUrl">
            <summary>
            Gets or sets the package project Source URL.
            </summary>
            <value>The package project Source URL.</value>
            <remarks>Requires at least Chocolatey 0.9.9.7.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.DocsUrl">
            <summary>
            Gets or sets the package documentation URL.
            </summary>
            <value>The package documenation URL.</value>
            <remarks>Requires at least Chocolatey 0.9.9.7.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.MailingListUrl">
            <summary>
            Gets or sets the package mailing list URL.
            </summary>
            <value>The package mailing list URL.</value>
            <remarks>Requires at least Chocolatey 0.9.9.7.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.BugTrackerUrl">
            <summary>
            Gets or sets the package bug tracker URL.
            </summary>
            <value>The package bug tracker URL.</value>
            <remarks>Requires at least Chocolatey 0.9.9.7.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Tags">
            <summary>
            Gets or sets the package tags.
            </summary>
            <value>The package tags.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Copyright">
            <summary>
            Gets or sets the package copyright.
            </summary>
            <value>The package copyright.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.LicenseUrl">
            <summary>
            Gets or sets the package license URL.
            </summary>
            <value>The package license URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.RequireLicenseAcceptance">
            <summary>
            Gets or sets a value indicating whether users has to accept the package license.
            </summary>
            <value>
            <c>true</c> if users has to accept the package license; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.IconUrl">
            <summary>
            Gets or sets the package icon URL.
            </summary>
            <value>The package icon URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.ReleaseNotes">
            <summary>
            Gets or sets the package release notes.
            </summary>
            <value>The package release notes.</value>
            <remarks>Markdown format is allowed for this property</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Files">
            <summary>
            Gets or sets the package files.
            </summary>
            <value>The package files.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pack.ChocolateyPackSettings.OutputDirectory">
            <summary>
            Gets or sets a value indicating the Working Directory that should be used while running choco.exe.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner">
            <summary>
            The Chocolatey package pinner used to pin Chocolatey packages.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner.Pin(System.String,Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings)">
            <summary>
            Pins Chocolatey packages using the specified package id and settings.
            </summary>
            <param name="name">The name of the package.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Pin.ChocolateyPinSettings.Version">
            <summary>
            Gets or sets the version of the package to install.
            If none specified, the latest will be used.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher">
            <summary>
            The Chocolatey package pusher.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher.Push(Cake.Core.IO.FilePath,Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings)">
            <summary>
            Pushes a Chocolatey package to a Chocolatey server and publishes it.
            </summary>
            <param name="packageFilePath">The package file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Push.ChocolateyPusher"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Source">
            <summary>
            Gets or sets the server URL. If not specified, chocolatey.org is used.
            </summary>
            <value>The server URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.ApiKey">
            <summary>
            Gets or sets the API key for the server.
            </summary>
            <value>The API key for the server.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Push.ChocolateyPushSettings.Timeout">
            <summary>
            Gets or sets the timeout for pushing to a server.
            Defaults to 300 seconds (5 minutes).
            </summary>
            <value>The timeout for pushing to a server.</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources">
            <summary>
            The Chocolatey sources is used to work with user config feeds &amp; credentials
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources.AddSource(System.String,System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Adds Chocolatey package source using the specified settings to global user config
            </summary>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources.RemoveSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Remove specified Chocolatey package source
            </summary>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources.EnableSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Enable specified Chocolatey package source
            </summary>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources.DisableSource(System.String,Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings)">
            <summary>
            Disable specified Chocolatey package source
            </summary>
            <param name="name">Name of the source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Sources.ChocolateySources"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.UserName">
            <summary>
            Gets or sets the (optional) user name.
            </summary>
            <value>Optional user name to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Password">
            <summary>
            Gets or sets the (optional) password.
            </summary>
            <value>Optional password to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Sources.ChocolateySourcesSettings.Priority">
            <summary>
            Gets or sets the (optional) priority.
            </summary>
            <value>Optional priority to be used when creating source.</value>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader">
            <summary>
            The Chocolatey package upgrader.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.Chocolatey.IChocolateyToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The Chocolatey tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader.Upgrade(System.String,Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings)">
            <summary>
            Upgrades Chocolatey packages using the specified settings.
            </summary>
            <param name="packageId">The source package id.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgrader"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Debug">
            <summary>
            Gets or sets a value indicating whether to run in debug mode.
            </summary>
            <value>The debug flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to run in verbose mode.
            </summary>
            <value>The verbose flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.AcceptLicense">
            <summary>
            Gets or sets a value indicating whether to accept license for package.
            </summary>
            <value>The accept license flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Force">
            <summary>
            Gets or sets a value indicating whether to run in forced mode.
            </summary>
            <value>The force flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Noop">
            <summary>
            Gets or sets a value indicating whether to run in noop mode.
            </summary>
            <value>The noop flag.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.LimitOutput">
            <summary>
            Gets or sets a value indicating whether to run in limited output mode.
            </summary>
            <value>The limit output flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.ExecutionTimeout">
            <summary>
            Gets or sets the execution timeout value.
            </summary>
            <value>The execution timeout</value>
            <remarks>Default is 2700 seconds</remarks>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.CacheLocation">
            <summary>
            Gets or sets the location of the download cache.
            </summary>
            <value>The download cache location</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.AllowUnofficial">
            <summary>
            Gets or sets a value indicating whether to run in allow unofficial mode.
            </summary>
            <value>The allow unofficial flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Source">
            <summary>
            Gets or sets the source to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Version">
            <summary>
            Gets or sets the Nuspec version.
            </summary>
            <value>The Nuspec version.</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow upgrading to prerelease versions.
            This flag is not required when updating prerelease packages that are already installed.
            </summary>
            <value>
              <c>true</c> to allow updating to prerelease versions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Forcex86">
            <summary>
            Gets or sets a value indicating whether to force installation of the x86 version of package.
            </summary>
            <value>The force x86 flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.InstallArguments">
            <summary>
            Gets or sets the install arguments to pass to native installer.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.OverrideArguments">
            <summary>
            Gets or sets a value indicating whether to override the passed arguments.
            </summary>
            <value>The override arguments flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.NotSilent">
            <summary>
            Gets or sets a value indicating whether or not to install silently.
            </summary>
            <value>The not silent flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.PackageParameters">
            <summary>
            Gets or sets the parameters to pass to the package.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.AllowDowngrade">
            <summary>
            Gets or sets a value indicating whether to allow downgrade of package.
            </summary>
            <value>The downgrade package flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.SideBySide">
            <summary>
            Gets or sets a value indicating whether to allow side by side installation.
            </summary>
            <value>The side by side installation flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.IgnoreDependencies">
            <summary>
            Gets or sets a value indicating whether to ignore dependencies.
            </summary>
            <value>The ignore dependencies flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.SkipPowerShell">
            <summary>
            Gets or sets a value indicating whether to skip the PowerShell installation of package.
            </summary>
            <value>The skip powershell flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.FailOnUnfound">
            <summary>
            Gets or sets a value indicating whether to fail on unfound packages.
            </summary>
            <value>The skip powershell flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.FailOnNotInstalled">
            <summary>
            Gets or sets a value indicating whether to fail on not installed packages.
            </summary>
            <value>The skip powershell flag</value>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.User">
            <summary>
            Gets or sets the user for authenticated feeds.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.Password">
            <summary>
            Gets or sets the password for authenticated feeds.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Chocolatey.Upgrade.ChocolateyUpgradeSettings.IgnoreChecksums">
            <summary>
            Gets or sets a value indicating whether to ignore checksums.
            </summary>
            <value>The ignore checksums flag</value>
        </member>
        <member name="T:Cake.Common.Tools.DNArchitecture">
            <summary>
            Define the available values for the architecture when working with DN* tools
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNArchitecture.X86">
            <summary>
            x86 architecture
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNArchitecture.X64">
            <summary>
            x64 architecture
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNArchitecture.ARM">
            <summary>
            ARM achitecture
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNRuntime">
            <summary>
            Define the available runtime values when working with DN* tools
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNRuntime.Clr">
            <summary>
            The full CLR on Windows
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNRuntime.CoreClr">
            <summary>
            The .NET core clr (Windows / *unix)
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNRuntime.Mono">
            <summary>
            The Mono CLR (Windows / *unix)
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNSettingsBase">
            <summary>
            Represent the base class for all DN* tools settings
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNSettingsBase.Version">
            <summary>
            Gets or sets the DNX Version to be used (see dnvm help run for more information)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNSettingsBase.Architecture">
            <summary>
            Gets or sets the DNX architecture to be used (see dnvm help run for more information)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNSettingsBase.Runtime">
            <summary>
            Gets or sets the DNX runtime to be used (see dnvm help run for more information)
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNToolBase`1">
            <summary>
            Define a base class for all DN* tools
            Provide helper method to work with dnvm exec / run commands
            </summary>
            <typeparam name="TSettings">The tools settings type</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.DNToolBase`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNToolBase`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNToolBase`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DNToolBase`1.GetDNVMArgumentsForExec(Cake.Core.IO.ProcessArgumentBuilder,`0)">
            <summary>
            Add to the <paramref name="builder"/> the arguments to be used in dnvm exec command
            </summary>
            <param name="builder">The argument builder to be used to inject the parameters</param>
            <param name="settings">The settings to be used</param>
        </member>
        <member name="M:Cake.Common.Tools.DNToolBase`1.GetDNVMArgumentsForRun(Cake.Core.IO.ProcessArgumentBuilder,`0)">
            <summary>
            Add to the <paramref name="builder"/> the arguments to be used in dnvm run command
            </summary>
            <param name="builder">The argument builder to be used to inject the parameters</param>
            <param name="settings">The settings to be used</param>
        </member>
        <member name="M:Cake.Common.Tools.DNToolBase`1.GetDNVMArguments(Cake.Core.IO.ProcessArgumentBuilder,`0,System.String)">
            <summary>
            Gets the DNVM arguments to execute run or exec command
            </summary>
            <param name="builder">The argument builder to be used</param>
            <param name="settings">The settings to be used</param>
            <param name="command">The dnvm command to be called</param>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Build.DNUBuilder">
            <summary>
            DNU project builder.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNU.DNUTool`1">
            <summary>
            Base class for all DNU related tools
            </summary>
            <typeparam name="TSettings">The settings type</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNU.DNUTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUTool`1.GetDNVMArguments(Cake.Core.IO.ProcessArgumentBuilder,`0,System.String)">
            <summary>
            Gets the DNVM arguments to execute run or exec command to work with dnu tool
            </summary>
            <param name="builder">The argument builder to be used</param>
            <param name="settings">The settings to be used</param>
            <param name="command">The dnvm command to be called</param>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Build.DNUBuilder.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNU.Build.DNUBuilder"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Build.DNUBuilder.Build(System.String,Cake.Common.Tools.DNU.Build.DNUBuildSettings)">
            <summary>
            Build the project using the specified path and settings.
            </summary>
            <param name="path">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Build.DNUBuildSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.DNU.Build.DNUBuilder"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Build.DNUBuildSettings.Frameworks">
            <summary>
            Gets or sets a list of frameworks to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Build.DNUBuildSettings.Configurations">
            <summary>
            Gets or sets a list of configurations to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Build.DNUBuildSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Build.DNUBuildSettings.Quiet">
            <summary>
            Gets or sets a value indicating whether to not show output such as dependencies in use.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNU.DNUAliases">
            <summary>
            Contains functionality for working with the DNU Utility.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNURestore(Cake.Core.ICakeContext)">
            <summary>
            Restore all NuGet Packages.
            </summary>
            <param name="context">The context.</param>
            <example>
            <code>
                DNURestore();
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNURestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Restore all NuGet Packages in the specified path.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file to restore.</param>
            <example>
            <code>
                var projects = GetFiles("./src/**/project.json");
                foreach(var project in projects)
                {
                    DNURestore(project);
                }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNURestore(Cake.Core.ICakeContext,Cake.Common.Tools.DNU.Restore.DNURestoreSettings)">
             <summary>
             Restore all NuGet Packages with the settings.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNURestoreSettings
                 {
                     Sources = new[] {"https://www.example.com/nugetfeed", "https://www.example.com/nugetfeed2"},
                     FallbackSources = new[] {"https://www.example.com/fallbacknugetfeed"},
                     Proxy = "exampleproxy",
                     NoCache = true,
                     Packages = "./packages",
                     IgnoreFailedSources = true,
                     Quiet = true,
                     Parallel = true,
                     Locked = DNULocked.Lock,
                     Runtimes = new[] {"runtime1", "runtime2"}
                 };
            
                 DNURestore(settings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNURestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.DNU.Restore.DNURestoreSettings)">
             <summary>
             Restore all NuGet Packages in the specified path with settings.
             </summary>
             <param name="context">The context.</param>
             <param name="filePath">The file to restore.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNURestoreSettings
                 {
                     Sources = new[] {"https://www.example.com/nugetfeed", "https://www.example.com/nugetfeed2"},
                     FallbackSources = new[] {"https://www.example.com/fallbacknugetfeed"},
                     Proxy = "exampleproxy",
                     NoCache = true,
                     Packages = "./packages",
                     IgnoreFailedSources = true,
                     Quiet = true,
                     Parallel = true,
                     Locked = DNULocked.Lock,
                     Runtimes = new[] {"runtime1", "runtime2"}
                 };
            
                 var projects = GetFiles("./src/**/project.json");
                 foreach(var project in projects)
                 {
                     DNURestore(project, settings);
                 }
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNUBuild(Cake.Core.ICakeContext,System.String)">
            <summary>
            Build all projects.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The projects path.</param>
            <example>
            <code>
                DNUBuild("./src/*");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNUBuild(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.DNU.Build.DNUBuildSettings)">
             <summary>
             Build all projects.
             </summary>
             <param name="context">The context.</param>
             <param name="path">The projects path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNUBuildSettings
                 {
                     Frameworks = new[] { "dnx451", "dnxcore50" },
                     Configurations = new[] { "Debug", "Release" },
                     OutputDirectory = "./artifacts/",
                     Quiet = true
                 };
            
                 DNUBuild("./src/*", settings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNUPack(Cake.Core.ICakeContext,System.String)">
            <summary>
            Pack all projects.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The projects path.</param>
            <example>
            <code>
                DNUPack("./src/*");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.DNU.DNUAliases.DNUPack(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.DNU.Pack.DNUPackSettings)">
             <summary>
             Pack all projects.
             </summary>
             <param name="context">The context.</param>
             <param name="path">The projects path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNUPackSettings
                 {
                     Frameworks = new[] { "dnx451", "dnxcore50" },
                     Configurations = new[] { "Debug", "Release" },
                     OutputDirectory = "./artifacts/",
                     Quiet = true
                 };
            
                 DNUPack("./src/*", settings);
             </code>
             </example>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Pack.DNUPacker">
            <summary>
            DNU NuGet package packer.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Pack.DNUPacker.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNU.Pack.DNUPacker"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Pack.DNUPacker.Pack(System.String,Cake.Common.Tools.DNU.Pack.DNUPackSettings)">
            <summary>
            Create NuGet packages using the specified path and settings.
            </summary>
            <param name="path">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Pack.DNUPackSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.DNU.Pack.DNUPacker"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Pack.DNUPackSettings.Frameworks">
            <summary>
            Gets or sets a list of frameworks to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Pack.DNUPackSettings.Configurations">
            <summary>
            Gets or sets a list of configurations to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Pack.DNUPackSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Pack.DNUPackSettings.Quiet">
            <summary>
            Gets or sets a value indicating whether to not show output such as dependencies in use.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Restore.DNULocked">
            <summary>
            Represents DNU Locked
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNU.Restore.DNULocked.Lock">
            <summary>
            Locked: <c>Lock</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.DNU.Restore.DNULocked.Unlock">
            <summary>
            Locked: <c>Unlock</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Restore.DNURestorer">
            <summary>
            DNU NuGet package restorer.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Restore.DNURestorer.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNU.Restore.DNURestorer"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNU.Restore.DNURestorer.Restore(Cake.Core.IO.FilePath,Cake.Common.Tools.DNU.Restore.DNURestoreSettings)">
            <summary>
            Restores NuGet packages using the specified path and settings.
            </summary>
            <param name="path">The project path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.DNU.Restore.DNURestoreSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.DNU.Restore.DNURestorer"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Sources">
            <summary>
            Gets or sets a list of packages sources to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.FallbackSources">
            <summary>
            Gets or sets a list of packages sources to use as a fallback.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Proxy">
            <summary>
            Gets or sets the HTTP proxy to use when retrieving packages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.NoCache">
            <summary>
            Gets or sets a value indicating whether to not use local cache.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Packages">
            <summary>
            Gets or sets the path to restore packages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.IgnoreFailedSources">
            <summary>
            Gets or sets a value indicating whether to ignore failed remote sources if there are local packages meeting version requirements.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Quiet">
            <summary>
            Gets or sets a value indicating whether to not show output such as HTTP request/cache information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Parallel">
            <summary>
            Gets or sets a value indicating whether to restores in parallel when more than one project.json is discovered.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Locked">
            <summary>
            Gets or sets to creates dependencies file with locked property. Overwrites file if it exists.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNU.Restore.DNURestoreSettings.Runtimes">
            <summary>
            Gets or sets a list of runtime identifiers to restore for.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNVM.DNVMAliases">
            <summary>
            Contains functionality for working with the DNVM Utility.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.DNVMAliases.DNVMUse(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.DNVM.Use.DNVMSettings)">
             <summary>
             Execute the use command with the dnvm tool.
             </summary>
             <param name="context">The context.</param>
             <param name="version">The version to be used by dnvm.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNVMSettings
                 {
                     Arch = "x64",
                     Runtime = "coreclr"
                 };
            
                 DNVMUse("default", settings);
             </code>
             </example>
        </member>
        <member name="T:Cake.Common.Tools.DNVM.DNVMTool`1">
            <summary>
            Bazse class for all DNVM tools
            </summary>
            <typeparam name="TSettings">The settings type</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.DNVMTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNVM.DNVMTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.DNVMTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.DNVMTool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.DNVM.Use.DNVMSettings">
            <summary>
            Settings for the dnvm command
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DNVM.Use.DNVMUser">
            <summary>
            DNVM use tool
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.Use.DNVMUser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNVM.Use.DNVMUser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNVM.Use.DNVMUser.Use(System.String,Cake.Common.Tools.DNVM.Use.DNVMSettings)">
            <summary>
            Run the Use command of the dnvm command
            </summary>
            <param name="version">The version to be used in dnvm</param>
            <param name="settings">The settings to be used</param>
        </member>
        <member name="T:Cake.Common.Tools.DNX.DNXAliases">
            <summary>
            Contains functionality for working with the DNX Utility.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNX.DNXAliases.DNXRun(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.DNX.Run.DNXRunSettings)">
             <summary>
             Execute the command.
             </summary>
             <param name="context">The context.</param>
             <param name="command">The command to be executed.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNXRunSettings
                 {
                     Project = "",
                     Framework = "dnxcore50",
                     Configuration = "Release",
                     AppBase = "",
                     Lib = ""
                 };
            
                 var testProjects = GetFiles("./test/**/project.json");
                 foreach(var testProject in projectestProjectsts)
                 {
                     settings.Project = testProject.FullPath;
                     DNXRun("test", settings);
                 }
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.DNX.DNXAliases.DNXRun(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,System.String,Cake.Common.Tools.DNX.Run.DNXRunSettings)">
             <summary>
             Execute the command.
             </summary>
             <param name="context">The context.</param>
             <param name="directoryPath">The directory which contains the project.json file.</param>
             <param name="command">The command to be executed.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var settings = new DNXRunSettings
                 {
                     Project = "",
                     Framework = "dnxcore50",
                     Configuration = "Release",
                     AppBase = "",
                     Lib = "",
                     Pacakges = "",
                 };
            
                 var testProjects = GetFiles("./test/**/project.json");
                 foreach(var testProject in projectestProjectsts)
                 {
                     DNXRun(testProject, "test", settings);
                 }
             </code>
             </example>
        </member>
        <member name="T:Cake.Common.Tools.DNX.DNXTool`1">
            <summary>
            Base class for all DNU related tools
            </summary>
            <typeparam name="TSettings">The settings type</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.DNX.DNXTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNX.DNXTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNX.DNXTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="T:Cake.Common.Tools.DNX.Run.DNXRunner">
            <summary>
            Run the dnx tool
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNX.Run.DNXRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNX.Run.DNXRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.DNX.Run.DNXRunner.Run(Cake.Core.IO.DirectoryPath,System.String,Cake.Common.Tools.DNX.Run.DNXRunSettings)">
            <summary>
            Run the dnx tool
            </summary>
            <param name="directoryPath">The directory path to the project which contains the command to be executed</param>
            <param name="command">The command to be executed</param>
            <param name="settings">The settings to be used</param>
        </member>
        <member name="T:Cake.Common.Tools.DNX.Run.DNXRunSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.DNX.Run.DNXRunner"/>
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DNX.Run.DNXRunSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DNX.Run.DNXRunSettings"/> class
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.Project">
            <summary>
            Gets or sets the project dir or the project.json file to be used (see dnx --project option)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.Framework">
            <summary>
            Gets or sets the framework to be used when running dnx
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.Configuration">
            <summary>
            Gets or sets the configuration to be used when running dnx (see dnx --configuration option)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.AppBase">
            <summary>
            Gets or sets the app base dir to be used by dnx (see dnx --appbase option)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.Lib">
            <summary>
            Gets or sets the lib dir to be used by dnx (see dnx --lib option)
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DNX.Run.DNXRunSettings.Packages">
            <summary>
            Gets or sets the packages directory to be ysed by dnx (see dnx --packages option)
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DupFinder.DupFinderAliases">
            <summary>
             Contains functionality related to ReSharper's duplication finder
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Analyses the specified file with ReSharper's DupFinder.
            The file can either be a solution/project or a source file.
            </summary>
            <param name="context">The context.</param>
            <param name="file">The file to analyze.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.DupFinder.DupFinderSettings)">
            <summary>
            Analyses the specified file with ReSharper's DupFinder using the specified settings.
            The file can either be a solution/project or a source file.
            </summary>
            <param name="context">The context.</param>
            <param name="file">The file to analyze.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Analyses the specified projects with ReSharper's DupFinder.
            The files can either be solutions and projects or a source files.
            </summary>
            <param name="context">The context.</param>
            <param name="files">The files to analyze.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.DupFinder.DupFinderSettings)">
            <summary>
            Analyses the specified projects with ReSharper's DupFinder using the specified settings.
            The files can either be solutions and projects or a source files.
            </summary>
            <param name="context">The context.</param>
            <param name="files">The files to analyze.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,System.String)">
            <summary>
            Analyses all files matching the specified pattern with ReSharper's DupFinder.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinder(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.DupFinder.DupFinderSettings)">
            <summary>
            Analyses all files matching the specified pattern with ReSharper's DupFinder,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderAliases.DupFinderFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Runs ReSharper's DupFinder using the provided config file.
            </summary>
            <param name="context">The context.</param>
            <param name="configFile">The config file.</param>
        </member>
        <member name="T:Cake.Common.Tools.DupFinder.DupFinderRunner">
            <summary>
            DupFinder runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DupFinder.DupFinderRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="log">The logger.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.DupFinder.DupFinderSettings)">
            <summary>
            Analyses the specified files using the specified settings.
            </summary>
            <param name="filePaths">The file paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderRunner.RunFromConfig(Cake.Core.IO.FilePath)">
            <summary>
            Runs ReSharper's DupFinder using the provided config file.
            </summary>
            <param name="configFile">The config file.</param>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DupFinder.DupFinderRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.DupFinder.DupFinderSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.DupFinder.DupFinderRunner"/> .
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.Debug">
            <summary>
            Gets or sets a value indicating whether the debug output should be enabled.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.DiscardCost">
            <summary>
            Gets or sets the complexity threshold for duplicate fragments.
            Code fragment with lower complexity are discarded.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.DiscardFieldsName">
            <summary>
            Gets or sets a value indicating whether to discard similar fields with different names.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.DiscardLiterals">
            <summary>
            Gets or sets a value indicating whether to discard similar lines of code with different literals.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.DiscardLocalVariablesName">
            <summary>
            Gets or sets a value indicating whether to discard similar local variables with different names.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.DiscardTypes">
            <summary>
            Gets or sets a value indicating whether to discard similar types with different names.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.IdlePriority">
            <summary>
            Gets or sets a value indicating whether the process priority should be set to idle.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ExcludeFilesByStartingCommentSubstring">
            <summary>
            Gets or sets a list of keywords to exclude files that contain one of the keywords in their opening comments.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ExcludeCodeRegionsByNameSubstring">
            <summary>
            Gets or sets a list of keywords to exclude regions that contain one of the keywords in their message.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ExcludePattern">
            <summary>
            Gets or sets a lift of patterns which will be excluded from the analysis.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.MsBuildProperties">
            <summary>
            Gets or sets MsBuild properties.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.NormalizeTypes">
            <summary>
            Gets or sets a value indicating whether to normalize type names to the last subtype.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.CachesHome">
            <summary>
            Gets or sets the directory where caches will be stored.
            The default is %TEMP%.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.OutputFile">
            <summary>
            Gets or sets the location DupFinder should write its output.
            </summary>
            <value>The location DupFinder should write its output</value>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ShowStats">
            <summary>
            Gets or sets a value indicating whether to show CPU and memory usage statistics.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ShowText">
            <summary>
            Gets or sets a value indicating whether to show duplicates text in the report.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.DupFinder.DupFinderSettings.ThrowExceptionOnFindingDuplicates">
            <summary>
            Gets or sets a value indicating whether to throw an exception on finding duplicates
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Fixie.FixieAliases">
            <summary>
            Contains functionality related to running Fixie tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all Fixie tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.Fixie.FixieSettings)">
            <summary>
            Runs all Fixie tests in the assemblies matching the specified pattern,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all Fixie tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all Fixie tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.Fixie.FixieSettings)">
            <summary>
            Runs all Fixie tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieAliases.Fixie(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.Fixie.FixieSettings)">
            <summary>
            Runs all Fixie tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Fixie.FixieRunner">
            <summary>
            The Fixie test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Fixie.FixieRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.Fixie.FixieSettings)">
            <summary>
            Runs the tests in the specified assemblies, using the specified settings.
            </summary>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.Fixie.FixieSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Fixie.FixieRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Fixie.FixieSettings.NUnitXml">
            <summary>
            Gets or sets the file to be used to output NUnit style of XML results.
            </summary>
            <value>
            The name of the file to write NUnit style of results.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Fixie.FixieSettings.XUnitXml">
            <summary>
            Gets or sets the file to be used to output xUnit style of XML results.
            </summary>
            <value>
            The name of the file to write xUnit style of results.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Fixie.FixieSettings.TeamCity">
            <summary>
            Gets or sets the the option to force TeamCity-formatted output on or off.
            </summary>
            <value>
            The value of TeamCity-formatted output. Either "on" or "off".
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Fixie.FixieSettings.Options">
            <summary>
            Gets the collection of Options as KeyValuePairs.
            </summary>
            <value>
            The collection of keys and values.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.Fixie.FixieSettingsExtensions">
            <summary>
            Contains functionality related to Fixie settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Fixie.FixieSettingsExtensions.WithOption(Cake.Common.Tools.Fixie.FixieSettings,System.String,System.String[])">
            <summary>
            Adds an option to the settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The option name.</param>
            <param name="values">The option values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.Fixie.FixieSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.GitLink.GitLinkAliases">
            <summary>
            Contains functionality for working with GitLink.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkAliases.GitLink(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Update pdb files to link all sources.
            This will allow anyone to step through the source code while debugging without a symbol source server.
            </summary>
            <param name="context">The context.</param>
            <param name="repositoryRootPath">The Solution File to analyze.</param>
            <example>
            <code>
            GitLink("C:/temp/solution");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkAliases.GitLink(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.GitLink.GitLinkSettings)">
            <summary>
            Update pdb files to link all sources, using specified settings.
            This will allow anyone to step through the source code while debugging without a symbol source server.
            </summary>
            <param name="context">The context.</param>
            <param name="repositoryRootPath">The path to the Root of the Repository to analyze.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitLink("C:/temp/solution", new GitLinkSettings {
                RepositoryUrl = new Uri("http://mydomain.com"),
                Branch        = "master",
                ShaHash       = "abcdef",
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.GitLink.GitLinkRunner">
            <summary>
            GitLink runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitLink.GitLinkRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="log">The logger.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkRunner.Run(Cake.Core.IO.DirectoryPath,Cake.Common.Tools.GitLink.GitLinkSettings)">
            <summary>
            Update pdb files to link all sources.
            </summary>
            <param name="repositoryRootPath">The path to the Root of the Repository to analyze.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitLink.GitLinkRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.GitLink.GitLinkSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitLink.GitLinkRunner"/> .
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.RepositoryUrl">
            <summary>
            Gets or sets the Url to remote git repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.SolutionFileName">
            <summary>
            Gets or sets the Solution file name.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.Configuration">
            <summary>
            Gets or sets the name of the configuration.
            </summary>
            <remarks>Default is Release</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.Platform">
            <summary>
            Gets or sets the name of the platform.
            </summary>
            <remarks>Default is AnyCPU</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.Branch">
            <summary>
            Gets or sets the name of the branch to use on the remote repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitLink log file.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.ShaHash">
            <summary>
            Gets or sets the SHA-1 hash of the git commit to be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.PdbDirectoryPath">
            <summary>
            Gets or sets the directory where the PDB files are located.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.UsePowerShell">
            <summary>
            Gets or sets a value indicating whether the Use PowerShell Command option should be enabled.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.ErrorsAsWarnings">
            <summary>
            Gets or sets a value indicating whether the ErrorsAsWarnings option should be enabled.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.SkipVerify">
            <summary>
            Gets or sets a value indicating whether the Skip Verify option should be enabled.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitLink.GitLinkSettings.IsDebug">
            <summary>
            Gets or sets a value indicating whether the debug output should be enabled.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitVersion.GitVersion">
            <summary>
            GitVersion information
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.Major">
            <summary>
            Gets or sets the major version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.Minor">
            <summary>
            Gets or sets the minor version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.Patch">
            <summary>
            Gets or sets the patch version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.PreReleaseTag">
            <summary>
            Gets or sets the pre-release tag.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.PreReleaseTagWithDash">
            <summary>
            Gets or sets the pre-release tag with dash.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.BuildMetaData">
            <summary>
            Gets or sets the build metadata.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.FullBuildMetaData">
            <summary>
            Gets or sets the major version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.MajorMinorPatch">
            <summary>
            Gets or sets the major, minor, and path.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.SemVer">
            <summary>
            Gets or sets the Semantic Version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.LegacySemVer">
            <summary>
            Gets or sets the legacy Semantic Version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.LegacySemVerPadded">
            <summary>
            Gets or sets the padded legacy Semantic Version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.AssemblySemVer">
            <summary>
            Gets or sets the assembly Semantic Version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.FullSemVer">
            <summary>
            Gets or sets the full Semantic Version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.InformationalVersion">
            <summary>
            Gets or sets the informational version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.BranchName">
            <summary>
            Gets or sets the branch name.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.Sha">
            <summary>
            Gets or sets the git sha.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.NuGetVersionV2">
            <summary>
            Gets or sets the nuget version for v2.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersion.NuGetVersion">
            <summary>
            Gets or sets the nuget version.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitVersion.GitVersionAliases">
            <summary>
            Contains functionality related to GitVersion.
            <see href="http://gitversion.readthedocs.org/en/latest/">GitVersion Documentation</see>
            <see href="https://www.nuget.org/packages/GitVersion.CommandLine/">GitVersion NuGet Package</see>
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionAliases.GitVersion(Cake.Core.ICakeContext)">
            <summary>
            Retrives the GitVersion output.
            </summary>
            <param name="context">The context.</param>
            <returns>The git version info.</returns>
            <example>
            <para>Update the assembly info files for the project.</para>
            <para>Cake task:</para>
            <code>
            <![CDATA[
            Task("UpdateAssemblyInfo")
                .Does(() =>
            {
                GitVersion(new GitVersionSettings {
                    UpdateAssemblyInfo = true
                });
            });
            ]]>
            </code>
            <para>Get the git version info for the project using a dynamic repository.</para>
            <para>Cake task:</para>
            <code>
            <![CDATA[
            Task("GetVersionInfo")
                .Does(() =>
            {
                var result = GitVersion(new GitVersionSettings {
                    UserName = "MyUser",
                    Password = "MyPassword,
                    Url = "http://git.myhost.com/myproject.git"
                    Branch = "develop"
                    Commit = EnviromentVariable("MY_COMMIT")
                });
                // Use result for building nuget packages, setting build server version, etc...
            });
            ]]>
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionAliases.GitVersion(Cake.Core.ICakeContext,Cake.Common.Tools.GitVersion.GitVersionSettings)">
            <summary>
            Retrives the GitVersion output.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The GitVersion settings.</param>
            <returns>The git version info.</returns>
            <example>
            <para>Update the assembly info files for the project.</para>
            <para>Cake task:</para>
            <code>
            <![CDATA[
            Task("UpdateAssemblyInfo")
                .Does(() =>
            {
                GitVersion(new GitVersionSettings {
                    UpdateAssemblyInfo = true
                });
            });
            ]]>
            </code>
            <para>Get the git version info for the project using a dynamic repository.</para>
            <para>Cake task:</para>
            <code>
            <![CDATA[
            Task("GetVersionInfo")
                .Does(() =>
            {
                var result = GitVersion(new GitVersionSettings {
                    UserName = "MyUser",
                    Password = "MyPassword,
                    Url = "http://git.myhost.com/myproject.git"
                    Branch = "develop"
                    Commit = EnviromentVariable("MY_COMMIT")
                });
                // Use result for building nuget packages, setting build server version, etc...
            });
            ]]>
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.GitVersion.GitVersionOutput">
            <summary>
            The git version output type.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitVersion.GitVersionOutput.Json">
            <summary>
            Outputs to the stdout using json.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitVersion.GitVersionOutput.BuildServer">
            <summary>
            Outputs to the stdout in a way usuable by a detected buildserver.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitVersion.GitVersionRunner">
            <summary>
            The GitVersion runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitVersion.GitVersionRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionRunner.Run(Cake.Common.Tools.GitVersion.GitVersionSettings)">
            <summary>
            Runs GitVersion and processes the results.
            </summary>
            <param name="settings">The settings.</param>
            <returns>A task with the GitVersion results.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitVersion.GitVersionRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.GitVersion.GitVersionSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitVersion.GitVersionRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.RepositoryPath">
            <summary>
            Gets or sets the path for the git repository to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.OutputType">
            <summary>
            Gets or sets the output type.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.UpdateAssemblyInfo">
            <summary>
            Gets or sets a value indicating whether to update all the assemblyinfo files.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.UpdateAssemblyInfoFilePath">
            <summary>
            Gets or sets whether to update all the assemblyinfo files.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.ShowVariable">
            <summary>
            Gets or sets whether to only show a specific variable.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.UserName">
            <summary>
            Gets or sets the username for the target repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.Password">
            <summary>
            Gets or sets the password for the target repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.Url">
            <summary>
            Gets or sets the git url to use if using dynamic repositories.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.Branch">
            <summary>
            Gets or sets the branch to use if using dynamic repositories.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.Commit">
            <summary>
            Gets or sets the branch to use if using dynamic repositories.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.DynamicRepositoryPath">
            <summary>
            Gets or sets the dynamic repository path. Defaults to %TEMP%.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitVersion.GitVersionSettings.LogFilePath">
            <summary>
            Gets or sets the path to the log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings.TargetDirectory">
            <summary>
            Gets or sets the path on which GitReleaseManager should be executed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitReleaseManager log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder">
            <summary>
            The GitReleaseManager Asset Adder used to add assets to a release.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1">
            <summary>
            Base class for all GitReleaseManager related tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerTool`1.GetAlternativeToolPaths(`0)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAssetsAdder.AddAssets(System.String,System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings)">
            <summary>
            Creates a Release using the specified and settings.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <param name="assets">The assets to upload.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings.TargetDirectory">
            <summary>
            Gets or sets the path on which GitReleaseManager should be executed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitReleaseManager log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser">
            <summary>
            The GitReleaseManager Milestone Closer used to close milestones.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerMilestoneCloser.Close(System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings)">
            <summary>
            Creates a Release using the specified and settings.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="milestone">The milestone.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.Milestone">
            <summary>
            Gets or sets the milestone to be used when creating the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.Name">
            <summary>
            Gets or sets the name to be used when creating the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.InputFilePath">
            <summary>
            Gets or sets the location of a set of Release Notes to be used when creating the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether or not to create the release as a pre-release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.Assets">
            <summary>
            Gets or sets the Path(s) to the file(s) to include in the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.TargetCommitish">
            <summary>
            Gets or sets the commit to tag. Can be a branch or SHA. Defaults to repository's default branch..
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.TargetDirectory">
            <summary>
            Gets or sets the path on which GitReleaseManager should be executed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitReleaseManager log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator">
            <summary>
            The GitReleaseManager Release Creator used to create releases.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreator.Create(System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings)">
            <summary>
            Creates a Release using the specified and settings.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter">
            <summary>
            The GitReleaseManager Release Publisher used to publish releases.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter.Export(System.String,System.String,System.String,System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings)">
            <summary>
            Creates a Release using the specified and settings.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="fileOutputPath">The output path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExporter"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings.TagName">
            <summary>
            Gets or sets the tag name to be used when exporting the release notes.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings.TargetDirectory">
            <summary>
            Gets or sets the path on which GitReleaseManager should be executed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitReleaseManager log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases">
            <summary>
            Contains functionality for working with GitReleaseManager.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerCreate(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String)">
            <summary>
            Creates a Package Release.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <example>
            <code>
            GitReleaseManagerCreate("user", "password", "owner", "repo");
            </code>
            </example>
            <example>
            <code>
            GitReleaseManagerCreate("user", "password", "owner", "repo");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerCreate(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Create.GitReleaseManagerCreateSettings)">
            <summary>
            Creates a Package Release using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseManagerCreate("user", "password", "owner", "repo", new GitReleaseManagerCreateSettings {
                Milestone         = "0.1.0",
                Prerelease        = false,
                Assets            = "c:/temp/asset1.txt,c:/temp/asset2.txt",
                TargetCommitish   = "master",
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
            <example>
            <code>
            GitReleaseManagerCreate("user", "password", "owner", "repo", new GitReleaseManagerCreateSettings {
                Name              = "0.1.0",
                InputFilePath     = "c:/repo/releasenotes.md",
                Prerelease        = false,
                Assets            = "c:/temp/asset1.txt,c:/temp/asset2.txt",
                TargetCommitish   = "master",
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerAddAssets(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Add Assets to an existing release.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <param name="assets">The assets.</param>
            <example>
            <code>
            GitReleaseManagerAddAssets("user", "password", "owner", "repo", "0.1.0", "c:/temp/asset1.txt,c:/temp/asset2.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerAddAssets(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.AddAssets.GitReleaseManagerAddAssetsSettings)">
            <summary>
            Add Assets to an existing release using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <param name="assets">The assets.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseManagerAddAssets("user", "password", "owner", "repo", "0.1.0", "c:/temp/asset1.txt,c:/temp/asset2.txt" new GitReleaseManagerAddAssetsSettings {
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerClose(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Closes the milestone associated with a release.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="milestone">The milestone.</param>
            <example>
            <code>
            GitReleaseManagerClose("user", "password", "owner", "repo", "0.1.0");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerClose(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Close.GitReleaseManagerCloseMilestoneSettings)">
            <summary>
            Closes the milestone associated with a release using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="milestone">The milestone.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseManagerClose("user", "password", "owner", "repo", "0.1.0", new GitReleaseManagerCloseMilestoneSettings {
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerPublish(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String)">
            <summary>
            Publishes the release.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <example>
            <code>
            GitReleaseManagerPublish("user", "password", "owner", "repo", "0.1.0");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerPublish(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings)">
            <summary>
            Publishes the release using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseManagerPublish("user", "password", "owner", "repo", "0.1.0", new GitReleaseManagerPublishSettings {
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerExport(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Exports the release notes.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="fileOutputPath">The output file path.</param>
            <example>
            <code>
            GitReleaseManagerExport("user", "password", "owner", "repo", "c:/temp/releasenotes.md")
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerAliases.GitReleaseManagerExport(Cake.Core.ICakeContext,System.String,System.String,System.String,System.String,Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseManager.Export.GitReleaseManagerExportSettings)">
            <summary>
            Exports the release notes using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="fileOutputPath">The output file path.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseManagerExport("user", "password", "owner", "repo", "c:/temp/releasenotes.md", new GitReleaseManagerExportSettings {
                TagName           = "0.1.0",
                TargetDirectory   = "c:/repo",
                LogFilePath       = "c:/temp/grm.log"
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerToolResolver">
            <summary>
            Contains GitReleaseManager path resolver functionality
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver">
            <summary>
            Represents a GitReleaseManager path resolver.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver.ResolvePath">
            <summary>
            Resolves the path to GitReleaseManager.exe.
            </summary>
            <returns>The path to nuget.exe.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerToolResolver.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerToolResolver"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.GitReleaseManagerToolResolver.ResolvePath">
            <summary>
            Resolves the path to GitReleaseManager.exe.
            </summary>
            <returns>The path to GitReleaseManager.exe.</returns>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher">
            <summary>
            The GitReleaseManager Release Publisher used to publish releases.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Common.Tools.GitReleaseManager.IGitReleaseManagerToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The GitReleaseManager tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher.Publish(System.String,System.String,System.String,System.String,System.String,Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings)">
            <summary>
            Creates a Release using the specified and settings.
            </summary>
            <param name="userName">The user name.</param>
            <param name="password">The password.</param>
            <param name="owner">The owner.</param>
            <param name="repository">The repository.</param>
            <param name="tagName">The tag name.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublisher"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings.TargetDirectory">
            <summary>
            Gets or sets the path on which GitReleaseManager should be executed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseManager.Publish.GitReleaseManagerPublishSettings.LogFilePath">
            <summary>
            Gets or sets the path to the GitReleaseManager log file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesAliases">
            <summary>
             Contains functionality related to GitReleaseNotes
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesAliases.GitReleaseNotes(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings)">
            <summary>
            Generates a set of release notes based on the commit history of the repository and specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            GitReleaseNotes("c:/temp/releasenotes.md", new GitReleaseNotesSettings {
                WorkingDirectory         = "c:/temp",
                Verbose                  = true,
                IssueTracker             = IssueTracker.GitHub,
                AllTags                  = true,
                RepoUserName             = "bob",
                RepoPassword             = "password",
                RepoUrl                  = "http://myrepo.co.uk",
                RepoBranch               = "master",
                IssueTrackerUrl          = "http://myissuetracker.co.uk",
                IssueTrackerUserName     = "bob",
                IssueTrackerPassword     = "password",
                IssueTrackerProjectId    = "1234",
                Categories               = "Category1",
                Version                  = "1.2.3.4",
                AllLabels                = true
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner">
            <summary>
            The GitReleaseNotes runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings)">
            <summary>
            Runs GitVersion and processes the results.
            </summary>
            <param name="outputFile">The output file.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.WorkingDirectory">
            <summary>
            Gets or sets the Working Directory for generating release notes from.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether verbose logging is used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTracker">
            <summary>
            Gets or sets the IssueTracker to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.AllTags">
            <summary>
            Gets or sets a value indicating whether all tags should be included in the releasenotes.
            </summary>
            <remarks>If not specified then only the issues since that last tag are included.</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.RepoUserName">
            <summary>
            Gets or sets the username to use when accessing repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.RepoPassword">
            <summary>
            Gets or sets the password to use when accessing repository.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.RepoToken">
            <summary>
            Gets or sets the token to use when accessing repository.
            </summary>
            <remarks>To be used instead of username/password</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.RepoUrl">
            <summary>
            Gets or sets the Url to use when accessing repository.
            </summary>
            <remarks>To be used instead of username/password</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.RepoBranch">
            <summary>
            Gets or sets the branch name to checkout any existing release notes file.
            </summary>
            <remarks>To be used instead of username/password</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerUrl">
            <summary>
            Gets or sets the Url to the Issue Tracker.
            </summary>
            <remarks>To be used instead of username/password</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerUserName">
            <summary>
            Gets or sets the username to use when accessing issue tracker.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerPassword">
            <summary>
            Gets or sets the password to use when accessing issue tracker.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerToken">
            <summary>
            Gets or sets the token to use when accessing issue tracker.
            </summary>
            <remarks>To be used instead of username/password</remarks>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerProjectId">
            <summary>
            Gets or sets the Project Id to use when accessing issue tracker.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.IssueTrackerFilter">
            <summary>
            Gets or sets the Jql query for closed issues you would like included if mentioned.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.Categories">
            <summary>
            Gets or sets a value which allows additional labels to be treated as categories.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.Version">
            <summary>
            Gets or sets a value which specifies the version to publish.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesSettings.AllLabels">
            <summary>
            Gets or sets a value indicating whether all labels should be included in the releasenotes.
            </summary>
            <remarks>If not specified then only the defaults (bug, enhancement, feature) are included.</remarks>
        </member>
        <member name="T:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker">
            <summary>
            The IssueTracker to be used.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker.BitBucket">
            <summary>
            Uses BitBucket as Issue Tracker.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker.GitHub">
            <summary>
            Uses GitHub as Issue Tracker.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker.Jira">
            <summary>
            Uses Jira as Issue Tracker.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.GitReleaseNotes.GitReleaseNotesIssueTracker.YouTrack">
            <summary>
            Uses YouTrack as Issue Tracker.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeAliases">
            <summary>
            Contains functionality related to ILMerge.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliases.ILMerge(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILMerge("./MergedCake.exe", "./Cake.exe", assemblyPaths);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeAliases.ILMerge(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILMerge.ILMergeSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILMerge(
                "./MergedCake.exe",
                "./Cake.exe",
                assemblyPaths,
                new ILMergeSettings { Internalize = true });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeRunner">
            <summary>
            The ILMerge runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.ILMergeRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.Merge(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILMerge.ILMergeSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="outputAssemblyPath">The output assembly path.</param>
            <param name="primaryAssemblyPath">The primary assembly path.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeRunner.GetToolExecutableNames">
            <summary>
            Gets the name of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.ILMergeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.ILMerge.ILMergeRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.ILMergeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.ILMergeSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.Internalize">
            <summary>
            Gets or sets a value indicating whether whether types in assemblies other
            than the primary assembly should have their visibility modified to internal.
            </summary>
            <value>
            <c>true</c> if types in assemblies other than the primary assembly should
            have their visibility modified to internal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.TargetKind">
            <summary>
            Gets or sets the target kind.
            </summary>
            <value>The target kind.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.ILMergeSettings.TargetPlatform">
            <summary>
            Gets or sets the target platform.
            </summary>
            <value>The target platform.</value>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetKind">
            <summary>
            Represents an ILMerge target.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Default">
            <summary>
            TargetKind: <c>Default</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Dll">
            <summary>
            TargetKind: <c>Dynamic Link Library</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.Exe">
            <summary>
            TargetKind: <c>Executable</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetKind.WinExe">
            <summary>
            TargetKind: <c>Windows executable</c>
            </summary>
        </member>
        <member name="T:Cake.Common.ArgumentAliases">
            <summary>
            Contains functionality related to arguments.
            </summary>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.HasArgument(Cake.Core.ICakeContext,System.String)">
            <summary>
            Determines whether or not the specified argument exist.
            </summary>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <returns>Whether or not the specified argument exist.</returns>
            <example>
            This sample shows how to call the <see cref="M:Cake.Common.ArgumentAliases.HasArgument(Cake.Core.ICakeContext,System.String)"/> method.
            <code>
            var argumentName = "myArgument";
            //Cake.exe .\hasargument.cake -myArgument="is specified"
            if (HasArgument(argumentName))
            {
                Information("{0} is specified", argumentName);
            }
            //Cake.exe .\hasargument.cake
            else
            {
                Warning("{0} not specified", argumentName);
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.Argument``1(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets an argument and throws if the argument is missing.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <returns>The value of the argument.</returns>
            <example>
            <code>
            //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
            Information("Argument {0}", Argument&lt;string&gt;("myArgument"));
            var loopCount = Argument&lt;int&gt;("loopCount");
            for(var index = 0;index&lt;loopCount; index++)
            {
                Information("Index {0}", index);
            }
            </code>
            </example>
            <exception cref="T:Cake.Core.CakeException">Argument value is null.</exception>
            <exception cref="T:System.ArgumentNullException"><paramref name="context"/> is null.</exception>
        </member>
        <member name="M:Cake.Common.ArgumentAliases.Argument``1(Cake.Core.ICakeContext,System.String,``0)">
            <summary>
            Gets an argument and returns the provided <paramref name="defaultValue"/> if the argument is missing.
            </summary>
            <typeparam name="T">The argument type.</typeparam>
            <param name="context">The context.</param>
            <param name="name">The argument name.</param>
            <param name="defaultValue">The value to return if the argument is missing.</param>
            <returns>The value of the argument if it exist; otherwise <paramref name="defaultValue"/>.</returns>
            <example>
            <code>
            //Cake.exe .\argument.cake -myArgument="is valid" -loopCount = 5
            Information("Argument {0}", Argument&lt;string&gt;("myArgument", "is NOT valid"));
            var loopCount = Argument&lt;int&gt;("loopCount", 10);
            for(var index = 0;index&lt;loopCount; index++)
            {
                Information("Index {0}", index);
            }
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.ZipAliases">
            <summary>
            Contains functionality related to compress files to Zip.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath)">
            <summary>
            Zips the specified directory.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <example>
            <code>
            Zip("./publish", "publish.zip");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Zips the files matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="pattern">The pattern.</param>
            <example>
            <code>
            Zip("./", "xmlfiles.zip", "./*.xml");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Zips the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*.dll");
            Zip("./", "cakeassemblies.zip", files);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Zip(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Zips the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = new [] {
                "./src/Cake/bin/Debug/Autofac.dll",
                "./src/Cake/bin/Debug/Cake.Common.dll",
                "./src/Cake/bin/Debug/Cake.Core.dll",
                "./src/Cake/bin/Debug/Cake.exe"
            };
            Zip("./", "cakebinaries.zip", files);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.ZipAliases.Unzip(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Unzips the specified file
            </summary>
            <param name="context">The context.</param>
            <param name="zipFile">Zip file to unzip.</param>
            <param name="outputPath">Output path to unzip into.</param>
        </member>
        <member name="T:Cake.Common.IO.Zipper">
            <summary>
            Performs Zip compression.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.Zipper.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.IO.Zipper"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="log">The log.</param>
        </member>
        <member name="M:Cake.Common.IO.Zipper.Zip(Cake.Core.IO.DirectoryPath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Zips the specified directory.
            </summary>
            <param name="rootPath">The root path.</param>
            <param name="outputPath">The output path.</param>
            <param name="filePaths">The files to zip.</param>
        </member>
        <member name="M:Cake.Common.IO.Zipper.Unzip(Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Unzips the specified file to the specified output path
            </summary>
            <param name="zipPath">Zip file path.</param>
            <param name="outputPath">Output directory path.</param>
        </member>
        <member name="T:Cake.Common.IO.DirectoryAliases">
            <summary>
            Contains extension methods for working with directories.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.Directory(Cake.Core.ICakeContext,System.String)">
             <summary>
             Gets a directory path from string.
             </summary>
             <example>
             <code>
             // Get the temp directory.
             var root = Directory("./");
             var temp = root + Directory("temp");
            
             // Clean the directory.
             CleanDirectory(temp);
             </code>
             </example>
             <param name="context">The context.</param>
             <param name="path">The path.</param>
             <returns>A directory path.</returns>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath},System.Boolean)">
            <summary>
            Deletes the specified directories.
            </summary>
            <example>
            <code>
            var directoriesToDelete = new DirectoryPath[]{
                Directory("be"),
                Directory("gone")
            };
            DeleteDirectories(directoriesToDelete, recursive:true);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},System.Boolean)">
            <summary>
            Deletes the specified directories.
            </summary>
            <example>
            <code>
            var directoriesToDelete = new []{
                "be",
                "gone"
            };
            DeleteDirectories(directoriesToDelete, recursive:true);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DeleteDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,System.Boolean)">
            <summary>
            Deletes the specified directory.
            </summary>
            <example>
            <code>
            DeleteDirectory("./be/gone", recursive:true);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <param name="recursive">Will perform a recursive delete if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.String)">
            <summary>
            Cleans the directories matching the specified pattern.
            Cleaning the directory will remove all it's content but not the directory itself.
            </summary>
            <example>
            <code>
            CleanDirectories("./src/**/bin/debug");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The pattern to match.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.String,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Cleans the directories matching the specified pattern.
            Cleaning the directory will remove all it's content but not the directory itself.
            </summary>
            <example>
            <code>
            Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
            fileSystemInfo=>!fileSystemInfo.Path.FullPath.EndsWith(
                            "node_modules",
                            StringComparison.OrdinalIgnoreCase);
            CleanDirectories("./src/**/bin/debug", exclude_node_modules);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The pattern to match.</param>
            <param name="predicate">The predicate used to filter directories based on file system information.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.DirectoryPath})">
            <summary>
            Cleans the specified directories.
            Cleaning a directory will remove all it's content but not the directory itself.
            </summary>
            <example>
            <code>
            var directoriesToClean = GetDirectories("./src/**/bin/");
            CleanDirectories(directoriesToClean);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectories(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Cleans the specified directories.
            Cleaning a directory will remove all it's content but not the directory itself.
            </summary>
            <example>
            <code>
            var directoriesToClean = new []{
                "./src/Cake/obj",
                "./src/Cake.Common/obj"
            };
            CleanDirectories(directoriesToClean);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="directories">The directory paths.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Cleans the specified directory.
            </summary>
            <example>
            <code>
            CleanDirectory("./src/Cake.Common/obj");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CleanDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Cleans the specified directory.
            </summary>
            <example>
            <code>
            CleanDirectory("./src/Cake.Common/obj", fileSystemInfo=>!fileSystemInfo.Hidden);
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
            <param name="predicate">Predicate used to determine which files/directories should get deleted.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CreateDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Creates the specified directory.
            </summary>
            <example>
            <code>
            CreateDirectory("publish");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The directory path.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.CopyDirectory(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies a directory to the specified location.
            </summary>
            <example>
            <code>
            CopyDirectory("source_path", "destination_path");
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="source">The source directory path.</param>
            <param name="destination">The destination directory path.</param>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.DirectoryExists(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Determines whether the given path refers to an existing directory.
            </summary>
            <example>
            <code>
            var dir = "publish";
            if (!DirectoryExists(dir))
            {
                CreateDirectory(dir);
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The <see cref="T:Cake.Core.IO.DirectoryPath"/> to check.</param>
            <returns><c>true</c> if <paramref name="path"/> refers to an existing directory;
            <c>false</c> if the directory does not exist or an error occurs when trying to
            determine if the specified path exists.</returns>
        </member>
        <member name="M:Cake.Common.IO.DirectoryAliases.MakeAbsolute(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <example>
            <code>
            var path = MakeAbsolute(Directory("./resources"));
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>An absolute directory path.</returns>
        </member>
        <member name="T:Cake.Common.IO.FileAliases">
            <summary>
            Contains functionality related to file operations.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.File(Cake.Core.ICakeContext,System.String)">
             <summary>
             Gets a file path from string.
             </summary>
             <example>
             <code>
             // Get the temp file.
             var root = Directory("./");
             var temp = root + File("temp");
            
             // Delete the file.
             CleanDirectory(temp);
             </code>
             </example>
             <param name="context">The context.</param>
             <param name="path">The path.</param>
             <returns>A file path.</returns>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFileToDirectory(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies an existing file to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CopyFileToDirectory("test.txt", "./targetdir");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Copies an existing file to a new file, providing the option to specify a new file name.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetFilePath">The target file path.</param>
            <example>
            <code>
            CopyFile("test.tmp", "test.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies all files matching the provided pattern to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CopyFiles("Cake.*", "./publish");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*");
            CopyFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.CopyFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Core.IO.DirectoryPath)">
            <summary>
            Copies existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            CreateDirectory("destination");
            var files = new [] {
                "Cake.exe",
                "Cake.pdb"
            };
            CopyFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFileToDirectory(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves an existing file to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            MoveFileToDirectory("test.txt", "./targetdir");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFiles(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves existing files matching the specified pattern to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            MoveFiles("./publish/Cake.*", "./destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Moves existing files to a new location.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <param name="targetDirectoryPath">The target directory path.</param>
            <example>
            <code>
            var files = GetFiles("./publish/Cake.*");
            MoveFiles(files, "destination");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MoveFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Moves an existing file to a new location, providing the option to specify a new file name.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <param name="targetFilePath">The target file path.</param>
            <example>
            <code>
            MoveFile("test.tmp", "test.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFiles(Cake.Core.ICakeContext,System.String)">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <example>
            <code>
            DeleteFiles("./publish/Cake.*");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFiles(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Deletes the specified files.
            </summary>
            <param name="context">The context.</param>
            <param name="filePaths">The file paths.</param>
            <example>
            <code>
            var files = GetFiles("./destination/Cake.*");
            DeleteFiles(files);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.DeleteFile(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Deletes the specified file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The file path.</param>
            <example>
            <code>
            DeleteFile("deleteme.txt");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.FileExists(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Determines whether the given path refers to an existing file.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The <see cref="T:Cake.Core.IO.FilePath"/> to check.</param>
            <returns><c>true</c> if <paramref name="filePath"/> refers to an existing file;
            <c>false</c> if the file does not exist or an error occurs when trying to
            determine if the specified file exists.</returns>
            <example>
            <code>
            if (FileExists("findme.txt"))
            {
                Information("File exists!");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.IO.FileAliases.MakeAbsolute(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Makes the path absolute (if relative) using the current working directory.
            </summary>
            <param name="context">The context.</param>
            <param name="path">The path.</param>
            <returns>An absolute file path.</returns>
            <example>
            <code>
            var path = MakeAbsolute(File("./resources"));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.IO.GlobbingAliases">
            <summary>
            Contains functionality related to file system globbing.
            </summary>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetFiles(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets all files matching the specified pattern.
            </summary>
            <example>
            <code>
            var files = GetFiles("./**/Cake.*.dll");
            foreach(var file in files)
            {
                Information("File: {0}", file);
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePathCollection"/>.</returns>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetFiles(Cake.Core.ICakeContext,System.String,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Gets all files matching the specified pattern.
            </summary>
            <example>
            <code>
            Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
            fileSystemInfo=&gt;!fileSystemInfo.Path.FullPath.EndsWith(
                            "node_modules",
                            StringComparison.OrdinalIgnoreCase);
            var files = GetFiles("./**/Cake.*.dll", exclude_node_modules);
            foreach(var file in files)
            {
                Information("File: {0}", file);
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <param name="predicate">The predicate used to filter files based on file system information.</param>
            <returns>A <see cref="T:Cake.Core.IO.FilePathCollection"/>.</returns>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetDirectories(Cake.Core.ICakeContext,System.String)">
            <summary>
            Gets all directory matching the specified pattern.
            </summary>
            <example>
            <code>
            var directories = GetDirectories("./src/**/obj/*");
            foreach(var directory in directories)
            {
                Information("Directory: {0}", directory);
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPathCollection"/>.</returns>
        </member>
        <member name="M:Cake.Common.IO.GlobbingAliases.GetDirectories(Cake.Core.ICakeContext,System.String,System.Func{Cake.Core.IO.IFileSystemInfo,System.Boolean})">
            <summary>
            Gets all directory matching the specified pattern.
            </summary>
            <example>
            <code>
            Func&lt;IFileSystemInfo, bool&gt; exclude_node_modules =
            fileSystemInfo=&gt;!fileSystemInfo.Path.FullPath.EndsWith(
                            "node_modules",
                            StringComparison.OrdinalIgnoreCase);
            var directories = GetDirectories("./src/**/obj/*", exclude_node_modules);
            foreach(var directory in directories)
            {
                Information("Directory: {0}", directory);
            }
            </code>
            </example>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern to match.</param>
            <param name="predicate">The predicate used to filter directories based on file system information.</param>
            <returns>A <see cref="T:Cake.Core.IO.DirectoryPathCollection"/>.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetPlatform">
            <summary>
            Represents a target platform.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.TargetPlatform.#ctor(Cake.Common.Tools.ILMerge.TargetPlatformVersion)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.TargetPlatform"/> class.
            </summary>
            <param name="platform">The .NET framework target version.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILMerge.TargetPlatform.#ctor(Cake.Common.Tools.ILMerge.TargetPlatformVersion,Cake.Core.IO.DirectoryPath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILMerge.TargetPlatform"/> class.
            </summary>
            <param name="platform">The .NET framework target version.</param>
            <param name="path">The directory where <c>mscorlib.dll</c> can be found.</param>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.TargetPlatform.Platform">
            <summary>
            Gets the .NET framework target version.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ILMerge.TargetPlatform.Path">
            <summary>
            Gets the directory where <c>mscorlib.dll</c> can be found.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ILMerge.TargetPlatformVersion">
            <summary>
            Represents the .NET Framework for the target assembly
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v1">
            <summary>
            NET Framework v1
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v11">
            <summary>
            NET Framework v1.1
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v2">
            <summary>
            NET Framework v2
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ILMerge.TargetPlatformVersion.v4">
            <summary>
            NET Framework v4
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.InspectCode.InspectCodeAliases">
            <summary>
            Contains functionality related to Resharper's code inspection.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliases.InspectCode(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Analyses the specified solution with Resharper's InspectCode.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliases.InspectCode(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.InspectCode.InspectCodeSettings)">
            <summary>
            Analyses the specified solution with Resharper's InspectCode,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeAliases.InspectCodeFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Runs ReSharper's InspectCode using the specified config file.
            </summary>
            <param name="context">The context.</param>
            <param name="configFile">The config file.</param>
        </member>
        <member name="T:Cake.Common.Tools.InspectCode.InspectCodeRunner">
            <summary>
            InspectCode runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.Diagnostics.ICakeLog)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.InspectCode.InspectCodeRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="log">The logger.</param>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.InspectCode.InspectCodeSettings)">
            <summary>
            Analyses the specified solution, using the specified settings.
            </summary>
            <param name="solution">The solution.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeRunner.RunFromConfig(Cake.Core.IO.FilePath)">
            <summary>
            Runs ReSharper's InspectCode using the provided config file.
            </summary>
            <param name="configFile">The config file.</param>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.InspectCode.InspectCodeRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.InspectCode.InspectCodeSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.InspectCode.InspectCodeRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.OutputFile">
            <summary>
            Gets or sets the location InspectCode should write its output.
            </summary>
            <value>The location that InspectCode should write its output</value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.SolutionWideAnalysis">
            <summary>
            Gets or sets a value indicating whether enable solution-wide analysis should be forced.
            Default value is <c>false</c>.
            </summary>
            <value>
                <c>true</c> if solution-wide analysis should be enabled by force; otherwise, <c>fault</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.NoSolutionWideAnalysis">
            <summary>
            Gets or sets a value indicating whether disable solution-wide analysis should be forced.
            Default value is <c>false</c>
            </summary>
            <value>
                <c>true</c> if solution-wide analysis should be disabled by force; otherwise, <c>fault</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.ProjectFilter">
            <summary>
            Gets or sets a filter to analyze only particular project(s) instead of the whole solution.
            Supports wildcards.
            </summary>
            <value>The filter to analyze only particular projects(s).</value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.MsBuildProperties">
            <summary>
            Gets or sets MSBuild properties.
            </summary>
            <value>The MSBuild properties to override</value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.Extensions">
            <summary>
            Gets or sets a list of Resharper extensions which will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.CachesHome">
            <summary>
            Gets or sets the directory where caches will be stored.
            The default is %TEMP%.
            </summary>
            <value>The directory where caches will be stored.</value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.Debug">
            <summary>
            Gets or sets a value indicating whether the debug output should be enabled.
            </summary>
            <value>
                <c>true</c> if the debug output should be enabled; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.NoBuildinSettings">
            <summary>
            Gets or sets a value indicating whether all global, solution and project settings should be ignored.
            Alias for disabling the settings layers GlobalAll, GlobalPerProduct, SolutionShared, SolutionPersonal, ProjectShared and ProjectPersonal.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.DisabledSettingsLayers">
            <summary>
            Gets or sets a list of <c>InspectCodeSettings</c> which will be disabled.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.Profile">
            <summary>
            Gets or sets the path to the file to use custom settings from.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.InspectCode.InspectCodeSettings.ThrowExceptionOnFindingViolations">
            <summary>
            Gets or sets a value indicating whether to throw an exception on finding violations
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.InspectCode.SettingsLayer">
            <summary>
            Represents Resharper's settings layers.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.GlobalAll">
            <summary>
            SettingsLayer: <c>GlobalAll</c>.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.GlobalPerProduct">
            <summary>
            SettingsLayer: <c>GlobalPerProduct</c>.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.SolutionShared">
            <summary>
            SettingsLayer: <c>SolutionShared</c>. This layer is saved in <c>%SolutionName%.sln.DotSettings</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.SolutionPersonal">
            <summary>
            SettingsLayer: <c>SolutionPersonal</c>. This layer is saved in <c>%SolutionName%.sln.DotSettings.user</c>.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.ProjectShared">
            <summary>
            SettingsLayer: <c>ProjectShared</c>. This layer is saved in <c>%ProjectName%.csproj.DotSettings</c>.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.InspectCode.SettingsLayer.ProjectPersonal">
            <summary>
            SettingsLayer: <c>ProjectPersonal</c>. This layer is saved in <c>%ProjectName%.csproj.DotSettings.user</c>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.DotNetBuildSettingsExtensions">
            <summary>
            Contains functionality related to .NET build settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildSettingsExtensions.WithTarget(Cake.Common.Tools.DotNetBuildSettings,System.String)">
            <summary>
            Adds a .NET build target to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The .NET build target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildSettingsExtensions.WithProperty(Cake.Common.Tools.DotNetBuildSettings,System.String,System.String[])">
            <summary>
            Adds a property to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The property name.</param>
            <param name="values">The property values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildSettingsExtensions.SetConfiguration(Cake.Common.Tools.DotNetBuildSettings,System.String)">
            <summary>
            Sets the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="configuration">The configuration.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildSettingsExtensions.SetVerbosity(Cake.Common.Tools.DotNetBuildSettings,Cake.Core.Diagnostics.Verbosity)">
            <summary>
            Sets the build log verbosity.
            </summary>
            <param name="settings">The settings.</param>
            <param name="verbosity">The build log verbosity.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildAliases">
            <summary>
            Contains functionality related to MSBuild.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliases.MSBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliases.MSBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.MSBuild.MSBuildSettings})">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution to build.</param>
            <param name="configurator">The settings configurator.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildAliases.MSBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.MSBuild.MSBuildSettings)">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution to build.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildRunner">
            <summary>
            The MSBuild runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSBuild.MSBuildRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="runner">The runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.MSBuild.MSBuildSettings)">
            <summary>
            Runs MSBuild with the specified settings.
            </summary>
            <param name="solution">The solution to build.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildRunner.GetAlternativeToolPaths(Cake.Common.Tools.MSBuild.MSBuildSettings)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.MSBuild.MSBuildRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Targets">
            <summary>
            Gets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.PlatformTarget">
            <summary>
            Gets or sets the platform target.
            </summary>
            <value>The platform target.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.MSBuildPlatform">
            <summary>
            Gets or sets the MSBuild platform.
            </summary>
            <value>The MSBuild platform.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.ToolVersion">
            <summary>
            Gets or sets the tool version.
            </summary>
            <value>The tool version.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.MaxCpuCount">
            <summary>
            Gets or sets the maximum CPU count.
            </summary>
            <value>The maximum CPU count.</value>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.NodeReuse">
            <summary>
            Gets or sets whether or not node reuse is used.
            When you’re doing multiple builds in a row, this helps reduce your total build time,
            by avoiding the start up costs of each MSBuild child node.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.MSBuild.MSBuildSettings.Verbosity">
            <summary>
            Gets or sets the amount of information to display in the build log.
            Each logger displays events based on the verbosity level that you set for that logger.
            </summary>
            <value>The build log verbosity.</value>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions">
            <summary>
            Contains functionality related to MSBuild settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.WithTarget(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String)">
            <summary>
            Adds a MSBuild target to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The MSBuild target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.UseToolVersion(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Common.Tools.MSBuild.MSBuildToolVersion)">
            <summary>
            Sets the tool version.
            </summary>
            <param name="settings">The settings.</param>
            <param name="version">The version.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetPlatformTarget(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Common.Tools.MSBuild.PlatformTarget)">
            <summary>
            Sets the platform target.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetMSBuildPlatform(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Common.Tools.MSBuild.MSBuildPlatform)">
            <summary>
            Sets the MSBuild platform.
            </summary>
            <param name="settings">The settings.</param>
            <param name="platform">The platform.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.WithProperty(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String,System.String[])">
            <summary>
            Adds a property to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The property name.</param>
            <param name="values">The property values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetConfiguration(Cake.Common.Tools.MSBuild.MSBuildSettings,System.String)">
            <summary>
            Sets the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="configuration">The configuration.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetMaxCpuCount(Cake.Common.Tools.MSBuild.MSBuildSettings,System.Int32)">
            <summary>
            Sets the maximum CPU count.
            </summary>
            <param name="settings">The settings.</param>
            <param name="maxCpuCount">The maximum CPU count.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetNodeReuse(Cake.Common.Tools.MSBuild.MSBuildSettings,System.Boolean)">
            <summary>
            Sets whether or not node reuse should be enabled.
            </summary>
            <param name="settings">The settings.</param>
            <param name="reuse"><c>true</c> if node reuse should be enabled; otherwise <c>false</c>.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSBuild.MSBuildSettingsExtensions.SetVerbosity(Cake.Common.Tools.MSBuild.MSBuildSettings,Cake.Core.Diagnostics.Verbosity)">
            <summary>
            Sets the build log verbosity.
            </summary>
            <param name="settings">The settings.</param>
            <param name="verbosity">The build log verbosity.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.MSBuild.MSBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildToolVersion">
            <summary>
            Represents a MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.Default">
            <summary>
            The highest available MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET20">
            <summary>
            MSBuild tool version: <c>.NET 2.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET30">
            <summary>
            MSBuild tool version: <c>.NET 3.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2005">
            <summary>
            MSBuild tool version: <c>Visual Studio 2005</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET35">
            <summary>
            MSBuild tool version: <c>.NET 3.5</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2008">
            <summary>
            MSBuild tool version: <c>Visual Studio 2008</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET40">
            <summary>
            MSBuild tool version: <c>.NET 4.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET45">
            <summary>
            MSBuild tool version: <c>.NET 4.5</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2010">
            <summary>
            MSBuild tool version: <c>Visual Studio 2010</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2011">
            <summary>
            MSBuild tool version: <c>Visual Studio 2011</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2012">
            <summary>
            MSBuild tool version: <c>Visual Studio 2012</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET451">
            <summary>
            MSBuild tool version: <c>.NET 4.5.1</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET452">
            <summary>
            MSBuild tool version: <c>.NET 4.5.2</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2013">
            <summary>
            MSBuild tool version: <c>Visual Studio 2013</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.VS2015">
            <summary>
            MSBuild tool version: <c>Visual Studio 2015</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildToolVersion.NET46">
            <summary>
            MSBuild tool version: <c>.NET 4.6</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.MSBuildPlatform">
            <summary>
            Represents an MSBuild exe platform.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildPlatform.Automatic">
            <summary>
            Will build using MSBuild version based on PlatformTarget/Host OS.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildPlatform.x86">
            <summary>
            MSBuildPlatform: <c>x86</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.MSBuildPlatform.x64">
            <summary>
            MSBuildPlatform: <c>x64</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSBuild.PlatformTarget">
            <summary>
            Represents a MSBuild platform target.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.MSIL">
            <summary>
            Platform target: <c>MSIL</c> (Any CPU)
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.x86">
            <summary>
            Platform target: <c>x86</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.x64">
            <summary>
            Platform target: <c>x64</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.ARM">
            <summary>
            Platform target: <c>ARM</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.MSBuild.PlatformTarget.Win32">
            <summary>
            Platform target: <c>Win32</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestAliases">
            <summary>
            Contains functionality related to running MSTest unit tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all MSTest unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs all MSTest unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all MSTest unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyPaths">The assembly paths.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestAliases.MSTest(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs all MSTest unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestRunner">
            <summary>
            The MSTest unit test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSTest.MSTestRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The tool name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestRunner.GetAlternativeToolPaths(Cake.Common.Tools.MSTest.MSTestSettings)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.MSTest.MSTestSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.MSTest.MSTestRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.MSTest.MSTestSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.MSTest.MSTestSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.MSTest.MSTestSettings.NoIsolation">
            <summary>
            Gets or sets a value indicating whether to run tests within the MSTest process.
            This choice improves test run speed but increases risk to the MSTest.exe process.
            Defaults to <c>true</c>.
            </summary>
            <value>
              <c>true</c> if running without isolation; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.MakeNSISRunner">
            <summary>
            The runner which executes NSIS.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NSIS.MakeNSISRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.NSIS.MakeNSISSettings)">
            <summary>
            Runs <c>makensis.exe</c> with the specified script files and settings.
            </summary>
            <param name="scriptFile">The script file (<c>.nsi</c>) to compile.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.MakeNSISRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.MakeNSISSettings">
            <summary>
            Contains settings used by the <see cref="T:Cake.Common.Tools.NSIS.MakeNSISRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.Defines">
            <summary>
            Gets or sets the script compiler defines.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.NoChangeDirectory">
            <summary>
            Gets or sets a value indicating whether to disable current directory change to that of the script file.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NSIS.MakeNSISSettings.NoConfig">
            <summary>
            Gets or sets a value indicating whether to disable inclusion of the <c>nsisconf.nsh</c> file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NSIS.NSISAliases">
            <summary>
            Contains functionality related to running NSIS.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliases.MakeNSIS(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Compiles the given NSIS script using the default settings.
            </summary>
            <param name="context">The context.</param>
            <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
        </member>
        <member name="M:Cake.Common.Tools.NSIS.NSISAliases.MakeNSIS(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NSIS.MakeNSISSettings)">
            <summary>
            Compiles the given NSIS script using the given <paramref name="settings"/>.
            </summary>
            <param name="context">The context.</param>
            <param name="scriptFile">The path to the <c>.nsi</c> script file to compile.</param>
            <param name="settings">The <see cref="T:Cake.Common.Tools.NSIS.MakeNSISSettings"/> to use.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller">
            <summary>
            The NuGet package installer used to install NuGet packages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NuGetTool`1">
            <summary>
            Base class for all NuGet related tools.
            </summary>
            <typeparam name="TSettings">The settings type.</typeparam>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetTool`1.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.NuGetTool`1"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetTool`1.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetTool`1.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetTool`1.GetAlternativeToolPaths(`0)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.InstallFromConfig(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package configuration file and settings.
            </summary>
            <param name="packageConfigPath">Path to package configuration to use for install.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Install.NuGetInstaller.Install(System.String,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package id and settings.
            </summary>
            <param name="packageId">The source package id.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Install.NuGetInstaller"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.OutputDirectory">
            <summary>
            Gets or sets the directory in which packages will be installed.
            If none is specified, the current directory will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Version">
            <summary>
            Gets or sets the version of the package to install.
            If none specified, the latest will be used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.ExcludeVersion">
            <summary>
            Gets or sets a value indicating whether to exclude the version number from the package folder.
            </summary>
            <value>
              <c>true</c> if to exclude the version number from the package folder; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow installation of prerelease packages.
            This flag is not required when restoring packages by installing from packages.config.
            </summary>
            <value>
              <c>true</c> to allow installation of prerelease packages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.RequireConsent">
            <summary>
            Gets or sets a value indicating whether to check if package
            install consent is granted before installing a package.
            </summary>
            <value>
              <c>true</c> if to check if package install consent is granted before installing a package; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.SolutionDirectory">
            <summary>
            Gets or sets the solution directory path for package restore.
            </summary>
            <value>
            The solution directory path.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Source">
            <summary>
            Gets or sets a list of packages sources to use for this command.
            </summary>
            <value>The list of packages sources to use for this command.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.NoCache">
            <summary>
            Gets or sets a value indicating whether or not to use the machine cache as the first package source.
            </summary>
            <value>
              <c>true</c> to not use the machine cache as the first package source; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.DisableParallelProcessing">
            <summary>
            Gets or sets a value indicating whether to disable parallel processing of packages for this command.
            Disable parallel processing of packages for this command.
            </summary>
            <value>
              <c>true</c> to disable parallel processing of packages for this command; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Install.NuGetInstallSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuSpecContent">
            <summary>
            Represents a NuGet nuspec file
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Source">
            <summary>
            Gets or sets the location of the file or files to include.
            The path is relative to the NuSpec file unless an absolute path is specified.
            The wildcard character - <c>*</c> - is allowed.
            Using a double wildcard - <c>**</c> implies a recursive directory search.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Target">
            <summary>
            Gets or sets the relative path to the directory within the package where the source files will be placed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuSpecContent.Exclude">
            <summary>
            Gets or sets the file or files to exclude.
            This is usually combined with a wildcard value in the <c>src</c> attribute.
            The <c>exclude</c> attribute can contain a semi-colon delimited list of files or a file pattern.
            Using a double wildcard - <c>**</c> - implies a recursive exclude pattern.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey">
            <summary>
            The NuGet set API key used to set API key used for API/feed authentication.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey.SetApiKey(System.String,System.String,Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
            <summary>
            Installs NuGet packages using the specified package id and settings.
            </summary>
            <param name="apiKey">The API key.</param>
            <param name="source">The Server URL where the API key is valid.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKey"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy">
            <summary>
            The NuGet set command used to set the proxy settings to be used while connecting to your NuGet feed.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy.SetProxy(System.String,System.String,System.String,Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings)">
            <summary>
            Set the proxy settings to be used while connecting to your NuGet feed.
            </summary>
            <param name="url">The url of the proxy.</param>
            <param name="username">The username used to access the proxy.</param>
            <param name="password">The password used to access the proxy.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxy"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NuGetSources">
            <summary>
            The NuGet sources is used to work with user config feeds &amp; credentials
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Sources.NuGetSources"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.AddSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Adds NuGet package source using the specified settings to global user config
            </summary>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.RemoveSource(System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Remove specified NuGet package source
            </summary>
            <param name="name">Name of the source.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Sources.NuGetSources.HasSource(System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Determines whether the specified NuGet package source exist.
            </summary>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <returns>Whether the specified NuGet package source exist.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Sources.NuGetSources"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.UserName">
            <summary>
            Gets or sets the (optional) user name.
            </summary>
            <value>Optional user name to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.Password">
            <summary>
            Gets or sets the (optional) password.
            </summary>
            <value>Optional password to be used when connecting to an authenticated source.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.Verbosity">
            <summary>
            Gets or sets the output verbosity.
            </summary>
            <value>The output verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings.IsSensitiveSource">
            <summary>
            Gets or sets a value indicating whether this source contains sensitive data, i.e. authentication token in url.
            </summary>
            <value>
            <c>true</c> if this source contains sensitive data; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NuGetAliases">
            <summary>
            Contains functionality for working with NuGet.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPack(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
             <summary>
             Creates a NuGet package using the specified Nuspec or project file.
             </summary>
             <param name="context">The context.</param>
             <param name="filePath">The nuspec or project file path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var nuGetPackSettings   = new NuGetPackSettings {
                                                 Id                      = "TestNuget",
                                                 Version                 = "0.0.0.1",
                                                 Title                   = "The tile of the package",
                                                 Authors                 = new[] {"John Doe"},
                                                 Owners                  = new[] {"Contoso"},
                                                 Description             = "The description of the package",
                                                 Summary                 = "Excellent summary of what the package does",
                                                 ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                 IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                 LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                 Copyright               = "Some company 2015",
                                                 ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                 Tags                    = new [] {"Cake", "Script", "Build"},
                                                 RequireLicenseAcceptance= false,
                                                 Symbols                 = false,
                                                 NoPackageAnalysis       = true,
                                                 Files                   = new [] {
                                                                                      new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                   },
                                                 BasePath                = "./src/TestNuget/bin/release",
                                                 OutputDirectory         = "./nuget"
                                             };
            
                 NuGetPack("./nuspec/TestNuget.nuspec", nuGetPackSettings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPack(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
             <summary>
             Creates NuGet packages using the specified Nuspec or project files.
             </summary>
             <param name="context">The context.</param>
             <param name="filePaths">The nuspec or project file paths.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var nuGetPackSettings   = new NuGetPackSettings {
                                                 Id                      = "TestNuget",
                                                 Version                 = "0.0.0.1",
                                                 Title                   = "The tile of the package",
                                                 Authors                 = new[] {"John Doe"},
                                                 Owners                  = new[] {"Contoso"},
                                                 Description             = "The description of the package",
                                                 Summary                 = "Excellent summary of what the package does",
                                                 ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                 IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                 LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                 Copyright               = "Some company 2015",
                                                 ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                 Tags                    = new [] {"Cake", "Script", "Build"},
                                                 RequireLicenseAcceptance= false,
                                                 Symbols                 = false,
                                                 NoPackageAnalysis       = true,
                                                 Files                   = new [] {
                                                                                      new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                   },
                                                 BasePath                = "./src/TestNuget/bin/release",
                                                 OutputDirectory         = "./nuget"
                                             };
            
                 var nuspecFiles = GetFiles("./**/*.nuspec");
                 NuGetPack(nuspecFiles, nuGetPackSettings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPack(Cake.Core.ICakeContext,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
             <summary>
             Creates a NuGet package using the specified settings.
             </summary>
             <param name="context">The context.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 var nuGetPackSettings   = new NuGetPackSettings {
                                                 Id                      = "TestNuget",
                                                 Version                 = "0.0.0.1",
                                                 Title                   = "The tile of the package",
                                                 Authors                 = new[] {"John Doe"},
                                                 Owners                  = new[] {"Contoso"},
                                                 Description             = "The description of the package",
                                                 Summary                 = "Excellent summary of what the package does",
                                                 ProjectUrl              = new Uri("https://github.com/SomeUser/TestNuget/"),
                                                 IconUrl                 = new Uri("http://cdn.rawgit.com/SomeUser/TestNuget/master/icons/testnuget.png"),
                                                 LicenseUrl              = new Uri("https://github.com/SomeUser/TestNuget/blob/master/LICENSE.md"),
                                                 Copyright               = "Some company 2015",
                                                 ReleaseNotes            = new [] {"Bug fixes", "Issue fixes", "Typos"},
                                                 Tags                    = new [] {"Cake", "Script", "Build"},
                                                 RequireLicenseAcceptance= false,
                                                 Symbols                 = false,
                                                 NoPackageAnalysis       = true,
                                                 Files                   = new [] {
                                                                                      new NuSpecContent {Source = "bin/TestNuget.dll", Target = "bin"},
                                                                                   },
                                                 BasePath                = "./src/TestNuget/bin/release",
                                                 OutputDirectory         = "./nuget"
                                             };
            
                 NuGetPack(nuGetPackSettings);
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Restores NuGet packages for the specified target.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePath">The target to restore.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                // Restore all NuGet packages.
                foreach(var solution in solutions)
                {
                    Information("Restoring {0}", solution);
                    NuGetRestore(solution);
                }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Restores NuGet packages for the specified targets.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePaths">The targets to restore.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                NuGetRestore(solutions);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePath">The target to restore.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                // Restore all NuGet packages.
                foreach(var solution in solutions)
                {
                    Information("Restoring {0}", solution);
                    NuGetRestore(solution, new NuGetRestoreSettings { NoCache = true });
                }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRestore(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFilePaths">The targets to restore.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
                var solutions = GetFiles("./**/*.sln");
                NuGetRestore(solutions, new NuGetRestoreSettings { NoCache = true });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPush(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
             <summary>
             Pushes a NuGet package to a NuGet server and publishes it.
             </summary>
             <param name="context">The context.</param>
             <param name="packageFilePath">The <c>.nupkg</c> file path.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
             // Get the path to the package.
             var package = "./nuget/SlackPRTGCommander.0.0.1.nupkg";
            
             // Push the package.
             NuGetPush(package, new NuGetPushSettings {
                 Source = "http://example.com/nugetfeed",
                 ApiKey = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
             });
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetPush(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
             <summary>
             Pushes NuGet packages to a NuGet server and publishes them.
             </summary>
             <param name="context">The context.</param>
             <param name="packageFilePaths">The <c>.nupkg</c> file paths.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
             // Get the paths to the packages.
             var packages = GetFiles("./**/*.nupkg");
            
             // Push the package.
             NuGetPush(packages, new NuGetPushSettings {
                 Source = "http://example.com/nugetfeed",
                 ApiKey = "4003d786-cc37-4004-bfdf-c4f3e8ef9b3a"
             });
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetAddSource(Cake.Core.ICakeContext,System.String,System.String)">
             <summary>
             Adds NuGet package source using the specified name &amp;source to global user config
             </summary>
             <param name="context">The context.</param>
             <param name="name">Name of the source.</param>
             <param name="source">Path to the package(s) source.</param>
             <example>
             <code>
             var feed = new
                         {
                             Name = EnvironmentVariable("PUBLIC_FEED_NAME"),
                             Source = EnvironmentVariable("PUBLIC_FEED_SOURCE")
                         };
            
             NuGetAddSource(
                 name:feed.Name,
                 source:feed.Source
             );
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetAddSource(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
             <summary>
             Adds NuGet package source using the specified name, source &amp; settings to global user config
             </summary>
             <param name="context">The context.</param>
             <param name="name">Name of the source.</param>
             <param name="source">Path to the package(s) source.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
             var nugetSourceSettings = new NuGetSourcesSettings
                                         {
                                             UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                             Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                             IsSensitiveSource = true,
                                             Verbosity = NuGetVerbosity.Detailed
                                         };
            
             var feed = new
                         {
                             Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                             Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                         };
            
             NuGetAddSource(
                 name:feed.Name,
                 source:feed.Source,
                 settings:nugetSourceSettings
             );
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRemoveSource(Cake.Core.ICakeContext,System.String,System.String)">
             <summary>
             Removes NuGet package source using the specified name &amp; source from global user config
             </summary>
             <param name="context">The context.</param>
             <param name="name">Name of the source.</param>
             <param name="source">Path to the package(s) source.</param>
             <example>
             <code>
             var feed = new
                         {
                             Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                             Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                         };
            
             NuGetRemoveSource(
                name:feed.Name,
                source:feed.Source
             );
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetRemoveSource(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
             <summary>
             Removes NuGet package source using the specified name, source &amp; settings from global user config
             </summary>
             <param name="context">The context.</param>
             <param name="name">Name of the source.</param>
             <param name="source">Path to the package(s) source.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
             var nugetSourceSettings = new NuGetSourcesSettings
                                         {
                                             UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                                             Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                                             IsSensitiveSource = true,
                                             Verbosity = NuGetVerbosity.Detailed
                                         };
            
             var feed = new
                         {
                             Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                             Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
                         };
            
             NuGetRemoveSource(
                name:feed.Name,
                source:feed.Source,
                settings:nugetSourceSettings
             );
             </code>
             </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetHasSource(Cake.Core.ICakeContext,System.String)">
            <summary>
            Checks whether or not a NuGet package source exists in the global user configuration, using the specified source.
            </summary>
            <param name="context">The context.</param>
            <param name="source">Path to the package(s) source.</param>
            <returns>Whether or not the NuGet package source exists in the global user configuration.</returns>
            <example>
              <code>
            var feed = new
            {
                Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
            };
            if (!NuGetHasSource(source:feed.Source))
            {
                Information("Source missing");
            }
            else
            {
                Information("Source already exists");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetHasSource(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NuGet.Sources.NuGetSourcesSettings)">
            <summary>
            Checks whether or not a NuGet package source exists in the global user configuration, using the specified source and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="source">Path to the package(s) source.</param>
            <param name="settings">The settings.</param>
            <returns>Whether the specified NuGet package source exist.</returns>
            <example>
              <code>
            var nugetSourceSettings = new NuGetSourcesSettings
            {
                UserName = EnvironmentVariable("PRIVATE_FEED_USERNAME"),
                Password = EnvironmentVariable("PRIVATE_FEED_PASSWORD"),
                IsSensitiveSource = true,
                Verbosity = NuGetVerbosity.Detailed
            };
            var feed = new
            {
                Name = EnvironmentVariable("PRIVATE_FEED_NAME"),
                Source = EnvironmentVariable("PRIVATE_FEED_SOURCE")
            };
            if (!NuGetHasSource(
                source:feed.Source,
                settings:nugetSourceSettings))
            {
                Information("Source missing");
            }
            else
            {
                Information("Source already exists");
            }
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.String)">
            <summary>
            Installs a NuGet package.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <example>
            <code>
            NuGetInstall("MyNugetPackage");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Installs NuGet packages.
            </summary>
            <param name="context">The context.</param>
            <param name="packageIds">The id's of the package to install.</param>
            <example>
            <code>
            NuGetInstall(new[] { "MyNugetPackage", "OtherNugetPackage" });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs a NuGet package using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageId">The id of the package to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetInstall("MyNugetPackage", new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstall(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageIds">The id's of the package to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetInstall(new[] { "MyNugetPackage", "OtherNugetPackage" }, new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Installs NuGet packages using the specified package configuration.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <example>
            <code>
            NuGetInstallFromConfig("./tools/packages.config");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Installs NuGet packages using the specified package configurations.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPaths">The package configurations to install.</param>
            <example>
            <code>
            var packageConfigs = GetFiles("./**/packages.config");
            
            NuGetInstallFromConfig(packageConfigs);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package configuration and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPath">The package configuration to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetInstallFromConfig("./tools/packages.config", new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetInstallFromConfig(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Install.NuGetInstallSettings)">
            <summary>
            Installs NuGet packages using the specified package configurations and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="packageConfigPaths">The package configurations to install.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var packageConfigs = GetFiles("./**/packages.config");
            
            NuGetInstallFromConfig(packageConfigs, new NuGetInstallSettings {
                ExcludeVersion  = true,
                OutputDirectory = "./tools"
                });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetApiKey(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Tools.NuGet.SetApiKey.NuGetSetApiKeySettings)">
            <summary>
            Installs NuGet packages using the specified API key, source and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="apiKey">The API key.</param>
            <param name="source">Server URL where the API key is valid.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetApiKey(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Installs NuGet packages using the specified API key and source.
            </summary>
            <param name="context">The context.</param>
            <param name="apiKey">The API key.</param>
            <param name="source">Server URL where the API key is valid.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetProxy(Cake.Core.ICakeContext,System.String,System.String,System.String,Cake.Common.Tools.NuGet.SetProxy.NuGetSetProxySettings)">
            <summary>
            Set the proxy settings to be used while connecting to your NuGet feed, including settings.
            </summary>
            <param name="context">The context.</param>
            <param name="proxy">The url of the proxy.</param>
            <param name="username">The username used to access the proxy.</param>
            <param name="password">The password used to access the proxy.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetSetProxy(Cake.Core.ICakeContext,System.String,System.String,System.String)">
            <summary>
            Set the proxy settings to be used while connecting to your NuGet feed.
            </summary>
            <param name="context">The context.</param>
            <param name="proxy">The url of the proxy.</param>
            <param name="username">The username used to access the proxy.</param>
            <param name="password">The password used to access the proxy.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Updates NuGet packages.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFile">The target to update.</param>
            <example>
            <code>
            NuGetUpdate("./tools/packages.config");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Updates NuGet packages.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFiles">The targets to update.</param>
            <example>
            <code>
            var targets = GetFiles("./**/packages.config");
            
            NuGetUpdate(targets);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Updates NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFile">The target to update.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            NuGetUpdate("./tools/packages.config", new NuGetUpdateSettings {
                Prerelease = true,
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.NuGetAliases.NuGetUpdate(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Updates NuGet packages using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="targetFiles">The targets to update.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var targets = GetFiles("./**/packages.config");
            
            NuGetUpdate(targets, new NuGetUpdateSettings {
                Prerelease = true,
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker">
            <summary>
            The NuGet packer.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.Diagnostics.ICakeLog,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="log">The log.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.Pack(Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
            <summary>
            Creates a NuGet package from the specified settings.
            </summary>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Pack.NuGetPacker.Pack(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Pack.NuGetPackSettings)">
            <summary>
            Creates a NuGet package from the specified Nuspec or project file.
            </summary>
            <param name="filePath">The nuspec or project file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Pack.NuGetPacker"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.BasePath">
            <summary>
            Gets or sets the base path.
            </summary>
            <value>The base path.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.NoPackageAnalysis">
            <summary>
            Gets or sets a value indicating whether package analysis should be performed.
            Defaults to <c>true</c>.
            </summary>
            <value>
              <c>true</c> if package analysis should be performed; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Symbols">
            <summary>
            Gets or sets a value indicating whether a symbol package should be created.
            Defaults to <c>false</c>.
            </summary>
            <value>
              <c>true</c> if a symbol package should be created; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Id">
            <summary>
            Gets or sets the package ID.
            </summary>
            <value>The package ID.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Version">
            <summary>
            Gets or sets the Nuspec version.
            </summary>
            <value>The Nuspec version.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Title">
            <summary>
            Gets or sets the package title.
            </summary>
            <value>The package title.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Authors">
            <summary>
            Gets or sets the package authors.
            </summary>
            <value>The package authors.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Owners">
            <summary>
            Gets or sets the package owners.
            </summary>
            <value>The package owners.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Description">
            <summary>
            Gets or sets the package description.
            </summary>
            <value>The package description.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Summary">
            <summary>
            Gets or sets the package summary.
            </summary>
            <value>The package summary.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.ProjectUrl">
            <summary>
            Gets or sets the package project URL.
            </summary>
            <value>The package project URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.IconUrl">
            <summary>
            Gets or sets the package icon URL.
            </summary>
            <value>The package icon URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.LicenseUrl">
            <summary>
            Gets or sets the package license URL.
            </summary>
            <value>The package license URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Copyright">
            <summary>
            Gets or sets the package copyright.
            </summary>
            <value>The package copyright.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.ReleaseNotes">
            <summary>
            Gets or sets the package release notes.
            </summary>
            <value>The package release notes.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Tags">
            <summary>
            Gets or sets the package tags.
            </summary>
            <value>The package tags.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.RequireLicenseAcceptance">
            <summary>
            Gets or sets a value indicating whether users has to accept the package license.
            </summary>
            <value>
            <c>true</c> if users has to accept the package license; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Files">
            <summary>
            Gets or sets the package files.
            </summary>
            <value>The package files.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Verbosity">
            <summary>
            Gets or sets the verbosity.
            </summary>
            <value>The verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Pack.NuGetPackSettings.Properties">
            <summary>
            Gets or sets the properties.
            </summary>
            <value>
            The properties.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NuGetPusher">
            <summary>
            The NuGet package pusher.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPusher"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Push.NuGetPusher.Push(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Push.NuGetPushSettings)">
            <summary>
            Pushes a NuGet package to a NuGet server and publishes it.
            </summary>
            <param name="packageFilePath">The package file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Push.NuGetPushSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Push.NuGetPusher"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Source">
            <summary>
            Gets or sets  the server URL. If not specified, nuget.org is used unless
            DefaultPushSource config value is set in the NuGet config file.
            Starting with NuGet 2.5, if NuGet.exe identifies a UNC/folder source,
            it will perform the file copy to the source.
            </summary>
            <value>The server URL.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.ApiKey">
            <summary>
            Gets or sets the API key for the server.
            </summary>
            <value>The API key for the server.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Timeout">
            <summary>
            Gets or sets the timeout for pushing to a server.
            Defaults to 300 seconds (5 minutes).
            </summary>
            <value>The timeout for pushing to a server.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.Verbosity">
            <summary>
            Gets or sets the verbosity.
            </summary>
            <value>The verbosity.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Push.NuGetPushSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            </summary>
            <value>The NuGet configuration file.</value>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer">
            <summary>
            The NuGet package restorer used to restore solution packages.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The NuGet tool resolver</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Restore.NuGetRestorer.Restore(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings)">
            <summary>
            Restores NuGet packages using the specified settings.
            </summary>
            <param name="targetFilePath">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Restore.NuGetRestorer"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.RequireConsent">
            <summary>
            Gets or sets a value indicating whether package restore consent is granted before installing a package.
            </summary>
            <value>
              <c>true</c> if package restore consent is granted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.PackagesDirectory">
            <summary>
            Gets or sets the packages folder.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.Source">
            <summary>
            Gets or sets a list of packages sources to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.NoCache">
            <summary>
            Gets or sets a value indicating whether or not to use the machine cache as the first package source.
            </summary>
            <value>
              <c>true</c> to not use the machine cache as the first package source; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.DisableParallelProcessing">
            <summary>
            Gets or sets a value indicating whether or not to disable parallel processing of packages for this command.
            </summary>
            <value>
            <c>true</c> to disable parallel processing; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.Verbosity">
            <summary>
            Gets or sets the amount of output details.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Restore.NuGetRestoreSettings.ConfigFile">
            <summary>
            Gets or sets the NuGet configuration file.
            If not specified, the file <c>%AppData%\NuGet\NuGet.config</c> is used as the configuration file.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.NuGetVerbosity">
            <summary>
            Represents NuGet verbosity.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Normal">
            <summary>
            Verbosity: <c>Normal</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Quiet">
            <summary>
            Verbosity: <c>Quiet</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NuGet.NuGetVerbosity.Detailed">
            <summary>
            Verbosity: <c>Detailed</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater">
            <summary>
            The NuGet package updater.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.NuGet.INuGetToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="resolver">The nuget tool resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.NuGet.Update.NuGetUpdater.Update(Cake.Core.IO.FilePath,Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings)">
            <summary>
            Updates NuGet packages using the specified settings.
            </summary>
            <param name="targetFile">The target file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NuGet.Update.NuGetUpdater"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Id">
            <summary>
            Gets or sets the package ids to update.
            </summary>
            <value>The package ids to update.</value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Source">
            <summary>
            Gets or sets a list of package sources to use for this command.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Safe">
            <summary>
            Gets or sets a value indicating whether to look for updates with the highest
            version available within the same major and minor version as the installed package.
            </summary>
            <value>
              <c>true</c> if safe; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Prerelease">
            <summary>
            Gets or sets a value indicating whether to allow updating to prerelease versions.
            This flag is not required when updating prerelease packages that are already installed.
            </summary>
            <value>
              <c>true</c> to allow updating to prerelease versions; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NuGet.Update.NuGetUpdateSettings.Verbosity">
            <summary>
            Gets or sets the amount of output details.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3Aliases">
            <summary>
            Contains functionality related to running NUnit v2 and v3 unit tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NUnit.NUnit3Settings)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NUnit.NUnit3Settings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Aliases.NUnit3(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnit3Settings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3AppDomainUsage">
            <summary>
            The /domain option controls of the creation of AppDomains for running tests.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3AppDomainUsage.Default">
            <summary>
            Create a separate AppDomain for each assembly if more than one is listed on the command
            line, otherwise creates a single AppDomain.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3AppDomainUsage.None">
            <summary>
            No AppDomain is created - the tests are run in the primary domain.
            This normally requires copying the NUnit assemblies into the same directory as your tests.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3AppDomainUsage.Single">
            <summary>
            A single test AppDomain is created for all test assemblies
            This is how NUnit worked prior to version 2.4.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3AppDomainUsage.Multiple">
            <summary>
            An AppDomain is created for each assembly specified on the command line.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3Labels">
            <summary>
            Represents the possible values for the Labels option.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3Labels.Off">
            <summary>
            Does not output labels. This is the default.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3Labels.On">
            <summary>
            Outputs labels for tests that are run.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3Labels.All">
            <summary>
            Outputs labels for all tests.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3ProcessOption">
            <summary>
            Represents the various ways NUnit loads tests in processes.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3ProcessOption.Multiple">
            <summary>
            A separate process is created for each test assembly. This is the default.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3ProcessOption.Separate">
            <summary>
            One separate process is created to run all of the test assemblies.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnit3ProcessOption.InProcess">
            <summary>
            All the tests are run in the nunit-console process.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3Runner">
            <summary>
            The NUnit unit test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Runner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnit3Runner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Runner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnit3Settings)">
            <summary>
            Runs the tests in the specified assemblies, using the specified settings.
            </summary>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Runner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Runner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnit3Settings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.NUnit.NUnit3Runner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnit3Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnit3Settings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Test">
            <summary>
            Gets or sets the list of tests to run or explore.
            </summary>
            <value>
            A comma-separated list of test names.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.TestList">
            <summary>
            Gets or sets a file containing the tests to run.
            </summary>
            <value>
            File path containing a list of tests to run, one per line.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Where">
            <summary>
            Gets or sets the test selection expression indicating what tests will be run.
            </summary>
            <value>
            The --where option is intended to extend or replace the earlier
            --test, --include and --exclude options by use of a selection expression
            describing exactly which tests to use. Examples of usage are:
               --where:cat==Data
               --where "method =~ /DataTest*/ &amp;&amp; cat = Slow"
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Timeout">
            <summary>
            Gets or sets the default timeout to be used for test cases in this run.
            If any test exceeds the timeout value, it is cancelled and reported as an error.
            </summary>
            <value>
            The timeout in milliseconds.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Seed">
            <summary>
            Gets or sets the random seed used to generate test cases.
            </summary>
            <value>
            The random seed.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Workers">
            <summary>
            Gets or sets the number of worker threads to be used
            in running tests.If not specified, defaults to
            2 or the number of processors, whichever is greater.
            </summary>
            <value>
            The number of worker threads.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.StopOnError">
            <summary>
            Gets or sets a value indicating whether execution of the test run should terminate
            immediately on the first test failure or error.
            </summary>
            <value>
            <c>true</c> if execution of the test run should terminate immediately on the first test failure or error;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Work">
            <summary>
            Gets or sets the directory to use for output files. If
            not specified, defaults to the current directory.
            </summary>
            <value>
            PATH of the directory.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.OutputFile">
            <summary>
            Gets or sets the location that NUnit should write test output.
            </summary>
            <value>The location that NUnit should write test output.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.ErrorOutputFile">
            <summary>
            Gets or sets the location that NUnit should write test error output.
            </summary>
            <value>The location that NUnit should write test error output.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Full">
            <summary>
            Gets or sets a value indicating whether to print full report of all test results.
            </summary>
            <value>
            <c>true</c> if a full report of test results should be printed;
            otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Results">
            <summary>
            Gets or sets the name of the XML result file.
            </summary>
            <value>
            The name of the XML result file. Defaults to <c>TestResult.xml</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.ResultFormat">
            <summary>
            Gets or sets the format that the results should be in. Results must be set to
            have any effect. Specify nunit2 to output the results in NUnit 2 xml format.
            nunit3 may be specified for NUnit 3 format, however this is the default. Additional
            formats may be supported in the future, check the NUnit documentation.
            </summary>
            <value>
            The format of the result file. Defaults to <c>nunit3</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.ResultTransform">
            <summary>
            Gets or sets the file name of an XSL transform that will be applied to the results.
            </summary>
            <value>
            The name of an XSLT file that will be applied to the results.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.NoResults">
            <summary>
            Gets or sets a value indicating whether to generate the XML result file.
            </summary>
            <value>
            <c>true</c> if the XML result file should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Labels">
            <summary>
            Gets or sets a value specifying whether to write test case names to the output.
            </summary>
            <value>
            <c>On</c> to write labels for tests that are run or <c>All</c> to write labels
            for all tests.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.TeamCity">
            <summary>
            Gets or sets a value indicating whether to turn on TeamCity service messages.
            </summary>
            <value>
            <c>true</c> to turn on TeamCity service messages; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.NoHeader">
            <summary>
            Gets or sets a value indicating whether to show copyright information at the start of the program.
            </summary>
            <value>
            <c>true</c> if to show copyright information at the start of the program; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.NoColor">
            <summary>
            Gets or sets a value indicating whether to show the output in color.
            </summary>
            <value>
            <c>true</c> disable color output; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Verbose">
            <summary>
            Gets or sets a value indicating whether to show additional information as the tests run.
            </summary>
            <value>
            <c>true</c> shows additional information as the tests run; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Configuration">
            <summary>
            Gets or sets the name of a project configuration to load (e.g.:Debug).
            This selects the configuration within the NUnit project file.
            </summary>
            <value>
            The name of the configuration to load.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.X86">
            <summary>
            Gets or sets a value indicating whether to run tests in an x86 process on 64 bit systems.
            </summary>
            <value>
            <c>true</c> to run tests in an x86 process on 64 bit systems; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.DisposeRunners">
            <summary>
            Gets or sets a value indicating whether to Dispose each test runner after it has finished
            running its tests.
            </summary>
            <value>
            <c>true</c> to Dispose each test runner after it has finished
            running its tests; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether to shadow copy tests.
            Default value is <c>false</c>.
            </summary>
            <value>
            <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Framework">
            <summary>
            Gets or sets the version of the runtime to be used when executing tests.
            </summary>
            <value>
            The version of the runtime to be used when executing tests.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Process">
            <summary>
            Gets or sets a value indicating how NUnit should load tests in processes.
            The Default value is <see cref="F:Cake.Common.Tools.NUnit.NUnit3ProcessOption.Multiple"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.AppDomainUsage">
            <summary>
            Gets or sets a value to control creation of AppDomains for running tests.
            Corresponds to the /domain command line switch.
            The default is to use multiple domains if multiple assemblies are listed on the command line,
            otherwise a single domain is used.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnit3Settings.Agents">
            <summary>
            Gets or sets the maximum number of test assembly agents to run at one
            time. If not specified, there is no limit.
            </summary>
            <value>
            The maximum number of test assembly agents to run at one time.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitAliases">
            <summary>
            Contains functionality related to running NUnit unit tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the assemblies matching the specified pattern,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all NUnit unit tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitAliases.NUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs all NUnit unit tests in the specified assemblies,
            using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitAppDomainUsage">
            <summary>
                The /domain option controls of the creation of AppDomains for running tests.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitAppDomainUsage.Default">
            <summary>
                Create a separate AppDomain for each assembly listed on the command line.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitAppDomainUsage.None">
            <summary>
                No domain is created - the tests are run in the primary domain.
                This normally requires copying the NUnit assemblies into the same directory as your tests.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitAppDomainUsage.Single">
            <summary>
                A test domain is created - this is how NUnit worked prior to version 2.4
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitProcessOption">
            <summary>
                Represents the various ways NUnit loads tests in processes.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitProcessOption.Single">
            <summary>
                All the tests are run in the nunit-console process. This is the default.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitProcessOption.Separate">
            <summary>
                A separate process is created to run the tests.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.NUnit.NUnitProcessOption.Multiple">
            <summary>
                A separate process is created for each test assembly.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitRunner">
            <summary>
            The NUnit unit test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnitRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.NUnit.NUnitSettings)">
            <summary>
            Runs the tests in the specified assemblies, using the specified settings.
            </summary>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.NUnit.NUnitSettings">
            <summary>
                Contains settings used by <see cref="T:Cake.Common.Tools.NUnit.NUnitRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.NUnit.NUnitSettings.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:Cake.Common.Tools.NUnit.NUnitSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ResultsFile">
            <summary>
                Gets or sets the name of the XML result file.
            </summary>
            <value>
                The name of the XML result file. Defaults to <c>TestResult.xml</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoResults">
            <summary>
                Gets or sets a value indicating whether to generate the XML result file.
            </summary>
            <value>
                <c>true</c> if the XML result file should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Framework">
            <summary>
                Gets or sets the version of the runtime to be used when executing tests.
            </summary>
            <value>
                The version of the runtime to be used when executing tests.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Include">
            <summary>
                Gets or sets the categories to include in a run.
            </summary>
            <value>The categories to include in a run.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Exclude">
            <summary>
                Gets or sets the categories to exclude from a run.
            </summary>
            <value>
                The categories to exclude from a run.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Timeout">
            <summary>
                Gets or sets the default timeout to be used for test cases in this run.
                If any test exceeds the timeout value, it is cancelled and reported as an error.
            </summary>
            <value>The default timeout to be used for test cases in this run.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ShadowCopy">
            <summary>
                Gets or sets a value indicating whether tests should be run as a shadow copy.
                Default value is <c>true</c>.
            </summary>
            <value>
                <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoThread">
            <summary>
                Gets or sets a value indicating whether the main thread should be used for running tests.
            </summary>
            <value>
                <c>true</c> if the main thread should be used for running tests; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.NoLogo">
            <summary>
                Gets or sets a value indicating whether to show copyright information at the start of the program.
            </summary>
            <value>
                <c>true</c> if to show copyright information at the start of the program; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.StopOnError">
            <summary>
                Gets or sets a value indicating whether execution of the test run should terminate
                immediately on the first test failure or error.
            </summary>
            <value>
                <c>true</c> if execution of the test run should terminate immediately on the first test failure or error;
                otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Trace">
            <summary>
                Gets or sets the amount of information that NUnit should write to its internal trace log.
            </summary>
            <value>The amount of information that NUnit should write to its internal trace log.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.OutputFile">
            <summary>
                Gets or sets the location that NUnit should write test output.
            </summary>
            <value>The location that NUnit should write test output.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.ErrorOutputFile">
            <summary>
                Gets or sets the location that NUnit should write test error output.
            </summary>
            <value>The location that NUnit should write test error output.</value>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.Process">
            <summary>
                Gets or sets a value indicating how NUnit should load tests in processes.
                The Default value is <see cref="F:Cake.Common.Tools.NUnit.NUnitProcessOption.Single"/>
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.UseSingleThreadedApartment">
            <summary>
                Gets or sets a value indicating whether Single Threaded Apartment state (STA) will be used.
                Corresponds to the /apartment command line option
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.NUnit.NUnitSettings.AppDomainUsage">
            <summary>
                Gets or sets a value to control creation of AppDomains for running tests.
                Corresponds to the /domain command line switch.
                The default is to use multiple domains if multiple assemblies are listed on the command line.
                Otherwise a single domain is used.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliases">
            <summary>
            Contains functionality for working with Octopus Deploy.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployAliases.OctoCreateRelease(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
             <summary>
             Creates a release for the specified Octopus Deploy Project.
             </summary>
             <param name="context">The cake context.</param>
             <param name="projectName">The name of the project.</param>
             <param name="settings">The settings.</param>
             <example>
             <code>
                 // Minimum required
                 OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                     Server = "http://octopus-deploy.example",
                     ApiKey = "API-XXXXXXXXXXXXXXXXXXXX"
                 });
            
                 OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                     Server = "http://octopus-deploy.example",
                     Username = "DeployUser",
                     Password = "a-very-secure-password"
                 });
            
                 OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                     ConfigurationFile = "C:\OctopusDeploy.config"
                 });
            
                 // Additional Options
                 OctoCreateRelease(projectNameOnServer, new CreateReleaseSettings {
                     ToolPath = "./tools/OctopusTools/Octo.exe"
                     EnableDebugLogging = true,
                     IgnoreSslErrors = true,
                     EnableServiceMessages = true, // Enables teamcity services messages when logging
                     ReleaseNumber = "1.8.2",
                     DefaultPackageVersion = "1.0.0.0", // All packages in the release should be 1.0.0.0
                     Packages = new Dictionary&lt;string, string&gt;
                                 {
                                     { "PackageOne", "1.0.2.3" },
                                     { "PackageTwo", "5.2.3" }
                                 },
                     PackagesFolder = "C:\MyOtherNugetFeed",
            
                     // One or the other
                     ReleaseNotes = "Version 2.0 \n What a milestone we have ...",
                     ReleaseNotesFile = "./ReleaseNotes.md",
            
                     IgnoreExisting = true // if this release number already exists, ignore it
                 });
             </code>
             </example>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings">
            <summary>
            Contains settings used by <see cref="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.CreateRelease(System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)"/>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings">
            <summary>
            Contains the common settings used by all commands in <see cref="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Username">
            <summary>
            Gets or sets the username to use when authenticating with the server
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Password">
            <summary>
            Gets or sets the password to use when authenticating with the server
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.Server">
            <summary>
            Gets or sets the octopus server url.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.ApiKey">
            <summary>
            Gets or sets the user's API key.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.ConfigurationFile">
            <summary>
            Gets or sets the text file of default values
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.EnableDebugLogging">
            <summary>
            Gets or sets a value indicating whether the enable debug logging flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.IgnoreSslErrors">
            <summary>
            Gets or sets a value indicating whether the ignore SSL errors flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.OctopusDeploySettings.EnableServiceMessages">
            <summary>
            Gets or sets a value indicating whether the enable service messages flag is set
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNumber">
            <summary>
            Gets or sets the release number to use for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.DefaultPackageVersion">
            <summary>
            Gets or sets the default version number of all packages to use the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.Packages">
            <summary>
            Gets or sets the version number to use for a package in the release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.PackagesFolder">
            <summary>
            Gets or sets the folder containing NuGet packages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNotes">
            <summary>
            Gets or sets the release notes for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.ReleaseNotesFile">
            <summary>
            Gets or sets the path to a file that contains Release Notes for the new release.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings.IgnoreExisting">
            <summary>
            Gets or sets a value indicating whether the Ignore Existing flag.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator">
            <summary>
            The Octopus Deploy release creator runner
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.CreateRelease(System.String,Cake.Common.Tools.OctopusDeploy.CreateReleaseSettings)">
            <summary>
            Creates a release for the specified project in OctopusDeploy
            </summary>
            <param name="projectName">The target project name</param>
            <param name="settings">The settings</param>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.OctopusDeploy.OctopusDeployReleaseCreator.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.OpenCover.OpenCoverAliases">
            <summary>
            Contains functionality related to OpenCover.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverAliases.OpenCover(Cake.Core.ICakeContext,System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.OpenCover.OpenCoverSettings)">
            <summary>
            Runs <see href="https://github.com/OpenCover/opencover">OpenCover</see>
            for the specified action and settings.
            </summary>
            <param name="context">The context.</param>
            <param name="action">The action to run OpenCover for.</param>
            <param name="outputFile">The OpenCover output file.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            OpenCover(tool => {
              tool.XUnit2("./**/App.Tests.dll",
                new XUnit2Settings {
                  ShadowCopy = false
                });
              },
              new FilePath("./result.xml"),
              new OpenCoverSettings()
                .WithFilter("+[App]*")
                .WithFilter("-[App.Tests]*"));
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.OpenCover.OpenCoverRunner">
            <summary>
            The OpenCover runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverRunner.Run(Cake.Core.ICakeContext,System.Action{Cake.Core.ICakeContext},Cake.Core.IO.FilePath,Cake.Common.Tools.OpenCover.OpenCoverSettings)">
            <summary>
            Runs OpenCover with the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="action">The action.</param>
            <param name="outputPath">The output file path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.OpenCover.OpenCoverSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.OpenCover.OpenCoverSettings.Filters">
            <summary>
            Gets the filters.
            This represents the <c>-filter</c> option.
            </summary>
            <value>The filters.</value>
        </member>
        <member name="P:Cake.Common.Tools.OpenCover.OpenCoverSettings.ExcludedAttributeFilters">
            <summary>
            Gets attribute filters used to exclude classes or methods.
            This represents the <c>-excludebyattribute</c> option.
            </summary>
            <value>The excluded attributes.</value>
        </member>
        <member name="P:Cake.Common.Tools.OpenCover.OpenCoverSettings.ExcludedFileFilters">
            <summary>
            Gets file filters used to excluded classes or methods.
            This represents the <c>-excludebyfile</c> option.
            </summary>
            <value>The excluded file filters.</value>
        </member>
        <member name="T:Cake.Common.Tools.OpenCover.OpenCoverSettingsExtensions">
            <summary>
            Contains extensions for <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverSettings"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverSettingsExtensions.WithFilter(Cake.Common.Tools.OpenCover.OpenCoverSettings,System.String)">
            <summary>
            Adds the filter.
            </summary>
            <param name="settings">The settings.</param>
            <param name="filter">The filter.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverSettingsExtensions.ExcludeByAttribute(Cake.Common.Tools.OpenCover.OpenCoverSettings,System.String)">
            <summary>
            Exclude a class or method by filter
            that match attributes that have been applied.
            </summary>
            <param name="settings">The settings.</param>
            <param name="filter">The filter.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.OpenCover.OpenCoverSettingsExtensions.ExcludeByFile(Cake.Common.Tools.OpenCover.OpenCoverSettings,System.String)">
            <summary>
            Exclude a class (or methods) by filter that match the filenames.
            </summary>
            <param name="settings">The settings.</param>
            <param name="filter">The filter.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.OpenCover.OpenCoverSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ReportUnit.ReportUnitAliases">
            <summary>
            Contains functionality related to ReportUnit.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliases.ReportUnit(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the reports in the specified directory into human readable form.
            </summary>
            <param name="context">The context.</param>
            <param name="inputFolder">The input folder.</param>
            <example>
            <para>Provide only an input folder, which will causes ReportUnit to search entire directory for report files.</para>
            <para>Cake task:</para>
            <code>
            ReportUnit("c:/temp");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliases.ReportUnit(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
            <summary>
            Converts the reports in the specified directory into human readable form.
            </summary>
            <param name="context">The context.</param>
            <param name="inputFolder">The input folder.</param>
            <param name="settings">The ReportUnit settings.</param>
            <example>
            <para>Provide an input folder and custom ToolPath, which will causes ReportUnit to search entire directory for report files.</para>
            <para>Cake task:</para>
            <code>
            ReportUnit("c:/temp", new ReportUnitSettings(){
                ToolPath = "c:/tools/reportunit.exe"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliases.ReportUnit(Cake.Core.ICakeContext,Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
            <summary>
            Converts the reports in the specified directory into human readable form and outputs to specified folder.
            </summary>
            <param name="context">The context.</param>
            <param name="inputFolder">The input folder.</param>
            <param name="outputFolder">The output folder.</param>
            <param name="settings">The ReportUnit settings.</param>
            <example>
            <para>Provide both input and output folder, which will causes ReportUnit to search entire directory for report files, and output the results to specified location.</para>
            <para>Cake task:</para>
            <code>
            ReportUnit("c:/temp/input", "c:/temp/output");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliases.ReportUnit(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Converts the single specified report into human readable form and outputs to specified file.
            </summary>
            <param name="context">The context.</param>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <example>
            <para>Provide both input and output file, which will causes ReportUnit to transform only the specific file, and output to the specified location.</para>
            <para>Cake task:</para>
            <code>
            ReportUnit("c:/temp/input", "c:/temp/output");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitAliases.ReportUnit(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
            <summary>
            Converts the single specified report into human readable form and outputs to specified file.
            </summary>
            <param name="context">The context.</param>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="settings">The ReportUnit settings.</param>
            <example>
            <para>Provide both input and output file, which will causes ReportUnit to transform only the specific file, and output to the specified location.  Also use a custom path for the reportunit.exe.</para>
            <para>Cake task:</para>
            <code>
            ReportUnit("c:/temp/input", "c:/temp/output", new ReportUnitSettings(){
                ToolPath = "c:/tools/reportunit.exe"
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.ReportUnit.ReportUnitRunner">
            <summary>
            ReportUnit runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ReportUnit.ReportUnitRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitRunner.Run(Cake.Core.IO.DirectoryPath,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
            <summary>
            Converts the reports from specified folder into human readable form according to the specified settings.
            </summary>
            <param name="inputFolder">The input folder.</param>
            <param name="outputFolder">The output folder.</param>
            <param name="settings">The ReportUnit settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitRunner.Run(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Tools.ReportUnit.ReportUnitSettings)">
            <summary>
            Converts the specified report into human readable form according to the specified settings.
            </summary>
            <param name="inputFile">The input file.</param>
            <param name="outputFile">The output file.</param>
            <param name="settings">The ReportUnit settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.ReportUnit.ReportUnitRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ReportUnit.ReportUnitSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.ReportUnit.ReportUnitRunner"/>.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases">
            <summary>
            Contains functionality related to <see href="https://github.com/danielpalme/ReportGenerator">ReportGenerator</see>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the coverage report specified by the glob pattern into human readable form.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern.</param>
            <param name="targetDir">The output directory.</param>
            <example>
            <code>
            ReportGenerator("c:/temp/coverage/*.xml", "c:/temp/output");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,System.String,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
            <summary>
            Converts the coverage report specified by the glob pattern into human readable form using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The glob pattern.</param>
            <param name="targetDir">The output directory.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ReportGenerator("c:/temp/coverage/*.xml", "c:/temp/output", new ReportGeneratorSettings(){
                ToolPath = "c:/tools/reportgenerator.exe"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the specified coverage report into human readable form.
            </summary>
            <param name="context">The context.</param>
            <param name="report">The coverage report.</param>
            <param name="targetDir">The output directory.</param>
            <example>
            <code>
            ReportGenerator("c:/temp/coverage/report.xml", "c:/temp/output");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
            <summary>
            Converts the specified coverage report into human readable form using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="report">The coverage report.</param>
            <param name="targetDir">The output directory.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            ReportGenerator("c:/temp/coverage.xml", "c:/temp/output", new ReportGeneratorSettings(){
                ToolPath = "c:/tools/reportgenerator.exe"
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath)">
            <summary>
            Converts the specified coverage reports into human readable form.
            </summary>
            <param name="context">The context.</param>
            <param name="reports">The coverage reports.</param>
            <param name="targetDir">The output directory.</param>
            <example>
            <code>
            ReportGenerator(new[] { "c:/temp/coverage1.xml", "c:/temp/coverage2.xml" }, "c:/temp/output");
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorAliases.ReportGenerator(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
            <summary>
            Converts the specified coverage reports into human readable form using the specified settings.
            </summary>
            <param name="context">The context.</param>
            <param name="reports">The coverage reports.</param>
            <param name="targetDir">The output directory.</param>
            <param name="settings">The settings.</param>>
            <example>
            <code>
            ReportGenerator(new[] { "c:/temp/coverage1.xml", "c:/temp/coverage2.xml" }, "c:/temp/output", new ReportGeneratorSettings(){
                ToolPath = "c:/tools/reportgenerator.exe"
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner">
            <summary>
            ReportGenerator runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Core.IO.DirectoryPath,Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings)">
            <summary>
            Converts the specified coverage reports into human readable form according to the specified settings.
            </summary>
            <param name="reports">The coverage reports.</param>
            <param name="targetDir">The output directory.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.ReportTypes">
            <summary>
            Gets or sets the list of coverage reports that should be parsed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.SourceDirectories">
            <summary>
            Gets or sets the directories which contain the corresponding source code.
            The source files are used if coverage report contains classes without path information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.HistoryDirectory">
            <summary>
            Gets or sets the directory for storing persistent coverage information.
            Can be used in future reports to show coverage evolution.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.AssemblyFilters">
            <summary>
            Gets or sets the list of assemblies that should be included or excluded in the report.
            Exclusion filters take precedence over inclusion filters.
            Wildcards are allowed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.ClassFilters">
            <summary>
            Gets or sets the list of classes that should be included or excluded in the report.
            Exclusion filters take precedence over inclusion filters.
            Wildcards are allowed.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ReportGenerator.ReportGeneratorSettings.Verbosity">
            <summary>
            Gets or sets the verbosity level of the log messages.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType">
            <summary>
            Represents ReportGenerator's output formats
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.Badges">
            <summary>
            Badge report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.Html">
            <summary>
            Html report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.HtmlSummary">
            <summary>
            Html summary report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.Latex">
            <summary>
            Latex report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.LatexSummary">
            <summary>
            Latex summary report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.TextSummary">
            <summary>
            Text summary report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.Xml">
            <summary>
            Xml report.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorReportType.XmlSummary">
            <summary>
            Xml summary report.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.ReportGenerator.ReportGeneratorVerbosity">
            <summary>
            Represents ReportGenerator's logging verbosity.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorVerbosity.Verbose">
            <summary>
            Verbosity: Verbose.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorVerbosity.Info">
            <summary>
            Verbosity: Info.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.ReportGenerator.ReportGeneratorVerbosity.Error">
            <summary>
            Verbosity: Error.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Roundhouse.RecoveryMode">
            <summary>
            Defines the recovery model for SQL Server
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.Roundhouse.RecoveryMode.NoChange">
            <summary>
            Doesn't change the mode
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.Roundhouse.RecoveryMode.Simple">
            <summary>
            Does not create backup before migration
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.Roundhouse.RecoveryMode.Full">
            <summary>
            Creates log backup before migration
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.Roundhouse.RoundhouseAliases">
            <summary>
            Contains functionality to execute Roundhouse tasks.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseAliases.RoundhouseMigrate(Cake.Core.ICakeContext,Cake.Common.Tools.Roundhouse.RoundhouseSettings)">
            <summary>
            Executes Roundhouse with the given configured settings.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseAliases.RoundhouseDrop(Cake.Core.ICakeContext,Cake.Common.Tools.Roundhouse.RoundhouseSettings)">
            <summary>
            Executes Roundhouse migration to drop the database using the provided settings.
            </summary>
            <param name="context">The context.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.Roundhouse.RoundhouseRunner">
            <summary>
            The Roundhouse console application runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.Roundhouse.RoundhouseRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseRunner.Run(Cake.Common.Tools.Roundhouse.RoundhouseSettings,System.Boolean)">
            <summary>
            Runs Roundhouse with the given settings.
            </summary>
            <param name="settings">The settings.</param>
            <param name="drop">Will drop/delete the database if set to <c>true</c>.</param>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.Roundhouse.RoundhouseRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.Roundhouse.RoundhouseSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.Roundhouse.RoundhouseRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.ServerName">
            <summary>
            Gets or sets the server name.
            </summary>
            <value>
            The server on which create/migrate should happen.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.DatabaseName">
            <summary>
            Gets or sets the database name.
            </summary>
            <value>
            The database you want to create/migrate.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.ConnectionString">
            <summary>
            Gets or sets the connection string.
            </summary>
            <value>
            As an alternative to ServerName and Database - You can provide an entire connection string instead.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.ConnectionStringAdmin">
            <summary>
            Gets or sets the connection string for admin connections.
            </summary>
            <value>
            This is used for connecting to master when you may have a different uid and password than normal.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.CommandTimeout">
            <summary>
            Gets or sets the timeout (in seconds) for normal connections.
            </summary>
            <value>
            This is the timeout when commands are run. This is not for admin commands or restore.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.CommandTimeoutAdmin">
            <summary>
            Gets or sets the timeout (in seconds) for admin connections.
            </summary>
            <value>
            This is the timeout when administration commands are run (except for restore, which has its own).
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.SqlFilesDirectory">
            <summary>
            Gets or sets the sql files directory.
            </summary>
            <value>
            The directory where your SQL scripts are.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RepositoryPath">
            <summary>
            Gets or sets the location of the source code repository
            </summary>
            <value>
            Path to code repository to be able to correlate versions
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.VersionFile">
            <summary>
            Gets or sets the version file.
            </summary>
            <value>
            Path to the file to use for applying version number. Either a .XML file, a .DLL or a .TXT file that a version can be resolved from.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.VersionXPath">
            <summary>
            Gets or sets the XPath to locate version in the <see cref="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.VersionFile"/>.
            </summary>
            <value>
            Works in conjunction with an XML version file.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.AlterDatabaseFolderName">
            <summary>
            Gets or sets the folder name for 'alterDatabase' scripts.
            </summary>
            <value>
            The name of the folder where you keep your alter database scripts. Read up on token replacement. You will want to use {{DatabaseName}} here instead of specifying a database name.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RunAfterCreateDatabaseFolderName">
            <summary>
            Gets or sets the folder name for 'runAfterCreateDatabase' scripts.
            </summary>
            <value>
            The name of the folder where you will keep scripts that ONLY run after a database is created.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RunBeforeUpFolderName">
            <summary>
            Gets or sets the folder name for 'runBeforeUp' scripts.
            </summary>
            <value>
            The name of the folder where you keep scripts that you want to run before your update scripts.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.UpFolderName">
            <summary>
            Gets or sets the folder name for 'up' scripts.
            </summary>
            <value>
            The name of the folder where you keep your update scripts.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RunFirstAfterUpFolderName">
            <summary>
            Gets or sets the folder name for 'runFirstAfterUp' scripts.
            </summary>
            <value>
            The name of the folder where you keep any functions, views, or sprocs that are order dependent. If you have a function that depends on a view, you definitely need the view in this folder.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.FunctionsFolderName">
            <summary>
            Gets or sets the folder name for 'functions' scripts.
            </summary>
            <value>
            The name of the folder where you keep your functions.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.ViewsFolderName">
            <summary>
            Gets or sets the folder name for 'views' scripts.
            </summary>
            <value>
            The name of the folder where you keep your views.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.SprocsFolderName">
            <summary>
            Gets or sets the folder name for 'sprocs' scripts.
            </summary>
            <value>
            The name of the folder where you keep your stored procedures.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.IndexesFolderName">
            <summary>
            Gets or sets the folder name for 'indexes' scripts.
            </summary>
            <value>
            The name of the folder where you keep your indexes.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RunAfterOtherAnyTimeScriptsFolderName">
            <summary>
            Gets or sets the folder name for 'runAfterOtherAnyTimeScripts' scripts.
            </summary>
            <value>
            The name of the folder where you keep scripts that will be run after all of the other any time scripts complete.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.PermissionsFolderName">
            <summary>
            Gets or sets the folder name for 'permissions' scripts.
            </summary>
            <value>
            The name of the folder where you keep your permissions scripts.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.BeforeMigrationFolderName">
            <summary>
            Gets or sets the folder name for 'beforeMig' scripts.
            </summary>
            <value>
            The name of the folder for scripts to run before migration and outside of a transaction.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.AfterMigrationFolderName">
            <summary>
            Gets or sets the folder name for 'afterMig' scripts.
            </summary>
            <value>
            The name of the folder for scripts to run before migration and outside of a transaction.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.SchemaName">
            <summary>
            Gets or sets the schema name to use instead of [RoundhousE].
            </summary>
            <value>
            The schema where RH stores it's tables.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.Environment">
            <summary>
            Gets or sets the environment for RH to be scoped.
            </summary>
            <value>
            This allows RH to be environment aware and only run scripts that are in a particular environment based on the namingof the script. LOCAL.something**.ENV.**sql would only be run in the LOCAL environment.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.Restore">
            <summary>
            Gets or sets a value indicating whether perform a restore.
            </summary>
            <value>
            This instructs RH to do a restore (with the <see cref="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RestoreFilePath"/> parameter) of a database before running migration scripts.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RestoreFilePath">
            <summary>
            Gets or sets the restore file path.
            </summary>
            <value>
            File path of back when Restore is set to true
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.CreateDatabaseCustomScript">
            <summary>
            Gets or sets the custom database creation script.
            </summary>
            <value>
            This instructs RH to use this script for creating a database instead of the default based on the SQLType.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.OutputPath">
            <summary>
            Gets or sets the output path.
            </summary>
            <value>
            Path to where migration artifacts are stored.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.WarnOnOneTimeScriptChanges">
            <summary>
            Gets or sets a value indicating whether to warn when previously run scripts have changed.
            </summary>
            <value>
            Instructs RH to execute changed one time scripts (DDL/DML in 'Up'/<see cref="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.UpFolderName"/>) that have previously been run against the database instead of failing. A warning is logged for each one time scripts that is rerun.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.Silent">
            <summary>
             Gets or sets a value indicating whether to keep RH silent.
            </summary>
            <value>
            Tells RH not to ask for any input when it runs.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.DatabaseType">
            <summary>
            Gets or sets database type.
            </summary>
            <value>
            Database Type (fully qualified class name implementing [roundhouse.sql.Database, roundhouse])
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.Drop">
            <summary>
             Gets or sets a value indicating whether to drop the DB.
            </summary>
            <value>
            This instructs RH to remove a database and not run migration scripts.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.WithTransaction">
            <summary>
             Gets or sets a value indicating whether to use transactions.
            </summary>
            <value>
            This instructs RH to run inside of a transaction.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.RecoveryMode">
            <summary>
            Gets or sets SQL Server recovery mode.
            </summary>
            <value>
            This sets the recovery model for SQL Server during migration. (NoChange, Simple, Full)
            </value>
        </member>
        <member name="P:Cake.Common.Tools.Roundhouse.RoundhouseSettings.DryRun">
            <summary>
             Gets or sets a value indicating whether to perform a dry run.
            </summary>
            <value>
            This instructs RH to log what would have run, but not to actually run anything against the database. Use this option if you are trying to figure out what RH is going to do.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.ISignToolResolver">
            <summary>
            Represents a sign tool resolver.
            </summary>
            <remarks>
            This exists only to be able to test the sign tool.
            Do not use this interface since it will be removed.
            </remarks>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.ISignToolResolver.GetPath">
            <summary>
            Resolves the path to the sign tool.
            </summary>
            <returns>The path to the sign tool.</returns>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignAliases">
            <summary>
            Contains functionality related to signing assemblies with PFX certificates.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="context">The context.</param>
            <param name="assembly">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var file = "Core.dll";
                Sign(file, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digitalcertificate.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="context">The context.</param>
            <param name="assembly">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var file = new FilePath("Core.dll");
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digitalcertificate.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var files = new string[] { "Core.dll", "Common.dll" };
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digitalcertificate.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignAliases.Sign(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The target assembly.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            Task("Sign")
                .IsDependentOn("Clean")
                .IsDependentOn("Restore")
                .IsDependentOn("Build")
                .Does(() =>
            {
                var files = GetFiles(solutionDir + "/**/bin/" + configuration + "/**/*.exe");
                Sign(files, new SignToolSignSettings {
                        TimeStampUri = new Uri("http://timestamp.digicert.com"),
                        CertPath = "digitalcertificate.pfx",
                        Password = "TopSecret"
                });
            });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignRunner">
            <summary>
            The SignTool SIGN assembly runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.IRegistry)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber,Cake.Core.IO.IRegistry,Cake.Common.Tools.SignTool.ISignToolResolver)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="processRunner">The process runner.</param>
            <param name="globber">The globber.</param>
            <param name="registry">The registry.</param>
            <param name="resolver">The resolver.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Signs the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>
            The name of the tool (<c>SignTool SIGN</c>).
            </returns>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.SignTool.SignToolSignRunner.GetAlternativeToolPaths(Cake.Common.Tools.SignTool.SignToolSignSettings)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.SignTool.SignToolSignSettings">
            <summary>
            Contains settings used by  <see cref="T:Cake.Common.Tools.SignTool.SignToolSignRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.TimeStampUri">
            <summary>
            Gets or sets the timestamp server's URL.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.CertPath">
            <summary>
            Gets or sets the <c>PFX</c> certificate path.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.SignTool.SignToolSignSettings.Password">
            <summary>
            Gets or sets the <c>PFX</c> certificate password.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.Architecture">
            <summary>
            The architecture for the package.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.X64">
            <summary>
            Architecture: <c>x86_64</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.X86">
            <summary>
            Architecture: <c>x86</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.WiX.Architecture.IA64">
            <summary>
            Architecture: <c>Itanium</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.CandleRunner">
            <summary>
            The WiX Candle runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.WiX.CandleRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Runs Candle with the specified source files and settings.
            </summary>
            <param name="sourceFiles">The source files (<c>.wxs</c>) to compile.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.WiX.CandleRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.WiX.CandleSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.WiX.CandleRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Architecture">
            <summary>
            Gets or sets a value indicating which architecture to build the MSI package for.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Defines">
            <summary>
            Gets or sets the pre processor defines.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Extensions">
            <summary>
            Gets or sets the WiX extensions to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.FIPS">
            <summary>
            Gets or sets a value indicating whether FIPS compliant algorithms should be used.
            </summary>
            <value>
              <c>true</c> if FIPS compliant algorithms should be used, otherwise <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.NoLogo">
            <summary>
            Gets or sets a value indicating whether to show the logo information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory for the object files.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Pedantic">
            <summary>
            Gets or sets a value indicating whether to show pedantic messages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.ShowSourceTrace">
            <summary>
            Gets or sets a value indicating whether to show source trace for errors, warnings and verbose messages.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.CandleSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to show verbose output.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.LightRunner">
            <summary>
            The WiX Light runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.WiX.LightRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The Cake environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.Run(System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Runs Light with the specified input object files and settings.
            </summary>
            <param name="objectFiles">The object files (<c>.wixobj</c>).</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.WiX.LightRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.WiX.LightSettings">
            <summary>
            Contains settings used by the <see cref="T:Cake.Common.Tools.WiX.LightRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.Defines">
            <summary>
            Gets or sets the defined WiX variables.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.Extensions">
            <summary>
            Gets or sets the WiX extensions to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.RawArguments">
            <summary>
            Gets or sets raw command line arguments to pass through to the linker.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.NoLogo">
            <summary>
            Gets or sets a value indicating whether to show the logo information.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.WiX.LightSettings.OutputFile">
            <summary>
            Gets or sets the path to the output file (i.e. the resulting MSI package).
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.WiX.WiXAliases">
            <summary>
            Contains functionality related to running WiX tools.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXCandle(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Compiles all <c>.wxs</c> sources matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globbing pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXCandle(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.CandleSettings)">
            <summary>
            Compiles all <c>.wxs</c> sources in the provided source files.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceFiles">The source files.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXLight(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Links all <c>.wixobj</c> files matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The globbing pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.WiX.WiXAliases.WiXLight(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.WiX.LightSettings)">
            <summary>
            Links all <c>.wixobj</c> files in the provided object files.
            </summary>
            <param name="context">The context.</param>
            <param name="objectFiles">The object files.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.XBuildSettingsExtensions">
            <summary>
            Contains functionality related to MSBuild settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettingsExtensions.WithTarget(Cake.Common.Tools.XBuild.XBuildSettings,System.String)">
            <summary>
            Adds a XBuild target to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="target">The XBuild target.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettingsExtensions.UseToolVersion(Cake.Common.Tools.XBuild.XBuildSettings,Cake.Common.Tools.XBuild.XBuildToolVersion)">
            <summary>
            Sets the tool version.
            </summary>
            <param name="settings">The settings.</param>
            <param name="version">The version.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettingsExtensions.WithProperty(Cake.Common.Tools.XBuild.XBuildSettings,System.String,System.String[])">
            <summary>
            Adds a property to the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The property name.</param>
            <param name="values">The property values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettingsExtensions.SetConfiguration(Cake.Common.Tools.XBuild.XBuildSettings,System.String)">
            <summary>
            Sets the configuration.
            </summary>
            <param name="settings">The settings.</param>
            <param name="configuration">The configuration.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettingsExtensions.SetVerbosity(Cake.Common.Tools.XBuild.XBuildSettings,Cake.Core.Diagnostics.Verbosity)">
            <summary>
            Sets the build log verbosity.
            </summary>
            <param name="settings">The settings.</param>
            <param name="verbosity">The build log verbosity.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.ParallelismOption">
            <summary>
            Represents XUnit2's options for parallel test execution
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XUnit.ParallelismOption.None">
            <summary>
            Turn off all parallelization
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XUnit.ParallelismOption.Collections">
            <summary>
            Only parallelize collections
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XUnit.ParallelismOption.Assemblies">
            <summary>
            Only parallelize assemblies
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XUnit.ParallelismOption.All">
            <summary>
            Parallelize assemblies and collections.
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Aliases">
            <summary>
            Contains functionality related to running xUnit.net tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Aliases.XUnit2(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs all xUnit.net v2 tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2SettingsExtensions">
            <summary>
            Contains functionality related to XUnit2 settings.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2SettingsExtensions.IncludeTrait(Cake.Common.Tools.XUnit.XUnit2Settings,System.String,System.String[])">
            <summary>
            Adds a trait to the settings, to include in test execution.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The trait name.</param>
            <param name="values">The trait values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2SettingsExtensions.ExcludeTrait(Cake.Common.Tools.XUnit.XUnit2Settings,System.String,System.String[])">
            <summary>
            Adds a trait to the settings, to exclude in test execution.
            </summary>
            <param name="settings">The settings.</param>
            <param name="name">The trait name.</param>
            <param name="values">The trait values.</param>
            <returns>The same <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/> instance so that multiple calls can be chained.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitAliases">
            <summary>
            Contains functionality related to running xUnit.net tests.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.String)">
            <summary>
            Runs all xUnit.net tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.String,Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the assemblies matching the specified pattern.
            </summary>
            <param name="context">The context.</param>
            <param name="pattern">The pattern.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{System.String},Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitAliases.XUnit(Cake.Core.ICakeContext,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs all xUnit.net tests in the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="assemblies">The assemblies.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.XUnit.XUnitRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnitSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether tests should be run as a shadow copy.
            Default value is <c>true</c>.
            </summary>
            <value>
              <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.XmlReport">
            <summary>
            Gets or sets a value indicating whether an XML report should be generated.
            </summary>
            <value>
              <c>true</c> if an XML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.HtmlReport">
            <summary>
            Gets or sets a value indicating whether an HTML report should be generated.
            </summary>
            <value>
              <c>true</c> if an HTML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnitSettings.Silent">
            <summary>
            Gets or sets a value indicating whether or not output running test count.
            </summary>
            <value>
              <c>true</c> if running test count should be outputted; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnitRunner">
            <summary>
            The xUnit.net (v1) test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnitRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="runner">The runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnitSettings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnitRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Runner">
            <summary>
            The xUnit.net v2 test runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnit2Runner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="runner">The runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.XUnit.XUnit2Settings)">
            <summary>
            Runs the tests in the specified assembly.
            </summary>
            <param name="assemblyPath">The assembly path.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Runner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XUnit.XUnit2Settings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.XUnit.XUnit2Runner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XUnit.XUnit2Settings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XUnit.XUnit2Settings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.ShadowCopy">
            <summary>
            Gets or sets a value indicating whether tests should be run as a shadow copy.
            Default value is <c>true</c>.
            </summary>
            <value>
              <c>true</c> if tests should be run as a shadow copy; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.OutputDirectory">
            <summary>
            Gets or sets the output directory.
            </summary>
            <value>The output directory.</value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.XmlReport">
            <summary>
            Gets or sets a value indicating whether an XML report should be generated.
            </summary>
            <value>
              <c>true</c> if an XML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.XmlReportV1">
            <summary>
            Gets or sets a value indicating whether an xUnit.net v1 style XML report should be generated.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.HtmlReport">
            <summary>
            Gets or sets a value indicating whether an HTML report should be generated.
            </summary>
            <value>
              <c>true</c> if an HTML report should be generated; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.NoAppDomain">
            <summary>
            Gets or sets a value indicating whether to not use app domains to run test code.
            </summary>
            <value>
              <c>true</c> to not use app domains to run test code; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.Parallelism">
            <summary>
            Gets or sets the parallelism option.
            Corresponds to the -parallel command line switch.
            </summary>
            <value>
            The parallelism option.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.MaxThreads">
            <summary>
            Gets or sets the maximum thread count for collection parallelization.
            </summary>
            <value>
              <c>null</c> (default);
              <c>0</c>: run with unbounded thread count;
              <c>&gt;0</c>: limit task thread pool size to value;
            </value>
            <exception cref="T:System.ArgumentOutOfRangeException" accessor="set">value &lt; 0</exception>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.TraitsToInclude">
            <summary>
            Gets the traits to include.
            </summary>
            <remarks>
            Only run tests with matching name/value traits.
            If more than one is specified, it acts as an OR operation.
            </remarks>
            <value>
            The traits to include.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.XUnit.XUnit2Settings.TraitsToExclude">
            <summary>
            Gets the traits to exclude.
            </summary>
            <remarks>
            Do not run tests with matching name/value traits.
            If more than one is specified, it acts as an AND operation.
            </remarks>
            <value>
            The traits to exclude.
            </value>
        </member>
        <member name="T:Cake.Common.Xml.XmlPokeAliases">
            <summary>
            Contains functionality related to XML XSL transformation.
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliases.XmlPoke(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String,System.String)">
            <summary>
            Set the value of, or remove, target nodes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The target file.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
            <example>
              <para>
              Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
              to <c>productionhost.somecompany.com</c>.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
            });
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
            </Commands>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\Commands.xsd", new XmlPokeSettings {
                    Namespaces = new Dictionary<string, string> {
                        { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                    }
                });
            });
                ]]>
              </code>
            <example>
              <para>
              Remove an app setting from a config file.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                    <add key="testing" value="true" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/configuration/appSettings/add[@testing]", null);
            });
                ]]>
              </code>
            </example>
            <para>
            Credit to NAnt for the original example.
            http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
            </para>
            </example>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliases.XmlPoke(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String,System.String,Cake.Common.Xml.XmlPokeSettings)">
            <summary>
            Set the value of, or remove, target nodes.
            </summary>
            <param name="context">The context.</param>
            <param name="filePath">The target file.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
            <param name="settings">Additional settings to tweak Xml Poke behavior.</param>
            <example>
              <para>
              Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
              to <c>productionhost.somecompany.com</c>.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
            });
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
            </Commands>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\Commands.xsd", new XmlPokeSettings {
                    Namespaces = new Dictionary<string, string> {
                        { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                    }
                });
            });
                ]]>
              </code>
            <example>
              <para>
              Remove an app setting from a config file.
              </para>
              <para>XML file:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                    <add key="testing" value="true" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var file = File("test.xml");
                XmlPoke(file, "/configuration/appSettings/add[@testing]", null);
            });
                ]]>
              </code>
            </example>
            <para>
            Credit to NAnt for the original example.
            http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
            </para>
            </example>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliases.XmlPoke(Cake.Core.ICakeContext,System.String,System.String,System.String)">
            <summary>
            Set the value of, or remove, target nodes.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceXml">The source xml to transform.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
            <returns>Resulting XML.</returns>
            <example>
              <para>
              Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
              to <c>productionhost.somecompany.com</c>.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
            });
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
            </Commands>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\Commands.xsd", new XmlPokeSettings {
                    Namespaces = new Dictionary<string, string> {
                        { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                    }
                });
            });
                ]]>
              </code>
            <example>
              <para>
              Remove an app setting from a config file.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                    <add key="testing" value="true" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/configuration/appSettings/add[@testing]", null);
            });
                ]]>
              </code>
            </example>
            <para>
            Credit to NAnt for the original example.
            http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
            </para>
            </example>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliases.XmlPoke(Cake.Core.ICakeContext,System.String,System.String,System.String,Cake.Common.Xml.XmlPokeSettings)">
            <summary>
            Set the value of, or remove, target nodes.
            </summary>
            <param name="context">The context.</param>
            <param name="sourceXml">The source xml to transform.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
            <param name="settings">Additional settings to tweak Xml Poke behavior.</param>
            <returns>Resulting XML.</returns>
            <example>
              <para>
              Change the <c>server</c> setting in the configuration from <c>testhost.somecompany.com</c>
              to <c>productionhost.somecompany.com</c>.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/configuration/appSettings/add[@key = 'server']/@value", "productionhost.somecompany.com");
            });
                ]]>
              </code>
            </example>
            <example>
              <para>
              Modify the <c>noNamespaceSchemaLocation</c> in an XML file.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <Commands xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="Path Value">
            </Commands>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/Commands/@xsi:noNamespaceSchemaLocation", "d:\Commands.xsd", new XmlPokeSettings {
                    Namespaces = new Dictionary<string, string> {
                        { /* Prefix */ "xsi", /* URI */ "http://www.w3.org/2001/XMLSchema-instance" }
                    }
                });
            });
                ]]>
              </code>
            <example>
              <para>
              Remove an app setting from a config file.
              </para>
              <para>XML string:</para>
              <code>
                <![CDATA[
            <?xml version="1.0" encoding="utf-8" ?>
            <configuration>
                <appSettings>
                    <add key="server" value="testhost.somecompany.com" />
                    <add key="testing" value="true" />
                </appSettings>
            </configuration>
                ]]>
              </code>
              <para>Cake Task:</para>
              <code>
                <![CDATA[
            Task("Transform")
                .Does(() =>
            {
                var result = XmlPoke(xmlString, "/configuration/appSettings/add[@testing]", null);
            });
                ]]>
              </code>
            </example>
            <para>
            Credit to NAnt for the original example.
            http://nant.sourceforge.net/release/latest/help/tasks/xmlpoke.html
            </para>
            </example>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeAliases.XmlPoke(System.Xml.XmlReader,System.Xml.XmlWriter,System.String,System.String,Cake.Common.Xml.XmlPokeSettings)">
            <summary>
            Set the value of, or remove, target nodes.
            </summary>
            <param name="source">The source xml to transform.</param>
            <param name="destination">The destination to write too.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="value">The value to set too. Leave blank to remove the selected nodes.</param>
            <param name="settings">Additional settings to tweak Xml Poke behavior.</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlPokeSettings">
            <summary>
            Contains settings for <see cref="T:Cake.Common.Xml.XmlPokeAliases"/>
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlPokeSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Xml.XmlPokeSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlPokeSettings.PreserveWhitespace">
            <summary>
            Gets or sets a value indicating whether to preserve white space.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlPokeSettings.Namespaces">
            <summary>
            Gets or sets namespaces to include for xpath recognition.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlPokeSettings.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformation">
            <summary>
            Provides functionality to perform XML transformation
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.String,System.String)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.String,System.String,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="settings">Settings for result file xml transformation.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(Cake.Core.IO.IFileSystem,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(Cake.Core.IO.IFileSystem,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
            <param name="settings">Settings for result file xml transformation.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.IO.TextReader,System.IO.TextReader,System.IO.Stream,System.Xml.XmlWriterSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="result">Transformation result.</param>
            <param name="settings">Optional settings for result file xml writer</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformation.Transform(System.Xml.XmlReader,System.Xml.XmlReader,System.Xml.XmlWriter)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="result">Transformation result.</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformationAlias">
            <summary>
            Contains functionality related to XML XSL transformation.
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,System.String,System.String)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,System.String,System.String,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xsl">XML style sheet.</param>
            <param name="xml">XML data.</param>
            <param name="settings">Optional settings for result file xml writer</param>
            <returns>Transformed XML string.</returns>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path, will overwrite if exists.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationAlias.XmlTransform(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,Cake.Common.Xml.XmlTransformationSettings)">
            <summary>
            Performs XML XSL transformation
            </summary>
            <param name="context">The context.</param>
            <param name="xslPath">Path to xml style sheet.</param>
            <param name="xmlPath">Path xml data.</param>
            <param name="resultPath">Transformation result path.</param>
            <param name="settings">Optional settings for result file xml writer</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlTransformationSettings">
            <summary>
            Contains settings for <see cref="T:Cake.Common.Xml.XmlTransformation"/>
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlTransformationSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Xml.XmlTransformationSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Overwrite">
            <summary>
            Gets or sets a value indicating whether overwriting existing file is permitted
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.CheckCharacters">
            <summary>
            Gets or sets a value indicating whether the XML writer should check to ensure that all characters in the document conform to the "2.2 Characters" section of the W3C XML 1.0 Recommendation.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.ConformanceLevel">
            <summary>
            Gets or sets a value indicating level of conformance that the XmlWriter checks the XML output for.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.DoNotEscapeUriAttributes">
            <summary>
            Gets or sets a value indicating whether the XmlWriter does not escape URI attributes.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Encoding">
            <summary>
            Gets or sets the type of text encoding to use.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.Indent">
            <summary>
            Gets or sets a value indicating whether to indent elements.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.IndentChars">
            <summary>
            Gets or sets the character string to use when indenting. This setting is used when the Indent property is set to true.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NamespaceHandling">
            <summary>
            Gets or sets a value that indicates whether the XmlWriter should remove duplicate namespace declarations when writing XML content. The default behavior is for the writer to output all namespace declarations that are present in the writer's namespace resolver.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineChars">
            <summary>
            Gets or sets the character string to use for line breaks.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineHandling">
            <summary>
            Gets or sets a value indicating whether to normalize line breaks in the output.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.NewLineOnAttributes">
            <summary>
            Gets or sets a value indicating whether to write attributes on a new line.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.OmitXmlDeclaration">
            <summary>
            Gets or sets a value indicating whether to omit an XML declaration.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlTransformationSettings.WriteEndDocumentOnClose">
            <summary>
            Gets or sets a value indicating whether the XmlWriter will add closing tags to all unclosed element tags when the Close method is called
            </summary>
        </member>
        <member name="T:Cake.Common.Net.HttpAliases">
            <summary>
            Contains functionality related to HTTP operations
            </summary>
        </member>
        <member name="M:Cake.Common.Net.HttpAliases.DownloadFile(Cake.Core.ICakeContext,System.String)">
            <summary>
            Downloads the specified resource over HTTP to a temporary file.
            </summary>
            <param name="context">The context.</param>
            <param name="address">The URL of the resource to download.</param>
            <returns>The path to the downloaded file.</returns>
        </member>
        <member name="M:Cake.Common.Net.HttpAliases.DownloadFile(Cake.Core.ICakeContext,System.Uri)">
            <summary>
            Downloads the specified resource over HTTP to a temporary file.
            </summary>
            <param name="context">The context.</param>
            <param name="address">The URL of file to download.</param>
            <returns>The path to the downloaded file.</returns>
        </member>
        <member name="M:Cake.Common.Net.HttpAliases.DownloadFile(Cake.Core.ICakeContext,System.String,Cake.Core.IO.FilePath)">
            <summary>
            Downloads the specified resource over HTTP to the specified output path.
            </summary>
            <param name="context">The context.</param>
            <param name="address">The URL of the resource to download.</param>
            <param name="outputPath">The output path.</param>
        </member>
        <member name="M:Cake.Common.Net.HttpAliases.DownloadFile(Cake.Core.ICakeContext,System.Uri,Cake.Core.IO.FilePath)">
            <summary>
            Downloads the specified resource over HTTP to the specified output path.
            </summary>
            <param name="context">The context.</param>
            <param name="address">The URL of the resource to download.</param>
            <param name="outputPath">The output path.</param>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.XBuildSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.XBuild.XBuildRunner"/>.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XBuild.XBuildSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.XBuild.XBuildSettings.Targets">
            <summary>
            Gets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="P:Cake.Common.Tools.XBuild.XBuildSettings.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Cake.Common.Tools.XBuild.XBuildSettings.ToolVersion">
            <summary>
            Gets or sets the tool version.
            </summary>
            <value>The tool version.</value>
        </member>
        <member name="P:Cake.Common.Tools.XBuild.XBuildSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Cake.Common.Tools.XBuild.XBuildSettings.Verbosity">
            <summary>
            Gets or sets the amount of information to display in the build log.
            Each logger displays events based on the verbosity level that you set for that logger.
            </summary>
            <value>The build log verbosity.</value>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.XBuildRunner">
            <summary>
            The MSBuild runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IProcessRunner,Cake.Core.IO.IGlobber)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.XBuild.XBuildRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="runner">The runner.</param>
            <param name="globber">The globber.</param>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildRunner.Run(Cake.Core.IO.FilePath,Cake.Common.Tools.XBuild.XBuildSettings)">
            <summary>
            Runs MSBuild with the specified settings.
            </summary>
            <param name="solution">The solution to build.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildRunner.GetToolExecutableNames">
            <summary>
            Gets the possible names of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildRunner.GetAlternativeToolPaths(Cake.Common.Tools.XBuild.XBuildSettings)">
            <summary>
            Gets alternative file paths which the tool may exist in
            </summary>
            <param name="settings">The settings.</param>
            <returns>The default tool path.</returns>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.XBuildToolVersion">
            <summary>
            Represents a MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XBuild.XBuildToolVersion.Default">
            <summary>
            The highest available MSBuild tool version.
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XBuild.XBuildToolVersion.NET20">
            <summary>
            XBuild tool version: <c>.NET 2.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XBuild.XBuildToolVersion.NET30">
            <summary>
            MSBuild tool version: <c>.NET 3.0</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XBuild.XBuildToolVersion.NET35">
            <summary>
            MSBuild tool version: <c>.NET 3.5</c>
            </summary>
        </member>
        <member name="F:Cake.Common.Tools.XBuild.XBuildToolVersion.NET40">
            <summary>
            MSBuild tool version: <c>.NET 4.0</c>
            </summary>
        </member>
        <member name="T:Cake.Common.Tools.XBuild.XBuildAliases">
            <summary>
            Contains functionality related to MSBuild.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliases.XBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution to build.</param>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliases.XBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.XBuild.XBuildSettings})">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution to build.</param>
            <param name="configurator">The settings configurator.</param>
        </member>
        <member name="M:Cake.Common.Tools.XBuild.XBuildAliases.XBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Common.Tools.XBuild.XBuildSettings)">
            <summary>
            Builds the specified solution using MSBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution to build.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="T:Cake.Common.Tools.DotNetBuildSettings">
            <summary>
            Contains settings used by the <c>DotNetBuild</c> alias.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildSettings.#ctor(Cake.Core.IO.FilePath)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.DotNetBuildSettings"/> class.
            </summary>
            <param name="solution">The solution.</param>
        </member>
        <member name="P:Cake.Common.Tools.DotNetBuildSettings.Solution">
            <summary>
            Gets the solution path.
            </summary>
            <value>The solution.</value>
        </member>
        <member name="P:Cake.Common.Tools.DotNetBuildSettings.Targets">
            <summary>
            Gets the targets.
            </summary>
            <value>The targets.</value>
        </member>
        <member name="P:Cake.Common.Tools.DotNetBuildSettings.Properties">
            <summary>
            Gets the properties.
            </summary>
            <value>The properties.</value>
        </member>
        <member name="P:Cake.Common.Tools.DotNetBuildSettings.Configuration">
            <summary>
            Gets or sets the configuration.
            </summary>
            <value>The configuration.</value>
        </member>
        <member name="P:Cake.Common.Tools.DotNetBuildSettings.Verbosity">
            <summary>
            Gets or sets the amount of information to display in the build log.
            Each logger displays events based on the verbosity level that you set for that logger.
            </summary>
            <value>The build log verbosity.</value>
        </member>
        <member name="T:Cake.Common.Tools.DotNetBuildAliases">
            <summary>
            Contains functionality to run either MSBuild on Windows or XBuild on Mac/Linux/Unix.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildAliases.DotNetBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath)">
            <summary>
            Builds the specified solution using MSBuild or XBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
        </member>
        <member name="M:Cake.Common.Tools.DotNetBuildAliases.DotNetBuild(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.Action{Cake.Common.Tools.DotNetBuildSettings})">
            <summary>
            Builds the specified solution using MSBuild or XBuild.
            </summary>
            <param name="context">The context.</param>
            <param name="solution">The solution.</param>
            <param name="configurator">The configurator.</param>
        </member>
        <member name="T:Cake.Common.Tools.ILRepack.ILRepackSettings">
            <summary>
            Contains settings used by <see cref="T:Cake.Common.Tools.ILRepack.ILRepackRunner"/>.
            </summary>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Keyfile">
            <summary>
            Gets or sets a keyfile to sign the output assembly
            </summary>
            <value>The keyfile.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Log">
            <summary>
            Gets or sets a file to enable logging to (no logging if null or empty)
            </summary>
            <value>The log file.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Version">
            <summary>
            Gets or sets the target assembly version.
            </summary>
            <value>The version.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Union">
            <summary>
            Gets or sets a value indicating whether to merge types with identical names into one
            </summary>
            <value><c>true</c> if types with identical names should be merged into one; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.NDebug">
            <summary>
            Gets or sets a value indicating whether to disable symbol file generation
            </summary>
            <value><c>true</c> if debug symbols should be disabled; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.CopyAttrs">
            <summary>
            Gets or sets a value indicating whether to copy assembly attributes (by default only the primary assembly attributes are copied)
            </summary>
            <value><c>true</c> if assembly attributes should be copied; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Attr">
            <summary>
            Gets or sets the assembly file to take attributes from
            </summary>
            <value>The assembly file to take attributes from.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.AllowMultiple">
            <summary>
            Gets or sets a value indicating whether to allow multiple attributes (if type allows)
            </summary>
            <value><c>true</c> if multiple attributes should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.TargetKind">
            <summary>
            Gets or sets the specify target assembly kind (library, exe, winexe supported, default is same as first assembly)
            </summary>
            <value>The kind of the target assembly to create.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.TargetPlatform">
            <summary>
            Gets or sets the target platform (v1, v1.1, v2, v4 supported)
            </summary>
            <value>The target platform.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.XmlDocs">
            <summary>
            Gets or sets a value indicating whether to merge XML documentation as well
            </summary>
            <value><c>true</c> if xml documents should be merged; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Libs">
            <summary>
            Gets or sets the paths to search directories for referenced assemblies (can be specified multiple times)
            </summary>
            <value>The libs.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Internalize">
            <summary>
            Gets or sets a value indicating whether to set all types but the ones from the first assembly 'internal'
            </summary>
            <value>
            <c>true</c> if types in assemblies other than the primary assembly should
            have their visibility modified to internal; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.DelaySign">
            <summary>
            Gets or sets a value indicating whether to set the key, but don't sign the assembly
            </summary>
            <value><c>true</c> if assembly should be delay signed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.AllowDup">
            <summary>
            Gets or sets the specified type for being duplicated in input assemblies
            </summary>
            <value>The type to allow duplication of.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.AllowDuplicateResources">
            <summary>
            Gets or sets a value indicating whether to duplicate resources in output assembly (by default they're ignored)
            </summary>
            <value><c>true</c> if duplicate resources should be allowed in the output assembly; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.ZeroPeKind">
            <summary>
            Gets or sets a value indicating whether to allow assemblies with Zero PeKind (but obviously only IL will get merged)
            </summary>
            <value><c>true</c> if assemblies with Zero PeKind should be allowed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Wildcards">
            <summary>
            Gets or sets a value indicating whether to allow (and resolve) file wildcards (e.g. `*`.dll) in input assemblies
            </summary>
            <value><c>true</c> if file wildcards should be allowed in input assembly paths; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Parallel">
            <summary>
            Gets or sets a value indicating whether to use as many CPUs as possible to merge the assemblies
            </summary>
            <value><c>true</c> if merging should use as many CPUs as possible in parallel; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Pause">
            <summary>
            Gets or sets a value indicating whether to pause execution once completed (good for debugging)
            </summary>
            <value><c>true</c> if execution should pause once completed; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Cake.Common.Tools.ILRepack.ILRepackSettings.Verbose">
            <summary>
            Gets or sets a value indicating whether to show more logs
            </summary>
            <value><c>true</c> if more logs should be output during execution; otherwise, <c>false</c>.</value>
        </member>
        <member name="T:Cake.Common.Tools.ILRepack.ILRepackRunner">
            <summary>
            The ILMerge runner.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackRunner.#ctor(Cake.Core.IO.IFileSystem,Cake.Core.ICakeEnvironment,Cake.Core.IO.IGlobber,Cake.Core.IO.IProcessRunner)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Tools.ILRepack.ILRepackRunner"/> class.
            </summary>
            <param name="fileSystem">The file system.</param>
            <param name="environment">The environment.</param>
            <param name="globber">The globber.</param>
            <param name="processRunner">The process runner.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackRunner.Merge(Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILRepack.ILRepackSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="outputAssemblyPath">The output assembly path.</param>
            <param name="primaryAssemblyPath">The primary assembly path.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackRunner.GetToolName">
            <summary>
            Gets the name of the tool.
            </summary>
            <returns>The name of the tool.</returns>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackRunner.GetToolExecutableNames">
            <summary>
            Gets the name of the tool executable.
            </summary>
            <returns>The tool executable name.</returns>
        </member>
        <member name="T:Cake.Common.Tools.ILRepack.ILRepackAliases">
            <summary>
            Contains functionality related to ILRepack.
            </summary>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackAliases.ILRepack(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath})">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILRepack("./MergedCake.exe", "./Cake.exe", assemblyPaths);
            </code>
            </example>
        </member>
        <member name="M:Cake.Common.Tools.ILRepack.ILRepackAliases.ILRepack(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,Cake.Core.IO.FilePath,System.Collections.Generic.IEnumerable{Cake.Core.IO.FilePath},Cake.Common.Tools.ILRepack.ILRepackSettings)">
            <summary>
            Merges the specified assemblies.
            </summary>
            <param name="context">The context.</param>
            <param name="outputFile">The output file.</param>
            <param name="primaryAssembly">The primary assembly.</param>
            <param name="assemblyPaths">The assembly paths.</param>
            <param name="settings">The settings.</param>
            <example>
            <code>
            var assemblyPaths = GetFiles("./**/Cake.*.dll");
            ILRepack(
                "./MergedCake.exe",
                "./Cake.exe",
                assemblyPaths,
                new ILRepackSettings { Internalize = true });
            </code>
            </example>
        </member>
        <member name="T:Cake.Common.Build.Bamboo.Data.BambooPlanInfo">
            <summary>
            Provides Bamboo project information for a current build.
            </summary>
        </member>
        <member name="M:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.#ctor(Cake.Core.ICakeEnvironment)">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Build.Bamboo.Data.BambooPlanInfo"/> class.
            </summary>
            <param name="environment">The environment.</param>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.PlanName">
            <summary>
            Gets the Bamboo Plan Name
            </summary>
            <value>
              The Bamboo Plan Name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.ShortPlanName">
            <summary>
            Gets the Bamboo short Plan Name
            </summary>
            <value>
              The Bamboo Plan Name in it's short form.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.PlanKey">
            <summary>
            Gets the key of the current plan, in the form PROJECT-PLAN, e.g. BAM-MAIN
            </summary>
            <value>
            The project name.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.ShortPlanKey">
            <summary>
            Gets the Bamboo short Plan Key.
            </summary>
            <value>
              The Bamboo Plan Key in it's hort form.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.ShortJobKey">
            <summary>
            Gets the Bamboo short job key.
            </summary>
            <value>
              The Bamboo job key in it's short form.
            </value>
        </member>
        <member name="P:Cake.Common.Build.Bamboo.Data.BambooPlanInfo.ShortJobName">
            <summary>
            Gets the Bamboo short Job Name.
            </summary>
            <value>
              The Bamboo Job Name in it's short form.
            </value>
        </member>
        <member name="T:Cake.Common.Xml.XmlPeekAliases">
            <summary>
            Contains functionality related to XML XPath queries.
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekAliases.XmlPeek(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String)">
            <summary>
            Gets the value of a target node.
            </summary>
            <returns>The value found at the given XPath query.</returns>
            <param name="context">The context.</param>
            <param name="filePath">The target file.</param>
            <param name="xpath">The xpath of the node to get.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekAliases.XmlPeek(Cake.Core.ICakeContext,Cake.Core.IO.FilePath,System.String,Cake.Common.Xml.XmlPeekSettings)">
            <summary>
            Get the value of a target node.
            </summary>
            <returns>The value found at the given XPath query.</returns>
            <param name="context">The context.</param>
            <param name="filePath">The target file.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="settings">Additional settings to tweak Xml Peek behavior.</param>
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekAliases.XmlPeek(System.Xml.XmlReader,System.String,Cake.Common.Xml.XmlPeekSettings)">
            <summary>
            Gets the value of a target node.
            </summary>
            <returns>The value found at the given XPath query (or the first, if multiple eligible nodes are found).</returns>
            <param name="source">The source xml to transform.</param>
            <param name="xpath">The xpath of the nodes to set.</param>
            <param name="settings">Additional settings to tweak Xml Peek behavior.</param>
        </member>
        <member name="T:Cake.Common.Xml.XmlPeekSettings">
            <summary>
            Contains settings for <see cref="T:Cake.Common.Xml.XmlPeekAliases"/>
            </summary>
        </member>
        <member name="M:Cake.Common.Xml.XmlPeekSettings.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Cake.Common.Xml.XmlPeekSettings"/> class.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlPeekSettings.Namespaces">
            <summary>
            Gets or sets namespaces to include for xpath recognition.
            </summary>
        </member>
        <member name="P:Cake.Common.Xml.XmlPeekSettings.PreserveWhitespace">
            <summary>
            Gets or sets a value indicating whether to preserve white space.
            </summary>
        </member>
    </members>
</doc>
